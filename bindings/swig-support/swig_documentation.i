// This file is generated by doc/docbook/src/api2swigdoc.pl from
// doc/docbook/src/api.xml.  Do not modify by hand since this file
// will be overwritten.  Edit doc/docbook/src/api.xml instead.

%feature( "docstring", "Set format of numerical label for contours

DESCRIPTION:

    Set format of numerical label for contours.

    Redacted form: pl_setcontlabelformat(lexp, sigdig)

    This function is used example 9.



SYNOPSIS:

pl_setcontlabelformat(lexp, sigdig)

ARGUMENTS:

    lexp (PLINT, input) :    If the contour numerical label is greater
        than 10^(lexp) or less than 10^(-lexp), then the exponential
        format is used.  Default value of lexp is 4.

    sigdig (PLINT, input) :    Number of significant digits.  Default
        value is 2.
")
pl_setcontlabelformat;

%feature( "docstring", "Set parameters of contour labelling other than format of numerical label

DESCRIPTION:

    Set parameters of contour labelling other than those handled by
    pl_setcontlabelformat.

    Redacted form: pl_setcontlabelparam(offset, size, spacing, active)

    This function is used in example 9.



SYNOPSIS:

pl_setcontlabelparam(offset, size, spacing, active)

ARGUMENTS:

    offset (PLFLT, input) :    Offset of label from contour line (if set
        to 0.0, labels are printed on the lines).  Default value is 0.006.

    size (PLFLT, input) :    Font height for contour labels (normalized).
        Default value is 0.3.

    spacing (PLFLT, input) :    Spacing parameter for contour labels.
        Default value is 0.1.

    active (PLINT, input) :    Activate labels.  Set to 1 if you want
        contour labels on. Default is off (0).
")
pl_setcontlabelparam;

%feature( "docstring", "Advance the (sub-)page

DESCRIPTION:

    Advances to the next subpage if sub=0, performing a page advance if
    there are no remaining subpages on the current page.  If subpages
    aren't being used, pladv(0) will always advance the page.  If page>0,
    PLplot switches to the specified subpage.  Note that this allows you
    to overwrite a plot on the specified subpage; if this is not what you
    intended, use pleop followed by plbop to first advance the page.  This
    routine is called automatically (with page=0) by plenv, but if plenv
    is not used, pladv must be called after initializing PLplot but before
    defining the viewport.

    Redacted form: pladv(page)

    This function is used in examples 1, 2, 4, 6-12, 14-18, 20, 21, 23-27,
    29, and 31.



SYNOPSIS:

pladv(page)

ARGUMENTS:

    page (PLINT, input) :    Specifies the subpage number (starting from 1
        in the top left corner and increasing along the rows) to which to
        advance.  Set to zero to advance to the next subpage (or to the
        next page if subpages are not being used).
")
pladv;

%feature( "docstring", "Draw a circular or elliptical arc

DESCRIPTION:

    Draw a possibly filled arc centered at x, y with semimajor axis a and
    semiminor axis b, starting at angle1 and ending at angle2.

    Redacted form: General: plarc(x, y, a, b, angle1, angle2, rotate,
    fill)


    This function is used in examples 3 and 27.



SYNOPSIS:

plarc(x, y, a, b, angle1, angle2, rotate, fill)

ARGUMENTS:

    x (PLFLT, input) :    X coordinate of arc center.

    y (PLFLT, input) :    Y coordinate of arc center.

    a (PLFLT, input) :    Length of the semimajor axis of the arc.

    b (PLFLT, input) :    Length of the semiminor axis of the arc.

    angle1 (PLFLT, input) :    Starting angle of the arc relative to the
        semimajor axis.

    angle2 (PLFLT, input) :    Ending angle of the arc relative to the
        semimajor axis.

    rotate (PLFLT, input) :    Angle of the semimajor axis relative to the
        X-axis.

    fill (PLBOOL, input) :    Draw a filled arc.
")
plarc;

%feature( "docstring", "Draw a box with axes, etc. with arbitrary origin

DESCRIPTION:

    Draws a box around the currently defined viewport with arbitrary
    world-coordinate origin specified by x0 and y0 and labels it with
    world coordinate values appropriate to the window.  Thus plaxes should
    only be called after defining both viewport and window.  The ascii
    character strings xopt and yopt specify how the box should be drawn as
    described below.  If ticks and/or subticks are to be drawn for a
    particular axis, the tick intervals and number of subintervals may be
    specified explicitly, or they may be defaulted by setting the
    appropriate arguments to zero.

    Redacted form: General: plaxes(x0, y0, xopt, xtick, nxsub, yopt,
    ytick, nysub)


    This function is not used in any examples.



SYNOPSIS:

plaxes(x0, y0, xopt, xtick, nxsub, yopt, ytick, nysub)

ARGUMENTS:

    x0 (PLFLT, input) :    World X coordinate of origin.

    y0 (PLFLT, input) :    World Y coordinate of origin.

    xopt (PLCHAR_VECTOR, input) :    An ascii character string specifying
        options for the x axis.  The string can include any combination of
        the following letters (upper or lower case) in any order: a: Draws
        axis, X-axis is horizontal line (y=0), and Y-axis is vertical line
        (x=0).
            b: Draws bottom (X) or left (Y) edge of frame.
            c: Draws top (X) or right (Y) edge of frame.
            d: Plot labels as date / time. Values are assumed to be
            seconds since the epoch (as used by gmtime).
            f:  Always use fixed point numeric labels.
            g: Draws a grid at the major tick interval.
            h: Draws a grid at the minor tick interval.
            i: Inverts tick marks, so they are drawn outwards, rather than
            inwards.
            l: Labels axis logarithmically.  This only affects the labels,
            not the data, and so it is necessary to compute the logarithms
            of data points before passing them to any of the drawing
            routines.
            m: Writes numeric labels at major tick intervals in the
            unconventional location (above box for X, right of box for Y).
            n: Writes numeric labels at major tick intervals in the
            conventional location (below box for X, left of box for Y).
            o: Use custom labelling function to generate axis label text.
            The custom labelling function can be defined with the
            plslabelfunc command.
            s: Enables subticks between major ticks, only valid if t is
            also specified.
            t: Draws major ticks.
            u: Exactly like \"b\" except don't draw edge line.
            w: Exactly like \"c\" except don't draw edge line.
            x: Exactly like \"t\" (including the side effect of the
            numerical labels for the major ticks) except exclude drawing
            the major and minor tick marks.


    xtick (PLFLT, input) :    World coordinate interval between major
        ticks on the x axis. If it is set to zero, PLplot automatically
        generates a suitable tick interval.

    nxsub (PLINT, input) :    Number of subintervals between major x axis
        ticks for minor ticks.  If it is set to zero, PLplot automatically
        generates a suitable minor tick interval.

    yopt (PLCHAR_VECTOR, input) :    An ascii character string specifying
        options for the y axis.  The string can include any combination of
        the letters defined above for xopt, and in addition may contain:
        v: Write numeric labels for the y axis parallel to the base of the
        graph, rather than parallel to the axis.


    ytick (PLFLT, input) :    World coordinate interval between major
        ticks on the y axis. If it is set to zero, PLplot automatically
        generates a suitable tick interval.

    nysub (PLINT, input) :    Number of subintervals between major y axis
        ticks for minor ticks.  If it is set to zero, PLplot automatically
        generates a suitable minor tick interval.
")
plaxes;

%feature( "docstring", "Plot a histogram from binned data

DESCRIPTION:

    Plots a histogram consisting of nbin bins.  The value associated with
    the i'th bin is placed in x[i], and the number of points in the bin is
    placed in y[i].  For proper operation, the values in x[i] must form a
    strictly increasing sequence.  By default, x[i] is the left-hand edge
    of the i'th bin. If opt=PL_BIN_CENTRED is used, the bin boundaries are
    placed midway between the values in the x vector.  Also see plhist for
    drawing histograms from unbinned data.

    Redacted form: General: plbin(x, y, opt)
            Python: plbin(nbin, x, y, opt)


    This function is not used in any examples.



SYNOPSIS:

plbin(nbin, x, y, opt)

ARGUMENTS:

    nbin (PLINT, input) :    Number of bins (i.e., number of values in x
        and y vectors.)

    x (PLFLT_VECTOR, input) :    A vector containing values associated
        with bins.  These must form a strictly increasing sequence.

    y (PLFLT_VECTOR, input) :    A vector containing a number which is
        proportional to the number of points in each bin.  This is a PLFLT
        (instead of PLINT) vector so as to allow histograms of
        probabilities, etc.

    opt (PLINT, input) :    Is a combination of several flags:
        opt=PL_BIN_DEFAULT: The x represent the lower bin boundaries, the
        outer bins are expanded to fill up the entire x-axis and bins of
        zero height are simply drawn.
            opt=PL_BIN_CENTRED|...: The bin boundaries are to be midway
            between the x values. If the values in x are equally spaced,
            the values are the center values of the bins.
            opt=PL_BIN_NOEXPAND|...: The outer bins are drawn with equal
            size as the ones inside.
            opt=PL_BIN_NOEMPTY|...: Bins with zero height are not drawn
            (there is a gap for such bins).
")
plbin;

%feature( "docstring", "Begin a new page

DESCRIPTION:

    Begins a new page.  For a file driver, the output file is opened if
    necessary.  Advancing the page via pleop and plbop is useful when a
    page break is desired at a particular point when plotting to subpages.
     Another use for pleop and plbop is when plotting pages to different
    files, since you can manually set the file name by calling plsfnam
    after the call to pleop. (In fact some drivers may only support a
    single page per file, making this a necessity.)  One way to handle
    this case automatically is to page advance via pladv, but enable
    familying (see plsfam) with a small limit on the file size so that a
    new family member file will be created on each page break.

    Redacted form: plbop()

    This function is used in examples 2 and 20.



SYNOPSIS:

plbop()
")
plbop;

%feature( "docstring", "Draw a box with axes, etc

DESCRIPTION:

    Draws a box around the currently defined viewport, and labels it with
    world coordinate values appropriate to the window.  Thus plbox should
    only be called after defining both viewport and window.  The ascii
    character strings xopt and yopt specify how the box should be drawn as
    described below.  If ticks and/or subticks are to be drawn for a
    particular axis, the tick intervals and number of subintervals may be
    specified explicitly, or they may be defaulted by setting the
    appropriate arguments to zero.

    Redacted form: General: plbox(xopt, xtick, nxsub, yopt, ytick, nysub)


    This function is used in examples 1, 2, 4, 6, 6-12, 14-18, 21, 23-26,
    and 29.



SYNOPSIS:

plbox(xopt, xtick, nxsub, yopt, ytick, nysub)

ARGUMENTS:

    xopt (PLCHAR_VECTOR, input) :    An ascii character string specifying
        options for the x axis.  The string can include any combination of
        the following letters (upper or lower case) in any order: a: Draws
        axis, X-axis is horizontal line (y=0), and Y-axis is vertical line
        (x=0).
            b: Draws bottom (X) or left (Y) edge of frame.
            c: Draws top (X) or right (Y) edge of frame.
            d: Plot labels as date / time. Values are assumed to be
            seconds since the epoch (as used by gmtime).
            f:  Always use fixed point numeric labels.
            g: Draws a grid at the major tick interval.
            h: Draws a grid at the minor tick interval.
            i: Inverts tick marks, so they are drawn outwards, rather than
            inwards.
            l: Labels axis logarithmically.  This only affects the labels,
            not the data, and so it is necessary to compute the logarithms
            of data points before passing them to any of the drawing
            routines.
            m: Writes numeric labels at major tick intervals in the
            unconventional location (above box for X, right of box for Y).
            n: Writes numeric labels at major tick intervals in the
            conventional location (below box for X, left of box for Y).
            o: Use custom labelling function to generate axis label text.
            The custom labelling function can be defined with the
            plslabelfunc command.
            s: Enables subticks between major ticks, only valid if t is
            also specified.
            t: Draws major ticks.
            u: Exactly like \"b\" except don't draw edge line.
            w: Exactly like \"c\" except don't draw edge line.
            x: Exactly like \"t\" (including the side effect of the
            numerical labels for the major ticks) except exclude drawing
            the major and minor tick marks.


    xtick (PLFLT, input) :    World coordinate interval between major
        ticks on the x axis. If it is set to zero, PLplot automatically
        generates a suitable tick interval.

    nxsub (PLINT, input) :    Number of subintervals between major x axis
        ticks for minor ticks.  If it is set to zero, PLplot automatically
        generates a suitable minor tick interval.

    yopt (PLCHAR_VECTOR, input) :    An ascii character string specifying
        options for the y axis.  The string can include any combination of
        the letters defined above for xopt, and in addition may contain:
        v: Write numeric labels for the y axis parallel to the base of the
        graph, rather than parallel to the axis.


    ytick (PLFLT, input) :    World coordinate interval between major
        ticks on the y axis. If it is set to zero, PLplot automatically
        generates a suitable tick interval.

    nysub (PLINT, input) :    Number of subintervals between major y axis
        ticks for minor ticks.  If it is set to zero, PLplot automatically
        generates a suitable minor tick interval.
")
plbox;

%feature( "docstring", "Draw a box with axes, etc, in 3-d

DESCRIPTION:

    Draws axes, numeric and text labels for a three-dimensional surface
    plot.  For a more complete description of three-dimensional plotting
    see the PLplot documentation.

    Redacted form: General: plbox3(xopt, xlabel, xtick, nxsub, yopt,
    ylabel, ytick, nysub, zopt, zlabel, ztick, nzsub)


    This function is used in examples 8, 11, 18, and 21.



SYNOPSIS:

plbox3(xopt, xlabel, xtick, nxsub, yopt, ylabel, ytick, nysub, zopt, zlabel, ztick, nzsub)

ARGUMENTS:

    xopt (PLCHAR_VECTOR, input) :    An ascii character string specifying
        options for the x axis.  The string can include any combination of
        the following letters (upper or lower case) in any order: b: Draws
        axis at base, at height z=
    zmin where zmin is defined by call to plw3d.  This character must be
        specified in order to use any of the other options.
            d: Plot labels as date / time. Values are assumed to be
            seconds since the epoch (as used by gmtime).
            f: Always use fixed point numeric labels.
            i: Inverts tick marks, so they are drawn downwards, rather
            than upwards.
            l: Labels axis logarithmically.  This only affects the labels,
            not the data, and so it is necessary to compute the logarithms
            of data points before passing them to any of the drawing
            routines.
            n: Writes numeric labels at major tick intervals.
            o: Use custom labelling function to generate axis label text.
            The custom labelling function can be defined with the
            plslabelfunc command.
            s: Enables subticks between major ticks, only valid if t is
            also specified.
            t: Draws major ticks.
            u: If this is specified, the text label for the axis is
            written under the axis.


    xlabel (PLCHAR_VECTOR, input) :    A UTF-8 character string specifying
        the text label for the x axis.  It is only drawn if u is in the
        xopt string.

    xtick (PLFLT, input) :    World coordinate interval between major
        ticks on the x axis. If it is set to zero, PLplot automatically
        generates a suitable tick interval.

    nxsub (PLINT, input) :    Number of subintervals between major x axis
        ticks for minor ticks.  If it is set to zero, PLplot automatically
        generates a suitable minor tick interval.

    yopt (PLCHAR_VECTOR, input) :    An ascii character string specifying
        options for the y axis. The string is interpreted in the same way
        as xopt.

    ylabel (PLCHAR_VECTOR, input) :    A UTF-8 character string specifying
        the text label for the y axis.  It is only drawn if u is in the
        yopt string.

    ytick (PLFLT, input) :    World coordinate interval between major
        ticks on the y axis. If it is set to zero, PLplot automatically
        generates a suitable tick interval.

    nysub (PLINT, input) :    Number of subintervals between major y axis
        ticks for minor ticks.  If it is set to zero, PLplot automatically
        generates a suitable minor tick interval.

    zopt (PLCHAR_VECTOR, input) :    An ascii character string specifying
        options for the z axis. The string can include any combination of
        the following letters (upper or lower case) in any order: b: Draws
        z axis to the left of the surface plot.
            c: Draws z axis to the right of the surface plot.
            d: Draws grid lines parallel to the x-y plane behind the
            figure.  These lines are not drawn until after plot3d or
            plmesh are called because of the need for hidden line removal.
            e: Plot labels as date / time. Values are assumed to be
            seconds since the epoch (as used by gmtime).  Note this
            suboption is interpreted the same as the d suboption for xopt
            and yopt, but it has to be identified as e for zopt since d
            has already been used for the different purpose above.
            f: Always use fixed point numeric labels.
            i: Inverts tick marks, so they are drawn away from the center.
            l: Labels axis logarithmically.  This only affects the labels,
            not the data, and so it is necessary to compute the logarithms
            of data points before passing them to any of the drawing
            routines.
            m: Writes numeric labels at major tick intervals on the
            right-hand z axis.
            n: Writes numeric labels at major tick intervals on the
            left-hand z axis.
            o: Use custom labelling function to generate axis label text.
            The custom labelling function can be defined with the
            plslabelfunc command.
            s: Enables subticks between major ticks, only valid if t is
            also specified.
            t: Draws major ticks.
            u: If this is specified, the text label is written beside the
            left-hand axis.
            v: If this is specified, the text label is written beside the
            right-hand axis.


    zlabel (PLCHAR_VECTOR, input) :    A UTF-8 character string specifying
        the text label for the z axis.  It is only drawn if u or v are in
        the zopt string.

    ztick (PLFLT, input) :    World coordinate interval between major
        ticks on the z axis. If it is set to zero, PLplot automatically
        generates a suitable tick interval.

    nzsub (PLINT, input) :    Number of subintervals between major z axis
        ticks for minor ticks.  If it is set to zero, PLplot automatically
        generates a suitable minor tick interval.
")
plbox3;

%feature( "docstring", "Calculate broken-down time from continuous time for the current stream

DESCRIPTION:

    Calculate broken-down time; year, month, day, hour, min, sec; from
    continuous time, ctime for the current stream.  This function is the
    inverse of plctime.

    The PLplot definition of broken-down time is a calendar time that
    completely ignores all time zone offsets, i.e., it is the user's
    responsibility to apply those offsets (if so desired) before using the
    PLplot time API.  By default broken-down time is defined using the
    proleptic Gregorian calendar without the insertion of leap seconds and
    continuous time is defined as the number of seconds since the Unix
    epoch of 1970-01-01T00:00:00Z. However, other definitions of
    broken-down and continuous time are possible, see plconfigtime.

    Redacted form: General: plbtime(year, month, day, hour, min, sec,
    ctime)


    This function is used in example 29.



SYNOPSIS:

plbtime(year, month, day, hour, min, sec, ctime)

ARGUMENTS:

    year (PLINT_NC_SCALAR, output) :    Returned value of years with
        positive values corresponding to CE (i.e., 1 = 1 CE, etc.) and
        non-negative values corresponding to BCE (e.g., 0 = 1 BCE, -1 = 2
        BCE, etc.)

    month (PLINT_NC_SCALAR, output) :    Returned value of month within
        the year in the range from 0 (January) to 11 (December).

    day (PLINT_NC_SCALAR, output) :    Returned value of day within the
        month in the range from 1 to 31.

    hour (PLINT_NC_SCALAR, output) :    Returned value of hour within the
        day in the range from 0 to 23.

    min (PLINT_NC_SCALAR, output) :    Returned value of minute within the
        hour in the range from 0 to 59

    sec (PLFLT_NC_SCALAR, output) :    Returned value of second within the
        minute in range from 0. to 60.

    ctime (PLFLT, input) :    Continuous time from which the broken-down
        time is calculated.
")
plbtime;

%feature( "docstring", "Calculate world coordinates and corresponding window index from relative device coordinates

DESCRIPTION:

    Calculate world coordinates, wx and wy, and corresponding window index
    from relative device coordinates, rx and ry.

    Redacted form: General: plcalc_world(rx, ry, wx, wy, window)


    This function is used in example 31.



SYNOPSIS:

plcalc_world(rx, ry, wx, wy, window)

ARGUMENTS:

    rx (PLFLT, input) :    Input relative device coordinate (0.0-1.0) for
        the x coordinate.

    ry (PLFLT, input) :    Input relative device coordinate (0.0-1.0) for
        the y coordinate.

    wx (PLFLT_NC_SCALAR, output) :    Returned value of the x world
        coordinate corresponding to the relative device coordinates rx and
        ry.

    wy (PLFLT_NC_SCALAR, output) :    Returned value of the y world
        coordinate corresponding to the relative device coordinates rx and
        ry.

    window (PLINT_NC_SCALAR, output) :    Returned value of the last
        defined window index that corresponds to the input relative device
        coordinates (and the returned world coordinates).  To give some
        background on the window index, for each page the initial window
        index is set to zero, and each time plwind is called within the
        page, world and device coordinates are stored for the window and
        the window index is incremented.  Thus, for a simple page layout
        with non-overlapping viewports and one window per viewport, window
        corresponds to the viewport index (in the order which the
        viewport/windows were created) of the only viewport/window
        corresponding to rx and ry.  However, for more complicated layouts
        with potentially overlapping viewports and possibly more than one
        window (set of world coordinates) per viewport, window and the
        corresponding output world coordinates corresponds to the last
        window created that fulfills the criterion that the relative
        device coordinates are inside it.  Finally, in all cases where the
        input relative device coordinates are not inside any
        viewport/window, then the returned value of the last defined
        window index is set to -1.
")
plcalc_world;

%feature( "docstring", "Clear current (sub)page

DESCRIPTION:

    Clears the current page, effectively erasing everything that have been
    drawn.  This command only works with interactive drivers; if the
    driver does not support this, the page is filled with the background
    color in use. If the current page is divided into subpages, only the
    current subpage is erased.  The nth subpage can be selected with
    pladv(n).

    Redacted form: General: plclear()


    This function is not used in any examples.



SYNOPSIS:

plclear()
")
plclear;

%feature( "docstring", "Set color, cmap0

DESCRIPTION:

    Sets the color index for cmap0 (see the PLplot documentation).

    Redacted form: plcol0(icol0)

    This function is used in examples 1-9, 11-16, 18-27, and 29.



SYNOPSIS:

plcol0(icol0)

ARGUMENTS:

    icol0 (PLINT, input) :    Integer representing the color.  The
        defaults at present are (these may change):
    0      black (default background)
    1      red (default foreground)
    2      yellow
    3      green
    4      aquamarine
    5      pink
    6      wheat
    7      grey
    8      brown
    9      blue
    10      BlueViolet
    11      cyan
    12      turquoise
    13      magenta
    14      salmon
    15      white

      Use plscmap0 to change the entire cmap0 color palette and plscol0 to
         change an individual color in the cmap0 color palette.
")
plcol0;

%feature( "docstring", "Set color, cmap1

DESCRIPTION:

    Sets the color for cmap1 (see the PLplot documentation).

    Redacted form: plcol1(col1)

    This function is used in examples 12 and 21.



SYNOPSIS:

plcol1(col1)

ARGUMENTS:

    col1 (PLFLT, input) :    This value must be in the range (0.0-1.0) and
        is mapped to color using the continuous cmap1 palette which by
        default ranges from blue to the background color to red.  The
        cmap1 palette can also be straightforwardly changed by the user
        with plscmap1 or plscmap1l.
")
plcol1;

%feature( "docstring", "Plot color bar for image, shade or gradient plots

DESCRIPTION:

    Routine for creating a continuous color bar for image, shade, or
    gradient plots. (See pllegend for similar functionality for creating
    legends with discrete elements). The arguments of plcolorbar provide
    control over the location and size of the color bar as well as the
    location and characteristics of the elements (most of which are
    optional) within that color bar.  The resulting color bar is clipped
    at the boundaries of the current subpage. (N.B. the adopted coordinate
    system used for some of the parameters is defined in the documentation
    of the position parameter.)

    Redacted form: plcolorbar(p_colorbar_width, p_colorbar_height, opt,
    position, x, y, x_length, y_length, bg_color, bb_color, bb_style,
    low_cap_color, high_cap_color, cont_color, cont_width, label_opts,
    labels, axis_opts, ticks, sub_ticks, values)

    This function is used in examples 16 and 33.



SYNOPSIS:

plcolorbar(p_colorbar_width, p_colorbar_height, opt, position, x, y, x_length, y_length, bg_color, bb_color, bb_style, low_cap_color, high_cap_color, cont_color, cont_width, n_labels, label_opts, labels, naxes, axis_opts, ticks, sub_ticks, n_values, values)

ARGUMENTS:

    p_colorbar_width (PLFLT_NC_SCALAR, output) :    Returned value of the
        labelled and decorated color bar width in adopted coordinates.

    p_colorbar_height (PLFLT_NC_SCALAR, output) :    Returned value of the
        labelled and decorated color bar height in adopted coordinates.

    opt (PLINT, input) :    opt contains bits controlling the overall
        color bar.  The orientation (direction of the maximum value) of
        the color bar is specified with PL_ORIENT_RIGHT, PL_ORIENT_TOP,
        PL_ORIENT_LEFT, or PL_ORIENT_BOTTOM.  If none of these bits are
        specified, the default orientation is toward the top if the
        colorbar is placed on the left or right of the viewport or toward
        the right if the colorbar is placed on the top or bottom of the
        viewport. If the PL_COLORBAR_BACKGROUND bit is set, plot a
        (semitransparent) background for the color bar. If the
        PL_COLORBAR_BOUNDING_BOX bit is set, plot a bounding box for the
        color bar. The type of color bar must be specified with one of
        PL_COLORBAR_IMAGE, PL_COLORBAR_SHADE, or PL_COLORBAR_GRADIENT. If
        more than one of those bits is set only the first one in the above
        list is honored. The position of the (optional) label/title can be
        specified with PL_LABEL_RIGHT, PL_LABEL_TOP, PL_LABEL_LEFT, or
        PL_LABEL_BOTTOM.  If no label position bit is set then no label
        will be drawn. If more than one of this list of bits is specified,
        only the first one on the list is honored. End-caps for the color
        bar can added with PL_COLORBAR_CAP_LOW and PL_COLORBAR_CAP_HIGH.
        If a particular color bar cap option is not specified then no cap
        will be drawn for that end. As a special case for
        PL_COLORBAR_SHADE, the option PL_COLORBAR_SHADE_LABEL can be
        specified. If this option is provided then any tick marks and tick
        labels will be placed at the breaks between shaded segments. TODO:
        This should be expanded to support custom placement of tick marks
        and tick labels at custom value locations for any color bar type.

    position (PLINT, input) :    position contains bits which control the
        overall position of the color bar and the definition of the
        adopted coordinates used for positions just like what is done for
        the position argument for pllegend. However, note that the
        defaults for the position bits (see below) are different than the
        pllegend case. The combination of the PL_POSITION_LEFT,
        PL_POSITION_RIGHT, PL_POSITION_TOP, PL_POSITION_BOTTOM,
        PL_POSITION_INSIDE, and PL_POSITION_OUTSIDE bits specifies one of
        the 16 possible standard positions (the 4 corners and centers of
        the 4 sides for both the inside and outside cases) of the color
        bar relative to the adopted coordinate system. The corner
        positions are specified by the appropriate combination of two of
        the PL_POSITION_LEFT, PL_POSITION_RIGHT, PL_POSITION_TOP, and
        PL_POSITION_BOTTOM bits while the sides are specified by a single
        value of one of those bits.  The adopted coordinates are
        normalized viewport coordinates if the PL_POSITION_VIEWPORT bit is
        set or normalized subpage coordinates if the PL_POSITION_SUBPAGE
        bit is set. Default position bits: If none of PL_POSITION_LEFT,
        PL_POSITION_RIGHT, PL_POSITION_TOP, or PL_POSITION_BOTTOM are set,
        then use PL_POSITION_RIGHT. If neither of PL_POSITION_INSIDE or
        PL_POSITION_OUTSIDE is set, use PL_POSITION_OUTSIDE. If neither of
        PL_POSITION_VIEWPORT or PL_POSITION_SUBPAGE is set, use
        PL_POSITION_VIEWPORT.

    x (PLFLT, input) :    X offset of the color bar position in adopted
        coordinates from the specified standard position of the color bar.
        For positive x, the direction of motion away from the standard
        position is inward/outward from the standard corner positions or
        standard left or right positions if the
        PL_POSITION_INSIDE/PL_POSITION_OUTSIDE bit is set in position.
        For the standard top or bottom positions, the direction of motion
        is toward positive X.

    y (PLFLT, input) :    Y offset of the color bar position in adopted
        coordinates from the specified standard position of the color bar.
        For positive y, the direction of motion away from the standard
        position is inward/outward from the standard corner positions or
        standard top or bottom positions if the
        PL_POSITION_INSIDE/PL_POSITION_OUTSIDE bit is set in position.
        For the standard left or right positions, the direction of motion
        is toward positive Y.

    x_length (PLFLT, input) :    Length of the body of the color bar in
        the X direction in adopted coordinates.

    y_length (PLFLT, input) :    Length of the body of the color bar in
        the Y direction in adopted coordinates.

    bg_color (PLINT, input) :    The cmap0 color of the background for the
        color bar (PL_COLORBAR_BACKGROUND).

    bb_color (PLINT, input) :    The cmap0 color of the bounding-box line
        for the color bar (PL_COLORBAR_BOUNDING_BOX).

    bb_style (PLINT, input) :    The pllsty style number for the
        bounding-box line for the color bar (PL_COLORBAR_BACKGROUND).

    low_cap_color (PLFLT, input) :    The cmap1 color of the low-end color
        bar cap, if it is drawn (PL_COLORBAR_CAP_LOW).

    high_cap_color (PLFLT, input) :    The cmap1 color of the high-end
        color bar cap, if it is drawn (PL_COLORBAR_CAP_HIGH).

    cont_color (PLINT, input) :    The cmap0 contour color for
        PL_COLORBAR_SHADE plots. This is passed directly to plshades, so
        it will be interpreted according to the design of plshades.

    cont_width (PLFLT, input) :    Contour width for PL_COLORBAR_SHADE
        plots. This is passed directly to plshades, so it will be
        interpreted according to the design of plshades.

    n_labels (PLINT, input) :    Number of labels to place around the
        color bar.

    label_opts (PLINT_VECTOR, input) :    A vector of options for each of
    n_labels labels.

    labels (PLCHAR_MATRIX, input) :    A vector of
    n_labels UTF-8 character strings containing the labels for the color
        bar.  Ignored if no label position is specified with one of the
        PL_COLORBAR_LABEL_RIGHT, PL_COLORBAR_LABEL_TOP,
        PL_COLORBAR_LABEL_LEFT, or PL_COLORBAR_LABEL_BOTTOM bits in the
        corresponding label_opts field.

    n_axes (PLINT, input) :    Number of axis definitions provided. This
        value must be greater than 0. It is typically 1 (numerical axis
        labels are provided for one of the long edges of the color bar),
        but it can be larger if multiple numerical axis labels for the
        long edges of the color bar are desired.

    axis_opts (PLCHAR_MATRIX, input) :    A vector of
    n_axes ascii character strings containing options (interpreted as for
        plbox) for the color bar's axis definitions.

    ticks (PLFLT_VECTOR, input) :    A vector of n_axes values of the
        spacing of the major tick marks (interpreted as for plbox) for the
        color bar's axis definitions.

    sub_ticks (PLINT_VECTOR, input) :    A vector of n_axes values of the
        number of subticks (interpreted as for plbox) for the color bar's
        axis definitions.

    n_values (PLINT_VECTOR, input) :    A vector containing the number of
        elements in each of the n_axes rows of the values matrix.

    values (PLFLT_MATRIX, input) :    A matrix containing the numeric
        values for the data range represented by the color bar. For a row
        index of i_axis (where 0 < i_axis < n_axes), the number of
        elements in the row is specified by n_values[i_axis]. For
        PL_COLORBAR_IMAGE and PL_COLORBAR_GRADIENT the number of elements
        is 2, and the corresponding row elements of the values matrix are
        the minimum and maximum value represented by the colorbar.  For
        PL_COLORBAR_SHADE, the number and values of the elements of a row
        of the values matrix is interpreted the same as the nlevel and
        clevel arguments of plshades.
")
#ifdef SWIG_OCTAVE
my_plcolorbar;
#else
plcolorbar;
#endif

%feature( "docstring", "Configure the transformation between continuous and broken-down time for the current stream

DESCRIPTION:

    Configure the transformation between continuous and broken-down time
    for the current stream.  This transformation is used by both plbtime
    and plctime.

    Redacted form: General: plconfigtime(scale, offset1, offset2,
    ccontrol, ifbtime_offset, year, month, day, hour, min, sec)


    This function is used in example 29.



SYNOPSIS:

plconfigtime(scale, offset1, offset2, ccontrol, ifbtime_offset, year, month, day, hour, min, sec)

ARGUMENTS:

    scale (PLFLT, input) :    The number of days per continuous time unit.
         As a special case, if
    scale is 0., then all other arguments are ignored, and the result (the
        default used by PLplot) is the equivalent of a call to
        plconfigtime(1./86400., 0., 0., 0x0, 1, 1970, 0, 1, 0, 0, 0.).
        That is, for this special case broken-down time is calculated with
        the proleptic Gregorian calendar with no leap seconds inserted,
        and the continuous time is defined as the number of seconds since
        the Unix epoch of 1970-01-01T00:00:00Z.

    offset1 (PLFLT, input) :    If
    ifbtime_offset is true, the parameters
    offset1 and
    offset2 are completely ignored. Otherwise, the sum of these parameters
        (with units in days) specify the epoch of the continuous time
        relative to the MJD epoch corresponding to the Gregorian calendar
        date of 1858-11-17T00:00:00Z or JD = 2400000.5.  Two PLFLT numbers
        are used to specify the origin to allow users (by specifying
    offset1 as an integer that can be exactly represented by a
        floating-point variable and specifying
    offset2 as a number in the range from 0. to 1) the chance to minimize
        the numerical errors of the continuous time representation.

    offset2 (PLFLT, input) :    See documentation of
    offset1.

    ccontrol (PLINT, input) :    ccontrol contains bits controlling the
        transformation.  If the 0x1 bit is set, then the proleptic Julian
        calendar is used for broken-down time rather than the proleptic
        Gregorian calendar.  If the 0x2 bit is set, then leap seconds that
        have been historically used to define UTC are inserted into the
        broken-down time. Other possibilities for additional control bits
        for ccontrol exist such as making the historical time corrections
        in the broken-down time corresponding to ET (ephemeris time) or
        making the (slightly non-constant) corrections from international
        atomic time (TAI) to what astronomers define as terrestrial time
        (TT).  But those additional possibilities have not been
        implemented yet in the qsastime library (one of the PLplot utility
        libraries).

    ifbtime_offset (PLBOOL, input) :    ifbtime_offset controls how the
        epoch of the continuous time scale is specified by the user. If
    ifbtime_offset is false, then
    offset1 and
    offset2 are used to specify the epoch, and the following broken-down
        time parameters are completely ignored.  If
    ifbtime_offset is true, then
    offset1 and
    offset2 are completely ignored, and the following broken-down time
        parameters are used to specify the epoch.

    year (PLINT, input) :    Year of epoch.

    month (PLINT, input) :    Month of epoch in range from 0 (January) to
        11 (December).

    day (PLINT, input) :    Day of epoch in range from 1 to 31.

    hour (PLINT, input) :    Hour of epoch in range from 0 to 23

    min (PLINT, input) :    Minute of epoch in range from 0 to 59.

    sec (PLFLT, input) :    Second of epoch in range from 0. to 60.
")
plconfigtime;

%feature( "docstring", "Contour plot

DESCRIPTION:

    Draws a contour plot of the data in f[
    nx][
    ny], using the nlevel contour levels specified by clevel. Only the
    region of the matrix from kx to lx and from ky to ly is plotted out
    where all these index ranges are interpreted as one-based for
    historical reasons.  A transformation routine pointed to by pltr with
    a generic pointer pltr_data for additional data required by the
    transformation routine is used to map indices within the matrix to the
    world coordinates.

    Redacted form: plcont(f, kx, lx, ky, ly, clevel, pltr, pltr_data)
    where (see above discussion) the pltr, pltr_data callback arguments
    are sometimes replaced by a tr vector with 6 elements; xg and yg
    vectors; or xg and yg matrices.

    This function is used in examples 9, 14, 16, and 22.



SYNOPSIS:

plcont(f, nx, ny, kx, lx, ky, ly, clevel, nlevel, pltr, pltr_data)

ARGUMENTS:

    f (PLFLT_MATRIX, input) :    A matrix containing data to be contoured.

    nx, ny (PLINT, input) :    The dimensions of the matrix f.

    kx, lx (PLINT, input) :    Range of x indices to consider where 0 <=
        kx-1 < lx-1 < nx.  Values of kx and lx are one-based rather than
        zero-based for historical backwards-compatibility reasons.

    ky, ly (PLINT, input) :    Range of y indices to consider where 0 <=
        ky-1 < ly-1 < ny.  Values of ky and ly are one-based rather than
        zero-based for historical backwards-compatibility reasons.

    clevel (PLFLT_VECTOR, input) :    A vector specifying the levels at
        which to draw contours.

    nlevel (PLINT, input) :    Number of contour levels to draw.

    pltr (PLTRANSFORM_callback, input) :    A callback function that
        defines the transformation between the zero-based indices of the
        matrix f and the world coordinates.For the C case, transformation
        functions are provided in the PLplot library: pltr0 for the
        identity mapping, and pltr1 and pltr2 for arbitrary mappings
        respectively defined by vectors and matrices.  In addition, C
        callback routines for the transformation can be supplied by the
        user such as the mypltr function in examples/c/x09c.c which
        provides a general linear transformation between index coordinates
        and world coordinates.For languages other than C you should
        consult the PLplot documentation for the details concerning how
        PLTRANSFORM_callback arguments are interfaced. However, in
        general, a particular pattern of callback-associated arguments
        such as a tr vector with 6 elements; xg and yg vectors; or xg and
        yg matrices are respectively interfaced to a linear-transformation
        routine similar to the above mypltr function; pltr1; and pltr2.
        Furthermore, some of our more sophisticated bindings (see, e.g.,
        the PLplot documentation) support native language callbacks for
        handling index to world-coordinate transformations.  Examples of
        these various approaches are given in examples/<language>x09*,
        examples/<language>x16*, examples/<language>x20*,
        examples/<language>x21*, and examples/<language>x22*, for all our
        supported languages.

    pltr_data (PLPointer, input) :    Extra parameter to help pass
        information to pltr0, pltr1, pltr2, or whatever callback routine
        that is externally supplied.
")
#ifdef SWIG_OCTAVE
my_plcont;
#else
plcont;
#endif

%feature( "docstring", "Copy state parameters from the reference stream to the current stream

DESCRIPTION:

    Copies state parameters from the reference stream to the current
    stream. Tell driver interface to map device coordinates unless flags
    == 1.

    This function is used for making save files of selected plots (e.g.
    from the TK driver).  After initializing, you can get a copy of the
    current plot to the specified device by switching to this stream and
    issuing a plcpstrm and a plreplot, with calls to plbop and pleop as
    appropriate.  The plot buffer must have previously been enabled (done
    automatically by some display drivers, such as X).

    Redacted form: plcpstrm(iplsr, flags)

    This function is used in example 1,20.



SYNOPSIS:

plcpstrm(iplsr, flags)

ARGUMENTS:

    iplsr (PLINT, input) :    Number of reference stream.

    flags (PLBOOL, input) :    If flags is set to true the device
        coordinates are not copied from the reference to current stream.
")
plcpstrm;

%feature( "docstring", "Calculate continuous time from broken-down time for the current stream

DESCRIPTION:

    Calculate continuous time, ctime, from broken-down time for the
    current stream.  The broken-down
    time is specified by the following parameters: year, month, day, hour,
    min, and sec. This function is the inverse of plbtime.

    The PLplot definition of broken-down time is a calendar time that
    completely ignores all time zone offsets, i.e., it is the user's
    responsibility to apply those offsets (if so desired) before using the
    PLplot time API.  By default broken-down time is defined using the
    proleptic Gregorian calendar without the insertion of leap seconds and
    continuous time is defined as the number of seconds since the Unix
    epoch of 1970-01-01T00:00:00Z. However, other definitions of
    broken-down and continuous time are possible, see plconfigtime which
    specifies that transformation for the current stream.

    Redacted form: General: plctime(year, month, day, hour, min, sec,
    ctime)


    This function is used in example 29.



SYNOPSIS:

plctime(year, month, day, hour, min, sec, ctime)

ARGUMENTS:

    year (PLINT, input) :    Input year.

    month (PLINT, input) :    Input month in range from 0 (January) to 11
        (December).

    day (PLINT, input) :    Input day in range from 1 to 31.

    hour (PLINT, input) :    Input hour in range from 0 to 23

    min (PLINT, input) :    Input minute in range from 0 to 59.

    sec (PLFLT, input) :    Input second in range from 0. to 60.

    ctime (PLFLT_NC_SCALAR, output) :    Returned value of the continuous
        time calculated from the broken-down time specified by the
        previous parameters.
")
plctime;

%feature( "docstring", "End plotting session

DESCRIPTION:

    Ends a plotting session, tidies up all the output files, switches
    interactive devices back into text mode and frees up any memory that
    was allocated.  Must be called before end of program.

    By default, PLplot's interactive devices (Xwin, TK, etc.) go into a
    wait state after a call to plend or other functions which trigger the
    end of a plot page. To avoid this, use the plspause function.

    Redacted form: plend()

    This function is used in all of the examples.



SYNOPSIS:

plend()
")
plend;

%feature( "docstring", "End plotting session for current stream

DESCRIPTION:

    Ends a plotting session for the current output stream only.  See
    plsstrm for more info.

    Redacted form: plend1()

    This function is used in examples 1 and 20.



SYNOPSIS:

plend1()
")
plend1;

%feature( "docstring", "Same as plenv but if in multiplot mode does not advance the subpage, instead clears it

DESCRIPTION:

    Sets up plotter environment for simple graphs by calling pladv and
    setting up viewport and window to sensible default values. plenv0
    leaves a standard margin (left-hand margin of eight character heights,
    and a margin around the other three sides of five character heights)
    around most graphs for axis labels and a title.  When these defaults
    are not suitable, use the individual routines plvpas, plvpor, or
    plvasp for setting up the viewport, plwind for defining the window,
    and plbox for drawing the box.

    Redacted form: plenv0(xmin, xmax, ymin, ymax, just, axis)

    This function is used in example 21.



SYNOPSIS:

plenv0(xmin, xmax, ymin, ymax, just, axis)

ARGUMENTS:

    xmin (PLFLT, input) :    Value of x at left-hand edge of window (in
        world coordinates).

    xmax (PLFLT, input) :    Value of x at right-hand edge of window (in
        world coordinates).

    ymin (PLFLT, input) :    Value of y at bottom edge of window (in world
        coordinates).

    ymax (PLFLT, input) :    Value of y at top edge of window (in world
        coordinates).

    just (PLINT, input) :    Controls how the axes will be scaled: -1: the
        scales will not be set, the user must set up the scale before
        calling plenv0 using plsvpa, plvasp or other.
            0: the x and y axes are scaled independently to use as much of
            the screen as possible.
            1: the scales of the x and y axes are made equal.
            2: the axis of the x and y axes are made equal, and the plot
            box will be square.


    axis (PLINT, input) :    Controls drawing of the box around the plot:
        -2: draw no box, no tick marks, no numeric tick labels, no axes.
            -1: draw box only.
            0: draw box, ticks, and numeric tick labels.
            1: also draw coordinate axes at x=0 and y=0.
            2: also draw a grid at major tick positions in both
            coordinates.
            3: also draw a grid at minor tick positions in both
            coordinates.
            10: same as 0 except logarithmic x tick marks. (The x data
            have to be converted to logarithms separately.)
            11: same as 1 except logarithmic x tick marks. (The x data
            have to be converted to logarithms separately.)
            12: same as 2 except logarithmic x tick marks. (The x data
            have to be converted to logarithms separately.)
            13: same as 3 except logarithmic x tick marks. (The x data
            have to be converted to logarithms separately.)
            20: same as 0 except logarithmic y tick marks. (The y data
            have to be converted to logarithms separately.)
            21: same as 1 except logarithmic y tick marks. (The y data
            have to be converted to logarithms separately.)
            22: same as 2 except logarithmic y tick marks. (The y data
            have to be converted to logarithms separately.)
            23: same as 3 except logarithmic y tick marks. (The y data
            have to be converted to logarithms separately.)
            30: same as 0 except logarithmic x and y tick marks. (The x
            and y data have to be converted to logarithms separately.)
            31: same as 1 except logarithmic x and y tick marks. (The x
            and y data have to be converted to logarithms separately.)
            32: same as 2 except logarithmic x and y tick marks. (The x
            and y data have to be converted to logarithms separately.)
            33: same as 3 except logarithmic x and y tick marks. (The x
            and y data have to be converted to logarithms separately.)
            40: same as 0 except date / time x labels.
            41: same as 1 except date / time x labels.
            42: same as 2 except date / time x labels.
            43: same as 3 except date / time x labels.
            50: same as 0 except date / time y labels.
            51: same as 1 except date / time y labels.
            52: same as 2 except date / time y labels.
            53: same as 3 except date / time y labels.
            60: same as 0 except date / time x and y labels.
            61: same as 1 except date / time x and y labels.
            62: same as 2 except date / time x and y labels.
            63: same as 3 except date / time x and y labels.
            70: same as 0 except custom x and y labels.
            71: same as 1 except custom x and y labels.
            72: same as 2 except custom x and y labels.
            73: same as 3 except custom x and y labels.
")
plenv0;

%feature( "docstring", "Set up standard window and draw box

DESCRIPTION:

    Sets up plotter environment for simple graphs by calling pladv and
    setting up viewport and window to sensible default values. plenv
    leaves a standard margin (left-hand margin of eight character heights,
    and a margin around the other three sides of five character heights)
    around most graphs for axis labels and a title.  When these defaults
    are not suitable, use the individual routines plvpas, plvpor, or
    plvasp for setting up the viewport, plwind for defining the window,
    and plbox for drawing the box.

    Redacted form: plenv(xmin, xmax, ymin, ymax, just, axis)

    This function is used in example 1,3,9,13,14,19-22,29.



SYNOPSIS:

plenv(xmin, xmax, ymin, ymax, just, axis)

ARGUMENTS:

    xmin (PLFLT, input) :    Value of x at left-hand edge of window (in
        world coordinates).

    xmax (PLFLT, input) :    Value of x at right-hand edge of window (in
        world coordinates).

    ymin (PLFLT, input) :    Value of y at bottom edge of window (in world
        coordinates).

    ymax (PLFLT, input) :    Value of y at top edge of window (in world
        coordinates).

    just (PLINT, input) :    Controls how the axes will be scaled: -1: the
        scales will not be set, the user must set up the scale before
        calling plenv using plsvpa, plvasp or other.
            0: the x and y axes are scaled independently to use as much of
            the screen as possible.
            1: the scales of the x and y axes are made equal.
            2: the axis of the x and y axes are made equal, and the plot
            box will be square.


    axis (PLINT, input) :    Controls drawing of the box around the plot:
        -2: draw no box, no tick marks, no numeric tick labels, no axes.
            -1: draw box only.
            0: draw box, ticks, and numeric tick labels.
            1: also draw coordinate axes at x=0 and y=0.
            2: also draw a grid at major tick positions in both
            coordinates.
            3: also draw a grid at minor tick positions in both
            coordinates.
            10: same as 0 except logarithmic x tick marks. (The x data
            have to be converted to logarithms separately.)
            11: same as 1 except logarithmic x tick marks. (The x data
            have to be converted to logarithms separately.)
            12: same as 2 except logarithmic x tick marks. (The x data
            have to be converted to logarithms separately.)
            13: same as 3 except logarithmic x tick marks. (The x data
            have to be converted to logarithms separately.)
            20: same as 0 except logarithmic y tick marks. (The y data
            have to be converted to logarithms separately.)
            21: same as 1 except logarithmic y tick marks. (The y data
            have to be converted to logarithms separately.)
            22: same as 2 except logarithmic y tick marks. (The y data
            have to be converted to logarithms separately.)
            23: same as 3 except logarithmic y tick marks. (The y data
            have to be converted to logarithms separately.)
            30: same as 0 except logarithmic x and y tick marks. (The x
            and y data have to be converted to logarithms separately.)
            31: same as 1 except logarithmic x and y tick marks. (The x
            and y data have to be converted to logarithms separately.)
            32: same as 2 except logarithmic x and y tick marks. (The x
            and y data have to be converted to logarithms separately.)
            33: same as 3 except logarithmic x and y tick marks. (The x
            and y data have to be converted to logarithms separately.)
            40: same as 0 except date / time x labels.
            41: same as 1 except date / time x labels.
            42: same as 2 except date / time x labels.
            43: same as 3 except date / time x labels.
            50: same as 0 except date / time y labels.
            51: same as 1 except date / time y labels.
            52: same as 2 except date / time y labels.
            53: same as 3 except date / time y labels.
            60: same as 0 except date / time x and y labels.
            61: same as 1 except date / time x and y labels.
            62: same as 2 except date / time x and y labels.
            63: same as 3 except date / time x and y labels.
            70: same as 0 except custom x and y labels.
            71: same as 1 except custom x and y labels.
            72: same as 2 except custom x and y labels.
            73: same as 3 except custom x and y labels.
")
plenv;

%feature( "docstring", "Eject current page

DESCRIPTION:

    Clears the graphics screen of an interactive device, or ejects a page
    on a plotter.  See plbop for more information.

    Redacted form: pleop()

    This function is used in example 2,14.



SYNOPSIS:

pleop()
")
pleop;

%feature( "docstring", "Draw error bars in x direction

DESCRIPTION:

    Draws a set of n error bars in x direction, the i'th error bar
    extending from xmin[i] to xmax[i] at y coordinate y[i].  The terminals
    of the error bars are of length equal to the minor tick length
    (settable using plsmin).

    Redacted form: General: plerrx(xmin, ymax, y)


    This function is used in example 29.



SYNOPSIS:

plerrx(n, xmin, xmax, y)

ARGUMENTS:

    n (PLINT, input) :    Number of error bars to draw.

    xmin (PLFLT_VECTOR, input) :    A vector containing the x coordinates
        of the left-hand endpoints of the error bars.

    xmax (PLFLT_VECTOR, input) :    A vector containing the x coordinates
        of the right-hand endpoints of the error bars.

    y (PLFLT_VECTOR, input) :    A vector containing the y coordinates of
        the error bars.
")
plerrx;

%feature( "docstring", "Draw error bars in the y direction

DESCRIPTION:

    Draws a set of n error bars in the y direction, the i'th error bar
    extending from ymin[i] to ymax[i] at x coordinate x[i].  The terminals
    of the error bars are of length equal to the minor tick length
    (settable using plsmin).

    Redacted form: General: plerry(x, ymin, ymax)


    This function is used in example 29.



SYNOPSIS:

plerry(n, x, ymin, ymax)

ARGUMENTS:

    n (PLINT, input) :    Number of error bars to draw.

    x (PLFLT_VECTOR, input) :    A vector containing the x coordinates of
        the error bars.

    ymin (PLFLT_VECTOR, input) :    A vector containing the y coordinates
        of the lower endpoints of the error bars.

    ymax (PLFLT_VECTOR, input) :    A vector containing the y coordinates
        of the upper endpoints of the error bars.
")
plerry;

%feature( "docstring", "Advance to the next family file on the next new page

DESCRIPTION:

    Advance to the next family file on the next new page.

    Redacted form: plfamadv()

    This function is not used in any examples.



SYNOPSIS:

plfamadv()
")
plfamadv;

%feature( "docstring", "Draw filled polygon

DESCRIPTION:

    Fills the polygon defined by the n points (
    x[i],
    y[i]) using the pattern defined by plpsty or plpat.  The default fill
    style is a solid fill. The routine will automatically close the
    polygon between the last and first vertices.  If multiple closed
    polygons are passed in x and y then plfill will fill in between them.

    Redacted form: plfill(x,y)

    This function is used in examples 12, 13, 15, 16, 21, 24, and 25.



SYNOPSIS:

plfill(n, x, y)

ARGUMENTS:

    n (PLINT, input) :    Number of vertices in polygon.

    x (PLFLT_VECTOR, input) :    A vector containing the x coordinates of
        vertices.

    y (PLFLT_VECTOR, input) :    A vector containing the y coordinates of
        vertices.
")
plfill;

%feature( "docstring", "Draw filled polygon in 3D

DESCRIPTION:

    Fills the 3D polygon defined by the n points in the x, y, and z
    vectors using the pattern defined by plpsty or plpat.  The routine
    will automatically close the polygon between the last and first
    vertices.  If multiple closed polygons are passed in x, y, and z then
    plfill3 will fill in between them.

    Redacted form: General: plfill3(x, y, z)


    This function is used in example 15.



SYNOPSIS:

plfill3(n, x, y, z)

ARGUMENTS:

    n (PLINT, input) :    Number of vertices in polygon.

    x (PLFLT_VECTOR, input) :    A vector containing the x coordinates of
        vertices.

    y (PLFLT_VECTOR, input) :    A vector containing the y coordinates of
        vertices.

    z (PLFLT_VECTOR, input) :    A vector containing the z coordinates of
        vertices.
")
plfill3;

%feature( "docstring", "Flushes the output stream

DESCRIPTION:

    Flushes the output stream. Use sparingly, if at all.

    Redacted form: plflush()

    This function is used in examples 1 and 14.



SYNOPSIS:

plflush()
")
plflush;

%feature( "docstring", "Set font

DESCRIPTION:

    Sets the font used for subsequent text and symbols.  For devices that
    still use Hershey fonts this routine has no effect unless the Hershey
    fonts with extended character set are loaded (see plfontld). For
    unicode-aware devices that use system fonts instead of Hershey fonts,
    this routine calls the plsfci routine with argument set up
    appropriately for the various cases below.  However, this method of
    specifying the font for unicode-aware devices is deprecated, and the
    much more flexible method of calling plsfont directly is recommended
    instead (where plsfont provides a user-friendly interface to plsfci),

    Redacted form: plfont(ifont)

    This function is used in examples 1, 2, 4, 7, 13, 24, and 26.



SYNOPSIS:

plfont(ifont)

ARGUMENTS:

    ifont (PLINT, input) :    Specifies the font: 1: Sans serif font
        (simplest and fastest)
            2: Serif font
            3: Italic font
            4: Script font
")
plfont;

%feature( "docstring", "Load Hershey fonts

DESCRIPTION:

    Loads the Hershey fonts used for text and symbols.  This routine may
    be called before or after initializing PLplot.  If not explicitly
    called before PLplot initialization, then by default that
    initialization loads Hershey fonts with the extended character set.
    This routine only has a practical effect for devices that still use
    Hershey fonts (as opposed to modern devices that use unicode-aware
    system fonts instead of Hershey fonts).

    Redacted form: plfontld(fnt)

    This function is used in examples 1 and 7.



SYNOPSIS:

plfontld(fnt)

ARGUMENTS:

    fnt (PLINT, input) :    Specifies the type of Hershey fonts to load.
        A zero value specifies Hershey fonts with the standard character
        set and a non-zero value (the default assumed if plfontld is never
        called) specifies Hershey fonts with the extended character set.
")
plfontld;

%feature( "docstring", "Wait for graphics input event and translate to world coordinates.

DESCRIPTION:

    Wait for graphics input event and translate to world coordinates.
    Returns 0 if no translation to world coordinates is possible.

    This function returns 1 on success and 0 if no translation to world
    coordinates is possible.

    Redacted form: plGetCursor(gin)

    This function is used in examples 1 and 20.



SYNOPSIS:

PLINT plGetCursor(gin)

ARGUMENTS:

    gin (PLGraphicsIn *, output) :    Pointer to PLGraphicsIn structure
        which will contain the output. The structure is not allocated by
        the routine and must exist before the function is called.
")
#ifdef SWIG_OCTAVE
my_plGetCursor;
#else
plGetCursor;
#endif

%feature( "docstring", "Get character default height and current (scaled) height

DESCRIPTION:

    Get character default height and current (scaled) height.

    Redacted form: plgchr(p_def, p_ht)

    This function is used in example 23.



SYNOPSIS:

plgchr(p_def, p_ht)

ARGUMENTS:

    p_def (PLFLT_NC_SCALAR, output) :    Returned value of the default
        character height (mm).

    p_ht (PLFLT_NC_SCALAR, output) :    Returned value of the scaled
        character height (mm).
")
plgchr;

%feature( "docstring", "Get the cmap1 argument range for continuous color plots

DESCRIPTION:

    Get the cmap1 argument range for continuous color plots. (Use
    plscmap1_range to set the cmap1 argument range.)

    Redacted form: plgcmap1_range(min_color, max_color)

    This function is currently not used in any example.



SYNOPSIS:

plgcmap1_range(min_color, max_color)

ARGUMENTS:

    min_color (PLFLT_NC_SCALAR, output) :    Returned value of the current
        minimum cmap1 argument.

    max_color (PLFLT_NC_SCALAR, output) :    Returned value of the current
        maximum cmap1 argument.
")
plgcmap1_range;

%feature( "docstring", "Returns 8-bit RGB values for given color index from cmap0

DESCRIPTION:

    Returns 8-bit RGB values (0-255) for given color from cmap0 (see the
    PLplot documentation).  Values are negative if an invalid color id is
    given.

    Redacted form: plgcol0(icol0, r, g, b)

    This function is used in example 2.



SYNOPSIS:

plgcol0(icol0, r, g, b)

ARGUMENTS:

    icol0 (PLINT, input) :    Index of desired cmap0 color.

    r (PLINT_NC_SCALAR, output) :    Returned value of the 8-bit red
        value.

    g (PLINT_NC_SCALAR, output) :    Returned value of the 8-bit green
        value.

    b (PLINT_NC_SCALAR, output) :    Returned value of the 8-bit blue
        value.
")
plgcol0;

%feature( "docstring", "Returns 8-bit RGB values and PLFLT alpha transparency value for given color index from cmap0

DESCRIPTION:

    Returns 8-bit RGB values (0-255) and PLFLT alpha transparency value
    (0.0-1.0) for given color from cmap0 (see the PLplot documentation).
    Values are negative if an invalid color id is given.

    Redacted form: plgcola(r, g, b)

    This function is used in example 30.



SYNOPSIS:

plgcol0a(icol0, r, g, b, alpha)

ARGUMENTS:

    icol0 (PLINT, input) :    Index of desired cmap0 color.

    r (PLINT_NC_SCALAR, output) :    Returned value of the red intensity
        in the range from 0 to 255.

    g (PLINT_NC_SCALAR, output) :    Returned value of the green intensity
        in the range from 0 to 255.

    b (PLINT_NC_SCALAR, output) :    Returned value of the blue intensity
        in the range from 0 to 255.

    alpha (PLFLT_NC_SCALAR, output) :    Returned value of the alpha
        transparency in the range from (0.0-1.0).
")
plgcol0a;

%feature( "docstring", "Returns the background color (cmap0[0]) by 8-bit RGB value

DESCRIPTION:

    Returns the background color (cmap0[0]) by 8-bit RGB value.

    Redacted form: plgcolbg(r, g, b)

    This function is used in example 31.



SYNOPSIS:

plgcolbg(r, g, b)

ARGUMENTS:

    r (PLINT_NC_SCALAR, output) :    Returned value of the red intensity
        in the range from 0 to 255.

    g (PLINT_NC_SCALAR, output) :    Returned value of the green intensity
        in the range from 0 to 255.

    b (PLINT_NC_SCALAR, output) :    Returned value of the blue intensity
        in the range from 0 to 255.
")
plgcolbg;

%feature( "docstring", "Returns the background color (cmap0[0]) by 8-bit RGB value and PLFLT alpha transparency value

DESCRIPTION:

    Returns the background color (cmap0[0]) by 8-bit RGB value and PLFLT
    alpha transparency value.

    This function is used in example 31.



SYNOPSIS:

plgcolbga(r, g, b, alpha)

ARGUMENTS:

    r (PLINT_NC_SCALAR, output) :    Returned value of the red intensity
        in the range from 0 to 255.

    g (PLINT_NC_SCALAR, output) :    Returned value of the green intensity
        in the range from 0 to 255.

    b (PLINT_NC_SCALAR, output) :    Returned value of the blue intensity
        in the range from 0 to 255.

    alpha (PLFLT_NC_SCALAR, output) :    Returned value of the alpha
        transparency in the range (0.0-1.0).
")
plgcolbga;

%feature( "docstring", "Get the current device-compression setting

DESCRIPTION:

    Get the current device-compression setting.  This parameter is only
    used for drivers that provide compression.

    Redacted form: plgcompression(compression)

    This function is used in example 31.



SYNOPSIS:

plgcompression(compression)

ARGUMENTS:

    compression (PLINT_NC_SCALAR, output) :    Returned value of the
        compression setting for the current device.
")
plgcompression;

%feature( "docstring", "Get the current device (keyword) name

DESCRIPTION:

    Get the current device (keyword) name.  Note: you must have allocated
    space for this (80 characters is safe).

    Redacted form: plgdev(p_dev)

    This function is used in example 14.



SYNOPSIS:

plgdev(p_dev)

ARGUMENTS:

    p_dev (PLCHAR_NC_VECTOR, output) :    Returned ascii character string
        (with preallocated length of 80 characters or more) containing the
        device (keyword) name.
")
plgdev;

%feature( "docstring", "Get parameters that define current device-space window

DESCRIPTION:

    Get relative margin width, aspect ratio, and relative justification
    that define current device-space window. If plsdidev has not been
    called the default values pointed to by p_mar, p_aspect, p_jx, and
    p_jy will all be 0.

    Redacted form: plgdidev(p_mar, p_aspect, p_jx, p_jy)

    This function is used in example 31.



SYNOPSIS:

plgdidev(p_mar, p_aspect, p_jx, p_jy)

ARGUMENTS:

    p_mar (PLFLT_NC_SCALAR, output) :    Returned value of the relative
        margin width.

    p_aspect (PLFLT_NC_SCALAR, output) :    Returned value of the aspect
        ratio.

    p_jx (PLFLT_NC_SCALAR, output) :    Returned value of the relative
        justification in x.

    p_jy (PLFLT_NC_SCALAR, output) :    Returned value of the relative
        justification in y.
")
plgdidev;

%feature( "docstring", "Get plot orientation

DESCRIPTION:

    Get plot orientation parameter which is multiplied by 90 degrees to
    obtain the angle of rotation.  Note, arbitrary rotation parameters
    such as 0.2 (corresponding to 18 degrees) are possible, but the usual
    values for the rotation parameter are 0., 1., 2., and 3. corresponding
    to 0 degrees (landscape mode), 90 degrees (portrait mode), 180 degrees
    (seascape mode), and 270 degrees (upside-down mode). If plsdiori has
    not been called the default value pointed to by p_rot will be 0.

    Redacted form: plgdiori(p_rot)

    This function is not used in any examples.



SYNOPSIS:

plgdiori(p_rot)

ARGUMENTS:

    p_rot (PLFLT_NC_SCALAR, output) :    Returned value of the orientation
        parameter.
")
plgdiori;

%feature( "docstring", "Get parameters that define current plot-space window

DESCRIPTION:

    Get relative minima and maxima that define current plot-space window.
    If plsdiplt has not been called the default values pointed to by
    p_xmin, p_ymin, p_xmax, and p_ymax will be 0., 0., 1., and 1.

    Redacted form: plgdiplt(p_xmin, p_ymin, p_xmax, p_ymax)

    This function is used in example 31.



SYNOPSIS:

plgdiplt(p_xmin, p_ymin, p_xmax, p_ymax)

ARGUMENTS:

    p_xmin (PLFLT_NC_SCALAR, output) :    Returned value of the relative
        minimum in x.

    p_ymin (PLFLT_NC_SCALAR, output) :    Returned value of the relative
        minimum in y.

    p_xmax (PLFLT_NC_SCALAR, output) :    Returned value of the relative
        maximum in x.

    p_ymax (PLFLT_NC_SCALAR, output) :    Returned value of the relative
        maximum in y.
")
plgdiplt;

%feature( "docstring", "Get drawing mode (depends on
device support!)

DESCRIPTION:

    Get drawing mode.  Note only one device driver (cairo) currently
    supports this at the moment, and for that case the PLINT value
    returned by this function is one of PL_DRAWMODE_DEFAULT,
    PL_DRAWMODE_REPLACE, PL_DRAWMODE_XOR, or PL_DRAWMODE_UNKNOWN. This
    function returns PL_DRAWMODE_UNKNOWN for the rest of the device
    drivers.  See also plsdrawmode.

    Redacted form: plgdrawmode()

    This function is used in example 34.



SYNOPSIS:

plgdrawmode()
")
plgdrawmode;

%feature( "docstring", "Get family file parameters

DESCRIPTION:

    Gets information about current family file, if familying is enabled.
    See the PLplot documentation for more information.

    Redacted form: plgfam(p_fam, p_num, p_bmax)

    This function is used in examples 14 and 31.



SYNOPSIS:

plgfam(p_fam, p_num, p_bmax)

ARGUMENTS:

    p_fam (PLINT_NC_SCALAR, output) :    Returned value of the current
        family flag value.  If nonzero, familying is enabled for the
        current device.

    p_num (PLINT_NC_SCALAR, output) :    Returned value of the current
        family file number.

    p_bmax (PLINT_NC_SCALAR, output) :    Returned value of the maximum
        file size (in bytes) for a family file.
")
plgfam;

%feature( "docstring", "Get FCI (font characterization integer)

DESCRIPTION:

    Gets information about the current font using the FCI approach. See
    the PLplot documentation for more information.

    Redacted form: plgfci(p_fci)

    This function is used in example 23.



SYNOPSIS:

plgfci(p_fci)

ARGUMENTS:

    p_fci (PLUNICODE_NC_SCALAR, output) :    Returned value of the current
        FCI value.
")
plgfci;

%feature( "docstring", "Get output file name

DESCRIPTION:

    Gets the current output file name, if applicable.

    Redacted form: plgfnam(fnam)

    This function is used in example 31.



SYNOPSIS:

plgfnam(fnam)

ARGUMENTS:

    fnam (PLCHAR_NC_VECTOR, output) :    Returned ascii character string
        (with preallocated length of 80 characters or more) containing the
        file name.
")
plgfnam;

%feature( "docstring", "Get family, style and weight of the current font

DESCRIPTION:

    Gets information about current font.  See the PLplot documentation for
    more information on font selection.

    Redacted form: plgfont(p_family, p_style, p_weight)

    This function is used in example 23.



SYNOPSIS:

plgfont(p_family, p_style, p_weight)

ARGUMENTS:

    p_family (PLINT_NC_SCALAR, output) :    Returned value of the current
        font family. The available values are given by the PL_FCI_*
        constants in plplot.h. Current options are PL_FCI_SANS,
        PL_FCI_SERIF, PL_FCI_MONO, PL_FCI_SCRIPT and PL_FCI_SYMBOL. If
        p_family is NULL then the font family is not returned.

    p_style (PLINT_NC_SCALAR, output) :    Returned value of the current
        font style. The available values are given by the PL_FCI_*
        constants in plplot.h.  Current options are PL_FCI_UPRIGHT,
        PL_FCI_ITALIC and PL_FCI_OBLIQUE. If p_style is NULL then the font
        style is not returned.

    p_weight (PLINT_NC_SCALAR, output) :    Returned value of the current
        font weight. The available values are given by the PL_FCI_*
        constants in plplot.h.  Current options are PL_FCI_MEDIUM and
        PL_FCI_BOLD. If p_weight is NULL then the font weight is not
        returned.
")
plgfont;

%feature( "docstring", "Get the (current) run level

DESCRIPTION:

    Get the (current) run level. Valid settings are: 0,  uninitialized
            1,  initialized
            2,  viewport defined
            3,  world coordinates defined


    Redacted form: plglevel(p_level)

    This function is used in example 31.



SYNOPSIS:

plglevel(p_level)

ARGUMENTS:

    p_level (PLINT_NC_SCALAR, output) :    Returned value of the run
        level.
")
plglevel;

%feature( "docstring", "Get page parameters

DESCRIPTION:

    Gets the current page configuration. The length and offset values are
    expressed in units that are specific to the current driver. For
    instance: screen drivers will usually interpret them as number of
    pixels, whereas printer drivers will usually use mm.

    Redacted form: plgpage(p_xp, p_yp, p_xleng, p_yleng, p_xoff, p_yoff)

    This function is used in examples 14 and 31.



SYNOPSIS:

plgpage(p_xp, p_yp, p_xleng, p_yleng, p_xoff, p_yoff)

ARGUMENTS:

    p_xp (PLFLT_NC_SCALAR, output) :    Returned value of the number of
        pixels/inch (DPI) in x.

    p_yp (PLFLT_NC_SCALAR, output) :    Returned value of the number of
        pixels/inch (DPI) in y.

    p_xleng (PLINT_NC_SCALAR, output) :    Returned value of the x page
        length.

    p_yleng (PLINT_NC_SCALAR, output) :    Returned value of the y page
        length.

    p_xoff (PLINT_NC_SCALAR, output) :    Returned value of the x page
        offset.

    p_yoff (PLINT_NC_SCALAR, output) :    Returned value of the y page
        offset.
")
plgpage;

%feature( "docstring", "Switch to graphics screen

DESCRIPTION:

    Sets an interactive device to graphics mode, used in conjunction with
    pltext to allow graphics and text to be interspersed.  On a device
    which supports separate text and graphics windows, this command causes
    control to be switched to the graphics window.  If already in graphics
    mode, this command is ignored.  It is also ignored on devices which
    only support a single window or use a different method for shifting
    focus.  See also pltext.

    Redacted form: plgra()

    This function is used in example 1.



SYNOPSIS:

plgra()
")
plgra;

%feature( "docstring", "Draw linear gradient inside polygon

DESCRIPTION:

    Draw a linear gradient using cmap1 inside the polygon defined by the n
    points (
    x[i],
    y[i]).  Interpretation of the polygon is the same as for plfill.  The
    polygon coordinates and the gradient angle are all expressed in world
    coordinates.  The angle from the x axis for both the rotated
    coordinate system and the gradient vector is specified by angle.  The
    magnitude of the gradient vector is the difference between the maximum
    and minimum values of x for the vertices in the rotated coordinate
    system.  The origin of the gradient vector can be interpreted as being
    anywhere on the line corresponding to the minimum x value for the
    vertices in the rotated coordinate system.  The distance along the
    gradient vector is linearly transformed to the independent variable of
    color map 1 which ranges from 0. at the tail of the gradient vector to
    1. at the head of the gradient vector.  What is drawn is the RGBA
    color corresponding to the independent variable of cmap1.  For more
    information about cmap1 (see the PLplot documentation).

    Redacted form: plgradient(x,y,angle)

    This function is used in examples 25 and 30.



SYNOPSIS:

plgradient(n, x, y, angle)

ARGUMENTS:

    n (PLINT, input) :    Number of vertices in polygon.

    x (PLFLT_VECTOR, input) :    A vector containing the x coordinates of
        vertices.

    y (PLFLT_VECTOR, input) :    A vector containing the y coordinates of
        vertices.

    angle (PLFLT, input) :    Angle (degrees) of gradient vector from x
        axis.
")
plgradient;

%feature( "docstring", "Grid data from irregularly sampled data

DESCRIPTION:

    Real world data is frequently irregularly sampled, but PLplot 3D plots
    require data organized as a grid, i.e., with x sample point values
    independent of y coordinate and vice versa.  This function takes
    irregularly sampled data from the x[npts], y[npts], and z[npts]
    vectors; reads the desired grid location from the input vectors
    xg[nptsx] and yg[nptsy]; and returns the interpolated result on that
    grid using the output matrix zg[nptsx][nptsy].  The algorithm used to
    interpolate the data to the grid is specified with the argument type
    which can have one parameter specified in argument data.

    Redacted form: General: plgriddata(x, y, z, xg, yg, zg, type, data)
            Python: zg=plgriddata(x, y, z, xg, yg, type, data)


    This function is used in example 21.



SYNOPSIS:

plgriddata(x, y, z, npts, xg, nptsx, yg, nptsy, zg, type, data)

ARGUMENTS:

    x (PLFLT_VECTOR, input) :    The input x vector.

    y (PLFLT_VECTOR, input) :    The input y vector.

    z (PLFLT_VECTOR, input) :    The input z vector. Each triple x[i],
        y[i], z[i] represents one data sample coordinate.

    npts (PLINT, input) :    The number of data samples in the x, y and z
        vectors.

    xg (PLFLT_VECTOR, input) :    A vector that specifies the grid spacing
        in the x direction. Usually xg has nptsx equally spaced values
        from the minimum to the maximum values of the x input vector.

    nptsx (PLINT, input) :    The number of points in the xg vector.

    yg (PLFLT_VECTOR, input) :    A vector that specifies the grid spacing
        in the y direction. Similar to the xg parameter.

    nptsy (PLINT, input) :    The number of points in the yg vector.

    zg (PLFLT_NC_MATRIX, output) :    The matrix of interpolated results
        where data lies in the grid specified by xg and yg. Therefore the
        zg matrix must be dimensioned
    nptsx by
    nptsy.

    type (PLINT, input) :    The type of grid interpolation algorithm to
        use, which can be: GRID_CSA: Bivariate Cubic Spline approximation
            GRID_DTLI: Delaunay Triangulation Linear Interpolation
            GRID_NNI: Natural Neighbors Interpolation
            GRID_NNIDW: Nearest Neighbors Inverse Distance Weighted
            GRID_NNLI: Nearest Neighbors Linear Interpolation
            GRID_NNAIDW:  Nearest Neighbors Around Inverse Distance
            Weighted
    For details of the algorithms read the source file plgridd.c.

    data (PLFLT, input) :    Some gridding algorithms require extra data,
        which can be specified through this argument. Currently, for
        algorithm: GRID_NNIDW, data specifies the number of neighbors to
        use, the lower the value, the noisier (more local) the
        approximation is.
            GRID_NNLI, data specifies what a thin triangle is, in the
            range [1. .. 2.]. High values enable the usage of very thin
            triangles for interpolation, possibly resulting in error in
            the approximation.
            GRID_NNI, only weights greater than data will be accepted. If
            0, all weights will be accepted.
")
#ifdef SWIG_OCTAVE
my_plgriddata;
#else
plgriddata;
#endif

%feature( "docstring", "Get current subpage parameters

DESCRIPTION:

    Gets the size of the current subpage in millimeters measured from the
    bottom left hand corner of the output device page or screen.  Can be
    used in conjunction with plsvpa for setting the size of a viewport in
    absolute coordinates (millimeters).

    Redacted form: plgspa(xmin, xmax, ymin, ymax)

    This function is used in example 23.



SYNOPSIS:

plgspa(xmin, xmax, ymin, ymax)

ARGUMENTS:

    xmin (PLFLT_NC_SCALAR, output) :    Returned value of the position of
        the left hand edge of the subpage in millimeters.

    xmax (PLFLT_NC_SCALAR, output) :    Returned value of the position of
        the right hand edge of the subpage in millimeters.

    ymin (PLFLT_NC_SCALAR, output) :    Returned value of the position of
        the bottom edge of the subpage in millimeters.

    ymax (PLFLT_NC_SCALAR, output) :    Returned value of the position of
        the top edge of the subpage in millimeters.
")
plgspa;

%feature( "docstring", "Get current stream number

DESCRIPTION:

    Gets the number of the current output stream. See also plsstrm.

    Redacted form: plgstrm(p_strm)

    This function is used in example 1,20.



SYNOPSIS:

plgstrm(p_strm)

ARGUMENTS:

    p_strm (PLINT_NC_SCALAR, output) :    Returned value of the current
        stream value.
")
plgstrm;

%feature( "docstring", "Get the current library version number

DESCRIPTION:

    Get the current library version number.  Note: you must have allocated
    space for this (80 characters is safe).

    Redacted form: plgver(p_ver)

    This function is used in example 1.



SYNOPSIS:

plgver(p_ver)

ARGUMENTS:

    p_ver (PLCHAR_NC_VECTOR, output) :    Returned ascii character string
        (with preallocated length of 80 characters or more) containing the
        PLplot version number.
")
plgver;

%feature( "docstring", "Get viewport limits in normalized device coordinates

DESCRIPTION:

    Get viewport limits in normalized device coordinates.

    Redacted form: General: plgvpd(p_xmin, p_xmax, p_ymin, p_ymax)


    This function is used in example 31.



SYNOPSIS:

plgvpd(p_xmin, p_xmax, p_ymin, p_ymax)

ARGUMENTS:

    p_xmin (PLFLT_NC_SCALAR, output) :    Returned value of the lower
        viewport limit of the normalized device coordinate in x.

    p_xmax (PLFLT_NC_SCALAR, output) :    Returned value of the upper
        viewport limit of the normalized device coordinate in x.

    p_ymin (PLFLT_NC_SCALAR, output) :    Returned value of the lower
        viewport limit of the normalized device coordinate in y.

    p_ymax (PLFLT_NC_SCALAR, output) :    Returned value of the upper
        viewport limit of the normalized device coordinate in y.
")
plgvpd;

%feature( "docstring", "Get viewport limits in world coordinates

DESCRIPTION:

    Get viewport limits in world coordinates.

    Redacted form: General: plgvpw(p_xmin, p_xmax, p_ymin, p_ymax)


    This function is used in example 31.



SYNOPSIS:

plgvpw(p_xmin, p_xmax, p_ymin, p_ymax)

ARGUMENTS:

    p_xmin (PLFLT_NC_SCALAR, output) :    Returned value of the lower
        viewport limit of the world coordinate in x.

    p_xmax (PLFLT_NC_SCALAR, output) :    Returned value of the upper
        viewport limit of the world coordinate in x.

    p_ymin (PLFLT_NC_SCALAR, output) :    Returned value of the lower
        viewport limit of the world coordinate in y.

    p_ymax (PLFLT_NC_SCALAR, output) :    Returned value of the upper
        viewport limit of the world coordinate in y.
")
plgvpw;

%feature( "docstring", "Get x axis parameters

DESCRIPTION:

    Returns current values of the p_digmax and p_digits flags for the x
    axis.  p_digits is updated after the plot is drawn, so this routine
    should only be called after the call to plbox (or plbox3) is complete.
     See the PLplot documentation for more information.

    Redacted form: plgxax(p_digmax, p_digits)

    This function is used in example 31.



SYNOPSIS:

plgxax(p_digmax, p_digits)

ARGUMENTS:

    p_digmax (PLINT_NC_SCALAR, output) :    Returned value of the maximum
        number of digits for the x axis.  If nonzero, the printed label
        has been switched to a floating-point representation when the
        number of digits exceeds this value.

    p_digits (PLINT_NC_SCALAR, output) :    Returned value of the actual
        number of digits for the numeric labels (x axis) from the last
        plot.
")
plgxax;

%feature( "docstring", "Get y axis parameters

DESCRIPTION:

    Identical to plgxax, except that arguments are flags for y axis. See
    the description of plgxax for more detail.

    Redacted form: plgyax(p_digmax, p_digits)

    This function is used in example 31.



SYNOPSIS:

plgyax(p_digmax, p_digits)

ARGUMENTS:

    p_digmax (PLINT_NC_SCALAR, output) :    Returned value of the maximum
        number of digits for the y axis.  If nonzero, the printed label
        has been switched to a floating-point representation when the
        number of digits exceeds this value.

    p_digits (PLINT_NC_SCALAR, output) :    Returned value of the actual
        number of digits for the numeric labels (y axis) from the last
        plot.
")
plgyax;

%feature( "docstring", "Get z axis parameters

DESCRIPTION:

    Identical to plgxax, except that arguments are flags for z axis. See
    the description of plgxax for more detail.

    Redacted form: plgzax(p_digmax, p_digits)

    This function is used in example 31.



SYNOPSIS:

plgzax(p_digmax, p_digits)

ARGUMENTS:

    p_digmax (PLINT_NC_SCALAR, output) :    Returned value of the maximum
        number of digits for the z axis.  If nonzero, the printed label
        has been switched to a floating-point representation when the
        number of digits exceeds this value.

    p_digits (PLINT_NC_SCALAR, output) :    Returned value of the actual
        number of digits for the numeric labels (z axis) from the last
        plot.
")
plgzax;

%feature( "docstring", "Plot a histogram from unbinned data

DESCRIPTION:

    Plots a histogram from n data points stored in the data vector.  This
    routine bins the data into nbin bins equally spaced between datmin and
    datmax, and calls plbin to draw the resulting histogram.  Parameter
    opt allows, among other things, the histogram either to be plotted in
    an existing window or causes plhist to call plenv with suitable limits
    before plotting the histogram.

    Redacted form: plhist(data, datmin, datmax, nbin, opt)

    This function is used in example 5.



SYNOPSIS:

plhist(n, data, datmin, datmax, nbin, opt)

ARGUMENTS:

    n (PLINT, input) :    Number of data points.

    data (PLFLT_VECTOR, input) :    A vector containing the values of the
        n data points.

    datmin (PLFLT, input) :    Left-hand edge of lowest-valued bin.

    datmax (PLFLT, input) :    Right-hand edge of highest-valued bin.

    nbin (PLINT, input) :    Number of (equal-sized) bins into which to
        divide the interval xmin to xmax.

    opt (PLINT, input) :    Is a combination of several flags:
        opt=PL_HIST_DEFAULT: The axes are automatically rescaled to fit
        the histogram data, the outer bins are expanded to fill up the
        entire x-axis, data outside the given extremes are assigned to the
        outer bins and bins of zero height are simply drawn.
            opt=PL_HIST_NOSCALING|...: The existing axes are not rescaled
            to fit the histogram data, without this flag, plenv is called
            to set the world coordinates.
            opt=PL_HIST_IGNORE_OUTLIERS|...: Data outside the given
            extremes are not taken into account. This option should
            probably be combined with opt=PL_HIST_NOEXPAND|..., so as to
            properly present the data.
            opt=PL_HIST_NOEXPAND|...: The outer bins are drawn with equal
            size as the ones inside.
            opt=PL_HIST_NOEMPTY|...: Bins with zero height are not drawn
            (there is a gap for such bins).
")
plhist;

%feature( "docstring", "Convert HLS color to RGB

DESCRIPTION:

    Convert HLS color coordinates to RGB.

    Redacted form: General: plhlsrgb(h, l, s, p_r, p_g, p_b)


    This function is used in example 2.



SYNOPSIS:

plhlsrgb(h, l, s, p_r, p_g, p_b)

ARGUMENTS:

    h (PLFLT, input) :    Hue in degrees (0.0-360.0) on the color
        cylinder.

    l (PLFLT, input) :    Lightness expressed as a fraction (0.0-1.0) of
        the axis of the color cylinder.

    s (PLFLT, input) :    Saturation expressed as a fraction (0.0-1.0) of
        the radius of the color cylinder.

    p_r (PLFLT_NC_SCALAR, output) :    Returned value of the red intensity
        (0.0-1.0) of the color.

    p_g (PLFLT_NC_SCALAR, output) :    Returned value of the green
        intensity (0.0-1.0) of the color.

    p_b (PLFLT_NC_SCALAR, output) :    Returned value of the blue
        intensity (0.0-1.0) of the color.
")
plhlsrgb;

%feature( "docstring", "Plot a 2D matrix using cmap1

DESCRIPTION:

    Plot a 2D matrix using cmap1.

    Redacted form: General: plimagefr(idata, xmin, xmax, ymin, ymax, zmin,
    zmax, valuemin, valuemax, pltr, pltr_data)


    This function is used in example 20.



SYNOPSIS:

plimagefr(idata, nx, ny, xmin, xmax, ymin, ymax, zmin, zmax, valuemin, valuemax, pltr, pltr_data)

ARGUMENTS:

    idata (PLFLT_MATRIX, input) :    A matrix of values (intensities) to
        plot.  Should have dimensions of
    nx by
    ny.

    nx, ny (PLINT, input) :    Dimensions of idata

    xmin, xmax, ymin, ymax (PLFLT, input) :    See the discussion of
    pltr below for how these arguments are used (only for the special case
        when the callback function
    pltr is not supplied).

    zmin, zmax (PLFLT, input) :    Only data between zmin and zmax
        (inclusive) will be plotted.

    valuemin, valuemax (PLFLT, input) :    The minimum and maximum data
        values to use for value to color mappings.  A datum equal to or
        less than valuemin will be plotted with color 0.0, while a datum
        equal to or greater than valuemax will be plotted with color 1.0.
        Data between valuemin and valuemax map linearly to colors in the
        range (0.0-1.0).

    pltr (PLTRANSFORM_callback, input) :    A callback function that
        defines the transformation between the zero-based indices of the
        matrix idata and world coordinates. If
    pltr is not supplied (e.g., is set to NULL in the C case), then the x
        indices of idata are mapped to the range
    xmin through
    xmax and the y indices of idata are mapped to the range
    ymin through
    ymax.For the C case, transformation functions are provided in the
        PLplot library: pltr0 for the identity mapping, and pltr1 and
        pltr2 for arbitrary mappings respectively defined by vectors and
        matrices.  In addition, C callback routines for the transformation
        can be supplied by the user such as the mypltr function in
        examples/c/x09c.c which provides a general linear transformation
        between index coordinates and world coordinates.For languages
        other than C you should consult the PLplot documentation for the
        details concerning how PLTRANSFORM_callback arguments are
        interfaced. However, in general, a particular pattern of
        callback-associated arguments such as a tr vector with 6 elements;
        xg and yg vectors; or xg and yg matrices are respectively
        interfaced to a linear-transformation routine similar to the above
        mypltr function; pltr1; and pltr2. Furthermore, some of our more
        sophisticated bindings (see, e.g., the PLplot documentation)
        support native language callbacks for handling index to
        world-coordinate transformations.  Examples of these various
        approaches are given in examples/<language>x09*,
        examples/<language>x16*, examples/<language>x20*,
        examples/<language>x21*, and examples/<language>x22*, for all our
        supported languages.

    pltr_data (PLPointer, input) :    Extra parameter to help pass
        information to pltr0, pltr1, pltr2, or whatever routine is
        externally supplied.
")
#ifdef SWIG_OCTAVE
my_plimagefr;
#else
plimagefr;
#endif

%feature( "docstring", "Plot a 2D matrix using cmap1 with automatic color adjustment

DESCRIPTION:

    Plot a 2D matrix using the cmap1 palette.  The color scale is
    automatically adjusted to use the maximum and minimum values in idata
    as valuemin and valuemax in a call to plimagefr.

    Redacted form: General: plimage(idata, xmin, xmax, ymin, ymax, zmin,
    zmax, Dxmin, Dxmax, Dymin, Dymax)


    This function is used in example 20.



SYNOPSIS:

plimage(idata, nx, ny, xmin, xmax, ymin, ymax, zmin, zmax, Dxmin, Dxmax, Dymin, Dymax)

ARGUMENTS:

    idata (PLFLT_MATRIX, input) :    A matrix containing function values
        to plot.  Should have dimensions of
    nx by
    ny.

    nx, ny (PLINT, input) :    Dimensions of idata

    xmin, xmax, ymin, ymax (PLFLT, input) :    The x and y index ranges
        are linearly transformed to these world coordinate ranges such
        that idata[0][0] corresponds to (xmin, ymin) and idata[nx - 1][ny
        - 1] corresponds to (xmax, ymax).

    zmin, zmax (PLFLT, input) :    Only data between zmin and zmax
        (inclusive) will be plotted.

    Dxmin, Dxmax, Dymin, Dymax (PLFLT, input) :    Plot only the window of
        points whose plot coordinates fall inside the window of (Dxmin,
        Dymin) to (Dxmax, Dymax).
")
plimage;

%feature( "docstring", "Initialize PLplot

DESCRIPTION:

    Initializing the plotting package.  The program prompts for the device
    keyword or number of the desired output device.  Hitting a RETURN in
    response to the prompt is the same as selecting the first device.
    plinit will issue no prompt if either the device was specified
    previously (via command line flag, the plsetopt function, or the
    plsdev function), or if only one device is enabled when PLplot is
    installed.  If subpages have been specified, the output device is
    divided into nx by ny subpages, each of which may be used
    independently.  If plinit is called again during a program, the
    previously opened file will be closed.  The subroutine pladv is used
    to advance from one subpage to the next.

    Redacted form: plinit()

    This function is used in all of the examples.



SYNOPSIS:

plinit()
")
plinit;

%feature( "docstring", "Draw a line between two points

DESCRIPTION:

    Joins the point (
    x1,
    y1) to (
    x2,
    y2).

    Redacted form: pljoin(x1,y1,x2,y2)

    This function is used in examples 3 and 14.



SYNOPSIS:

pljoin(x1, y1, x2, y2)

ARGUMENTS:

    x1 (PLFLT, input) :    x coordinate of first point.

    y1 (PLFLT, input) :    y coordinate of first point.

    x2 (PLFLT, input) :    x coordinate of second point.

    y2 (PLFLT, input) :    y coordinate of second point.
")
pljoin;

%feature( "docstring", "Simple routine to write labels

DESCRIPTION:

    Routine for writing simple labels. Use plmtex for more complex labels.

    Redacted form: pllab(xlabel, ylabel, tlabel)

    This function is used in examples 1, 5, 9, 12, 14-16, 20-22, and 29.



SYNOPSIS:

pllab(xlabel, ylabel, tlabel)

ARGUMENTS:

    xlabel (PLCHAR_VECTOR, input) :    A UTF-8 character string specifying
        the label for the x axis.

    ylabel (PLCHAR_VECTOR, input) :    A UTF-8 character string specifying
        the label for the y axis.

    tlabel (PLCHAR_VECTOR, input) :    A UTF-8 character string specifying
        the title of the plot.
")
pllab;

%feature( "docstring", "Plot legend using discretely annotated filled boxes, lines, and/or lines of symbols

DESCRIPTION:

    Routine for creating a discrete plot legend with a plotted filled box,
    line, and/or line of symbols for each annotated legend entry.  (See
    plcolorbar for similar functionality for creating continuous color
    bars.)  The arguments of pllegend provide control over the location
    and size of the legend as well as the location and characteristics of
    the elements (most of which are optional) within that legend.  The
    resulting legend is clipped at the boundaries of the current subpage.
    (N.B. the adopted coordinate system used for some of the parameters is
    defined in the documentation of the position parameter.)

    Redacted form: pllegend(p_legend_width, p_legend_height, opt,
    position, x, y, plot_width, bg_color, bb_color, bb_style, nrow,
    ncolumn, opt_array, text_offset, text_scale, text_spacing,
    test_justification, text_colors, text, box_colors, box_patterns,
    box_scales, box_line_widths, line_colors, line_styles, line_widths,
    symbol_colors, symbol_scales, symbol_numbers, symbols)

    This function is used in examples 4, 26, and 33.



SYNOPSIS:

pllegend(p_legend_width, p_legend_height, opt, position, x, y, plot_width, bg_color, bb_color, bb_style, nrow, ncolumn, nlegend, opt_array, text_offset, text_scale, text_spacing, test_justification, text_colors, text, box_colors, box_patterns, box_scales, box_line_widths, line_colors, line_styles, line_widths, symbol_colors, symbol_scales, symbol_numbers, symbols)

ARGUMENTS:

    p_legend_width (PLFLT_NC_SCALAR, output) :    Returned value of the
        legend width in adopted coordinates. This quantity is calculated
        from plot_width, text_offset, ncolumn (possibly modified inside
        the routine depending on nlegend and nrow), and the length
        (calculated internally) of the longest text string.

    p_legend_height (PLFLT_NC_SCALAR, output) :    Returned value of the
        legend height in adopted coordinates. This quantity is calculated
        from text_scale, text_spacing, and nrow (possibly modified inside
        the routine depending on nlegend and nrow).

    opt (PLINT, input) :    opt contains bits controlling the overall
        legend. If the PL_LEGEND_TEXT_LEFT bit is set, put the text area
        on the left of the legend and the plotted area on the right.
        Otherwise, put the text area on the right of the legend and the
        plotted area on the left. If the PL_LEGEND_BACKGROUND bit is set,
        plot a (semitransparent) background for the legend. If the
        PL_LEGEND_BOUNDING_BOX bit is set, plot a bounding box for the
        legend. If the PL_LEGEND_ROW_MAJOR bit is set and (both of the
        possibly internally transformed) nrow > 1 and ncolumn > 1, then
        plot the resulting array of legend entries in row-major order.
        Otherwise, plot the legend entries in column-major order.

    position (PLINT, input) :    position contains bits which control the
        overall position of the legend and the definition of the adopted
        coordinates used for positions just like what is done for the
        position argument for plcolorbar. However, note that the defaults
        for the position bits (see below) are different than the
        plcolorbar case.  The combination of the PL_POSITION_LEFT,
        PL_POSITION_RIGHT, PL_POSITION_TOP, PL_POSITION_BOTTOM,
        PL_POSITION_INSIDE, and PL_POSITION_OUTSIDE bits specifies one of
        the 16 possible standard positions (the 4 corners and centers of
        the 4 sides for both the inside and outside cases) of the legend
        relative to the adopted coordinate system. The corner positions
        are specified by the appropriate combination of two of the
        PL_POSITION_LEFT, PL_POSITION_RIGHT, PL_POSITION_TOP, and
        PL_POSITION_BOTTOM bits while the sides are specified by a single
        value of one of those bits.  The adopted coordinates are
        normalized viewport coordinates if the PL_POSITION_VIEWPORT bit is
        set or normalized subpage coordinates if the PL_POSITION_SUBPAGE
        bit is set. Default position bits: If none of PL_POSITION_LEFT,
        PL_POSITION_RIGHT, PL_POSITION_TOP, or PL_POSITION_BOTTOM are set,
        then use the combination of PL_POSITION_RIGHT and PL_POSITION_TOP.
        If neither of PL_POSITION_INSIDE or PL_POSITION_OUTSIDE is set,
        use PL_POSITION_INSIDE. If neither of PL_POSITION_VIEWPORT or
        PL_POSITION_SUBPAGE is set, use PL_POSITION_VIEWPORT.

    x (PLFLT, input) :    X offset of the legend position in adopted
        coordinates from the specified standard position of the legend.
        For positive x, the direction of motion away from the standard
        position is inward/outward from the standard corner positions or
        standard left or right positions if the
        PL_POSITION_INSIDE/PL_POSITION_OUTSIDE bit is set in position.
        For the standard top or bottom positions, the direction of motion
        is toward positive X.

    y (PLFLT, input) :    Y offset of the legend position in adopted
        coordinates from the specified standard position of the legend.
        For positive y, the direction of motion away from the standard
        position is inward/outward from the standard corner positions or
        standard top or bottom positions if the
        PL_POSITION_INSIDE/PL_POSITION_OUTSIDE bit is set in position. For
        the standard left or right positions, the direction of motion is
        toward positive Y.

    plot_width (PLFLT, input) :    Horizontal width in adopted coordinates
        of the plot area (where the colored boxes, lines, and/or lines of
        symbols are drawn) of the legend.

    bg_color (PLINT, input) :    The cmap0 color of the background for the
        legend (PL_LEGEND_BACKGROUND).

    bb_color (PLINT, input) :    The cmap0 color of the bounding-box line
        for the legend (PL_LEGEND_BOUNDING_BOX).

    bb_style (PLINT, input) :    The pllsty style number for the
        bounding-box line for the legend (PL_LEGEND_BACKGROUND).

    nrow (PLINT, input) :    The number of rows in the matrix used to
        render the
    nlegend legend entries. For internal transformations of
    nrow, see further remarks under
    nlegend.

    ncolumn (PLINT, input) :    The number of columns in the matrix used
        to render the
    nlegend legend entries. For internal transformations of
    ncolumn, see further remarks under
    nlegend.

    nlegend (PLINT, input) :    Number of legend entries. The above
    nrow and
    ncolumn values are transformed internally to be consistent with
    nlegend. If either
    nrow or
    ncolumn is non-positive it is replaced by 1. If the resulting product
        of
    nrow and
    ncolumn is less than
    nlegend, the smaller of the two (or
    nrow, if
    nrow ==
    ncolumn) is increased so the product is >=
    nlegend. Thus, for example, the common
    nrow = 0,
    ncolumn = 0 case is transformed internally to
    nrow =
    nlegend,
    ncolumn = 1; i.e., the usual case of a legend rendered as a single
        column.

    opt_array (PLINT_VECTOR, input) :    A vector of
    nlegend values of options to control each individual plotted area
        corresponding to a legend entry.  If the
    PL_LEGEND_NONE bit is set, then nothing is plotted in the plotted
        area.  If the
    PL_LEGEND_COLOR_BOX,
    PL_LEGEND_LINE, and/or
    PL_LEGEND_SYMBOL bits are set, the area corresponding to a legend
        entry is plotted with a colored box; a line; and/or a line of
        symbols.

    text_offset (PLFLT, input) :    Offset of the text area from the plot
        area in units of character width.

    text_scale (PLFLT, input) :    Character height scale for text
        annotations.

    text_spacing (PLFLT, input) :    Vertical spacing in units of the
        character height from one legend entry to the next.

    text_justification (PLFLT, input) :    Justification parameter used
        for text justification.  The most common values of
        text_justification are 0., 0.5, or 1. corresponding to a text that
        is left justified, centred, or right justified within the text
        area, but other values are allowed as well.

    text_colors (PLINT_VECTOR, input) :    A vector containing
    nlegend cmap0 text colors.

    text (PLCHAR_MATRIX, input) :    A vector of
    nlegend UTF-8 character strings containing the legend annotations.

    box_colors (PLINT_VECTOR, input) :    A vector containing
    nlegend cmap0 colors for the discrete colored boxes (
    PL_LEGEND_COLOR_BOX).

    box_patterns (PLINT_VECTOR, input) :    A vector containing
    nlegend patterns (plpsty indices) for the discrete colored boxes (
    PL_LEGEND_COLOR_BOX).

    box_scales (PLFLT_VECTOR, input) :    A vector containing
    nlegend scales (units of fraction of character height) for the height
        of the discrete colored boxes (
    PL_LEGEND_COLOR_BOX).

    box_line_widths (PLFLT_VECTOR, input) :    A vector containing
    nlegend line widths for the patterns specified by box_patterns (
    PL_LEGEND_COLOR_BOX).

    line_colors (PLINT_VECTOR, input) :    A vector containing
    nlegend cmap0 line colors (
    PL_LEGEND_LINE).

    line_styles (PLINT_VECTOR, input) :    A vector containing
    nlegend line styles (plsty indices) (
    PL_LEGEND_LINE).

    line_widths (PLFLT_VECTOR, input) :    A vector containing
    nlegend line widths (
    PL_LEGEND_LINE).

    symbol_colors (PLINT_VECTOR, input) :    A vector containing
    nlegend cmap0 symbol colors (
    PL_LEGEND_SYMBOL).

    symbol_scales (PLFLT_VECTOR, input) :    A vector containing
    nlegend scale values for the symbol height (
    PL_LEGEND_SYMBOL).

    symbol_numbers (PLINT_VECTOR, input) :    A vector containing
    nlegend numbers of symbols to be drawn across the width of the plotted
        area (
    PL_LEGEND_SYMBOL).

    symbols (PLCHAR_MATRIX, input) :    A vector of
    nlegend UTF-8 character strings containing the legend symbols. (
    PL_LEGEND_SYMBOL).
")
pllegend;

%feature( "docstring", "Sets the 3D position of the light source

DESCRIPTION:

    Sets the 3D position of the light source for use with plsurf3d and
    plsurf3dl

    Redacted form: pllightsource(x, y, z)

    This function is used in example 8.



SYNOPSIS:

pllightsource(x, y, z)

ARGUMENTS:

    x (PLFLT, input) :    X-coordinate of the light source.

    y (PLFLT, input) :    Y-coordinate of the light source.

    z (PLFLT, input) :    Z-coordinate of the light source.
")
pllightsource;

%feature( "docstring", "Draw a line

DESCRIPTION:

    Draws line defined by n points in x and y.

    Redacted form: plline(x, y)

    This function is used in examples 1, 3, 4, 9, 12-14, 16, 18, 20, 22,
    25-27, and 29.



SYNOPSIS:

plline(n, x, y)

ARGUMENTS:

    n (PLINT, input) :    Number of points defining line.

    x (PLFLT_VECTOR, input) :    A vector containing the x coordinates of
        points.

    y (PLFLT_VECTOR, input) :    A vector containing the y coordinates of
        points.
")
plline;

%feature( "docstring", "Draw a line in 3 space

DESCRIPTION:

    Draws line in 3 space defined by n points in x, y, and z. You must
    first set up the viewport, the 2d viewing window (in world
    coordinates), and the 3d normalized coordinate box.  See x18c.c for
    more info.

    Redacted form: plline3(x, y, z)

    This function is used in example 18.



SYNOPSIS:

plline3(n, x, y, z)

ARGUMENTS:

    n (PLINT, input) :    Number of points defining line.

    x (PLFLT_VECTOR, input) :    A vector containing the x coordinates of
        points.

    y (PLFLT_VECTOR, input) :    A vector containing the y coordinates of
        points.

    z (PLFLT_VECTOR, input) :    A vector containing the z coordinates of
        points.
")
plline3;

%feature( "docstring", "Select line style

DESCRIPTION:

    This sets the line style according to one of eight predefined patterns
    (also see plstyl).

    Redacted form: pllsty(lin)

    This function is used in examples 9, 12, 22, and 25.



SYNOPSIS:

pllsty(lin)

ARGUMENTS:

    lin (PLINT, input) :    Integer value between 1 and 8. Line style 1 is
        a continuous line, line style 2 is a line with short dashes and
        gaps, line style 3 is a line with long dashes and gaps, line style
        4 has long dashes and short gaps and so on.
")
pllsty;

%feature( "docstring", "Plot continental outline or shapefile data in world coordinates

DESCRIPTION:

    Plots continental outlines or shapefile data in world coordinates. A
    demonstration of how to use this function to create different
    projections can be found in examples/c/x19c. PLplot is provided with
    basic coastal outlines and USA state borders. To use the map
    functionality PLplot must be compiled with the shapelib library.
    Shapefiles have become a popular standard for geographical data and
    data in this format can be easily found from a number of online
    sources. Shapefile data is actually provided as three or more files
    with the same filename, but different extensions. The .shp and .shx
    files are required for plotting Shapefile data with PLplot.

    PLplot currently supports the point, multipoint, polyline and polygon
    objects within shapefiles. However holes in polygons are not
    supported. When plmap is used the type of object is derived from the
    shapefile, if you wish to override the type then use one of the other
    plmap variants. The built in maps have line data only.

    Redacted form: plmap(mapform, name, minx, maxx, miny, maxy)

    This function is used in example 19.



SYNOPSIS:

plmap(mapform, name, minx, maxx, miny, maxy)

ARGUMENTS:

    mapform (PLMAPFORM_callback, input) :    A user supplied function to
        transform the original map data coordinates to a new coordinate
        system. The PLplot-supplied map data is provided as latitudes and
        longitudes; other Shapefile data may be provided in other
        coordinate systems as can be found in their .prj plain text files.
        For example, by using this transform we can change from a
        longitude, latitude coordinate to a polar stereographic
        projection. Initially, x[0]..[n-1] are the original x coordinates
        (longitudes for the PLplot-supplied data) and y[0]..y[n-1] are the
        corresponding y coordinates (latitudes for the PLplot supplied
        data).  After the call to mapform(), x[] and y[] should be
        replaced by the corresponding plot coordinates. If no transform is
        desired, mapform can be replaced by NULL.

    name (PLCHAR_VECTOR, input) :    An ascii character string specifying
        the type of map plotted. This is either one of the PLplot built-in
        maps or the file name of a set of Shapefile files without the file
        extensions. For the PLplot built-in maps the possible values are:
        \"globe\" -- continental outlines
            \"usa\" -- USA and state boundaries
            \"cglobe\" -- continental outlines and countries
            \"usaglobe\" -- USA, state boundaries and continental outlines


    minx (PLFLT, input) :    The minimum x value of map elements to be
        drawn. The units must match the shapefile (built in maps are
        degrees lat/lon). Objects in the file which do not encroach on the
        box defined by minx, maxx, miny, maxy will not be rendered. But
        note this is simply an optimisation, not a clipping so for objects
        with some points inside the box and some points outside the box
        all the points will be rendered. These parameters also define
        latitude and longitude wrapping for shapefiles using these units.
        Longitude points will be wrapped by integer multiples of 360
        degrees to place them in the box. This allows the same data to be
        used on plots from -180-180 or 0-360 longitude ranges. In fact if
        you plot from -180-540 you will get two cycles of data drawn. The
        value of minx must be less than the value of maxx. Passing in a
        nan, max/-max floating point number or +/-infinity will case the
        bounding box from the shapefile to be used.

    maxx (PLFLT, input) :    The maximum x value of map elements to be
        drawn - see minx.

    miny (PLFLT, input) :    The minimum y value of map elements to be
        drawn - see minx.

    maxy (PLFLT, input) :    The maximum y value of map elements to be
        drawn - see minx.
")
plmap;

%feature( "docstring", "Plot all or a subset of Shapefile data, filling the polygons

DESCRIPTION:

    As per plmapline, however the items are filled in the same way as
    plfill.

    Redacted form: plmapfill(mapform, name, minx, maxx, miny, maxy,
    plotentries)

    This function is used in example 19.



SYNOPSIS:

plmapfill(mapform, name, minx, maxx, miny, maxy, plotentries, nplotentries)

ARGUMENTS:

    mapform (PLMAPFORM_callback, input) :    A user supplied function to
        transform the coordinates given in the shapefile into a plot
        coordinate system. By using this transform, we can change from a
        longitude, latitude coordinate to a polar stereographic project,
        for example.  Initially, x[0]..[n-1] are the longitudes and
        y[0]..y[n-1] are the corresponding latitudes.  After the call to
        mapform(), x[] and y[] should be replaced by the corresponding
        plot coordinates. If no transform is desired, mapform can be
        replaced by NULL.

    name (PLCHAR_VECTOR, input) :    An ascii character string specifying
        the file name of a set of Shapefile files without the file
        extension.

    minx (PLFLT, input) :    The minimum x value to be plotted. This must
        be in the same units as used by the Shapefile. You could use a
        very large negative number to plot everything, but you can improve
        performance by limiting the area drawn. The units must match those
        of the Shapefile projection, which may be for example longitude or
        distance. The value of minx must be less than the value of maxx.

    maxx (PLFLT, input) :    The maximum x value to be plotted. You could
        use a very large number to plot everything, but you can improve
        performance by limiting the area drawn.

    miny (PLFLT, input) :    The minimum y value to be plotted. This must
        be in the same units as used by the Shapefile. You could use a
        very large negative number to plot everything, but you can improve
        performance by limiting the area drawn. The units must match those
        of the Shapefile projection, which may be for example latitude or
        distance. The value of miny must be less than the value of maxy.

    maxy (PLFLT, input) :    The maximum y value to be plotted. You could
        use a very large number to plot everything, but you can improve
        performance by limiting the area drawn.

    plotentries (PLINT_VECTOR, input) :    A vector containing the
        zero-based indices of the Shapefile elements which will be drawn.
        Setting
    plotentries to NULL will plot all elements of the Shapefile.

    nplotentries (PLINT, input) :    The number of items in
    plotentries. Ignored if
    plotentries is NULL.
")
plmapfill;

%feature( "docstring", "Plot all or a subset of Shapefile data using lines in world coordinates

DESCRIPTION:

    Plot all or a subset of Shapefile data using lines in world
    coordinates. Our 19th standard example demonstrates how to use this
    function. This function plots data from a Shapefile using lines as in
    plmap, however it also has the option of also only drawing specified
    elements from the Shapefile. The vector of indices of the required
    elements are passed as a function argument. The Shapefile data should
    include a metadata file (extension.dbf) listing all items within the
    Shapefile. This file can be opened by most popular spreadsheet
    programs and can be used to decide which indices to pass to this
    function.

    Redacted form: plmapline(mapform, name, minx, maxx, miny, maxy,
    plotentries)

    This function is used in example 19.



SYNOPSIS:

plmapline(mapform, name, minx, maxx, miny, maxy, plotentries, nplotentries)

ARGUMENTS:

    mapform (PLMAPFORM_callback, input) :    A user supplied function to
        transform the coordinates given in the shapefile into a plot
        coordinate system. By using this transform, we can change from a
        longitude, latitude coordinate to a polar stereographic project,
        for example.  Initially, x[0]..[n-1] are the longitudes and
        y[0]..y[n-1] are the corresponding latitudes.  After the call to
        mapform(), x[] and y[] should be replaced by the corresponding
        plot coordinates. If no transform is desired, mapform can be
        replaced by NULL.

    name (PLCHAR_VECTOR, input) :    An ascii character string specifying
        the file name of a set of Shapefile files without the file
        extension.

    minx (PLFLT, input) :    The minimum x value to be plotted. This must
        be in the same units as used by the Shapefile. You could use a
        very large negative number to plot everything, but you can improve
        performance by limiting the area drawn. The units must match those
        of the Shapefile projection, which may be for example longitude or
        distance. The value of minx must be less than the value of maxx.

    maxx (PLFLT, input) :    The maximum x value to be plotted. You could
        use a very large number to plot everything, but you can improve
        performance by limiting the area drawn.

    miny (PLFLT, input) :    The minimum y value to be plotted. This must
        be in the same units as used by the Shapefile. You could use a
        very large negative number to plot everything, but you can improve
        performance by limiting the area drawn. The units must match those
        of the Shapefile projection, which may be for example latitude or
        distance. The value of miny must be less than the value of maxy.

    maxy (PLFLT, input) :    The maximum y value to be plotted. You could
        use a very large number to plot everything, but you can improve
        performance by limiting the area drawn.

    plotentries (PLINT_VECTOR, input) :    A vector containing the
        zero-based indices of the Shapefile elements which will be drawn.
        Setting
    plotentries to NULL will plot all elements of the Shapefile.

    nplotentries (PLINT, input) :    The number of items in
    plotentries.  Ignored if
    plotentries is NULL.
")
plmapline;

%feature( "docstring", "Plot all or a subset of Shapefile data using strings or points in world coordinates

DESCRIPTION:

    As per plmapline, however the items are plotted as strings or points
    in the same way as plstring.

    Redacted form: plmapstring(mapform, name, string, minx, maxx, miny,
    maxy, plotentries)

    This function is not used in any examples.



SYNOPSIS:

plmapstring(mapform, name, string, minx, maxx, miny, maxy, plotentries, nplotentries)

ARGUMENTS:

    mapform (PLMAPFORM_callback, input) :    A user supplied function to
        transform the coordinates given in the shapefile into a plot
        coordinate system. By using this transform, we can change from a
        longitude, latitude coordinate to a polar stereographic project,
        for example.  Initially, x[0]..[n-1] are the longitudes and
        y[0]..y[n-1] are the corresponding latitudes.  After the call to
        mapform(), x[] and y[] should be replaced by the corresponding
        plot coordinates. If no transform is desired, mapform can be
        replaced by NULL.

    name (PLCHAR_VECTOR, input) :    An ascii character string specifying
        the file name of a set of Shapefile files without the file
        extension.

    string (PLCHAR_VECTOR, input) :    A UTF-8 character string to be
        drawn.

    minx (PLFLT, input) :    The minimum x value to be plotted. This must
        be in the same units as used by the Shapefile. You could use a
        very large negative number to plot everything, but you can improve
        performance by limiting the area drawn. The units must match those
        of the Shapefile projection, which may be for example longitude or
        distance. The value of minx must be less than the value of maxx.

    maxx (PLFLT, input) :    The maximum x value to be plotted. You could
        use a very large number to plot everything, but you can improve
        performance by limiting the area drawn.

    miny (PLFLT, input) :    The minimum y value to be plotted. This must
        be in the same units as used by the Shapefile. You could use a
        very large negative number to plot everything, but you can improve
        performance by limiting the area drawn. The units must match those
        of the Shapefile projection, which may be for example latitude or
        distance. The value of miny must be less than the value of maxy.

    maxy (PLFLT, input) :    The maximum y value to be plotted. You could
        use a very large number to plot everything, but you can improve
        performance by limiting the area drawn.

    plotentries (PLINT_VECTOR, input) :    A vector containing the
        zero-based indices of the Shapefile elements which will be drawn.
        Setting
    plotentries to NULL will plot all elements of the Shapefile.

    nplotentries (PLINT, input) :    The number of items in
    plotentries.  Ignored if
    plotentries is NULL.
")
plmapstring;

%feature( "docstring", "Draw text at points defined by Shapefile data in world coordinates

DESCRIPTION:

    As per plmapline, however the items are plotted as text in the same
    way as plptex.

    Redacted form: plmaptex(mapform, name, dx, dy, just, text, minx, maxx,
    miny, maxy, plotentry)

    This function is used in example 19.



SYNOPSIS:

plmaptex(mapform, name, dx, dy, just, text, minx, maxx, miny, maxy, plotentry)

ARGUMENTS:

    mapform (PLMAPFORM_callback, input) :    A user supplied function to
        transform the coordinates given in the shapefile into a plot
        coordinate system. By using this transform, we can change from a
        longitude, latitude coordinate to a polar stereographic project,
        for example.  Initially, x[0]..[n-1] are the longitudes and
        y[0]..y[n-1] are the corresponding latitudes.  After the call to
        mapform(), x[] and y[] should be replaced by the corresponding
        plot coordinates. If no transform is desired, mapform can be
        replaced by NULL.

    name (PLCHAR_VECTOR, input) :    An ascii character string specifying
        the file name of a set of Shapefile files without the file
        extension.

    dx (PLFLT, input) :    Used to define the slope of the texts which is
        dy/dx.

    dy (PLFLT, input) :    Used to define the slope of the texts which is
        dy/dx.

    just (PLFLT, input) :    Set the justification of the text. The value
        given will be the fraction of the distance along the string that
        sits at the given point. 0.0 gives left aligned text, 0.5 gives
        centralized text and 1.0 gives right aligned text.

    text (PLCHAR_VECTOR, input) :    A UTF-8 character string to be drawn.

    minx (PLFLT, input) :    The minimum x value to be plotted. This must
        be in the same units as used by the Shapefile. You could use a
        very large negative number to plot everything, but you can improve
        performance by limiting the area drawn. The units must match those
        of the Shapefile projection, which may be for example longitude or
        distance. The value of minx must be less than the value of maxx.

    maxx (PLFLT, input) :    The maximum x value to be plotted. You could
        use a very large number to plot everything, but you can improve
        performance by limiting the area drawn.

    miny (PLFLT, input) :    The minimum y value to be plotted. This must
        be in the same units as used by the Shapefile. You could use a
        very large negative number to plot everything, but you can improve
        performance by limiting the area drawn. The units must match those
        of the Shapefile projection, which may be for example latitude or
        distance. The value of miny must be less than the value of maxy.

    maxy (PLFLT, input) :    The maximum y value to be plotted. You could
        use a very large number to plot everything, but you can improve
        performance by limiting the area drawn.

    plotentry (PLINT, input) :    An integer indicating which text string
        of the Shapefile (zero indexed) will be drawn.
")
plmaptex;

%feature( "docstring", "Plot latitude and longitude lines

DESCRIPTION:

    Displays latitude and longitude on the current plot.  The lines are
    plotted in the current color and line style.

    Redacted form: plmeridians(mapform, dlong, dlat, minlong, maxlong,
    minlat, maxlat)

    This function is used in example 19.



SYNOPSIS:

plmeridians(mapform, dlong, dlat, minlong, maxlong, minlat, maxlat)

ARGUMENTS:

    mapform (PLMAPFORM_callback, input) :    A user supplied function to
        transform the coordinate longitudes and latitudes to a plot
        coordinate system. By using this transform, we can change from a
        longitude, latitude coordinate to a polar stereographic project,
        for example.  Initially, x[0]..[n-1] are the longitudes and
        y[0]..y[n-1] are the corresponding latitudes.  After the call to
        mapform(), x[] and y[] should be replaced by the corresponding
        plot coordinates. If no transform is desired, mapform can be
        replaced by NULL.

    dlong (PLFLT, input) :    The interval in degrees at which the
        longitude lines are to be plotted.

    dlat (PLFLT, input) :    The interval in degrees at which the latitude
        lines are to be plotted.

    minlong (PLFLT, input) :    The value of the longitude on the left
        side of the plot. The value of minlong must be less than the value
        of maxlong, and the quantity maxlong-minlong must be less than or
        equal to 360.

    maxlong (PLFLT, input) :    The value of the longitude on the right
        side of the plot.

    minlat (PLFLT, input) :    The minimum latitude to be plotted on the
        background. One can always use -90.0 as the boundary outside the
        plot window will be automatically eliminated.  However, the
        program will be faster if one can reduce the size of the
        background plotted.

    maxlat (PLFLT, input) :    The maximum latitudes to be plotted on the
        background. One can always use 90.0 as the boundary outside the
        plot window will be automatically eliminated.
")
plmeridians;

%feature( "docstring", "Plot surface mesh

DESCRIPTION:

    Plots a surface mesh within the environment set up by plw3d.  The
    surface is defined by the matrix z[
    nx][
    ny] , the point z[i][j] being the value of the function at (
    x[i],
    y[j]). Note that the points in vectors x and y do not need to be
    equally spaced, but must be stored in ascending order.  The parameter
    opt controls the way in which the surface is displayed.  For further
    details see the PLplot documentation.

    Redacted form: plmesh(x, y, z, opt)

    This function is used in example 11.



SYNOPSIS:

plmesh(x, y, z, nx, ny, opt)

ARGUMENTS:

    x (PLFLT_VECTOR, input) :    A vector containing the x coordinates at
        which the function is evaluated.

    y (PLFLT_VECTOR, input) :    A vector containing the y coordinates at
        which the function is evaluated.

    z (PLFLT_MATRIX, input) :    A matrix containing function values to
        plot.  Should have dimensions of
    nx by
    ny.

    nx (PLINT, input) :    Number of x values at which function has been
        evaluated.

    ny (PLINT, input) :    Number of y values at which function has been
        evaluated.

    opt (PLINT, input) :    Determines the way in which the surface is
        represented: opt=DRAW_LINEX : Lines are drawn showing z as a
        function of x for each value of y[j] .
            opt=DRAW_LINEY : Lines are drawn showing z as a function of y
            for each value of x[i] .
            opt=DRAW_LINEXY : Network of lines is drawn connecting points
            at which function is defined.
")
#ifdef SWIG_OCTAVE
my_plmesh;
#else
plmesh;
#endif

%feature( "docstring", "Magnitude colored plot surface mesh with contour

DESCRIPTION:

    A more powerful form of plmesh: the surface mesh can be colored
    accordingly to the current z value being plotted, a contour plot can
    be drawn at the base XY plane, and a curtain can be drawn between the
    plotted function border and the base XY plane.

    Redacted form: plmeshc(x, y, z, opt, clevel)

    This function is used in example 11.



SYNOPSIS:

plmeshc(x, y, z, nx, ny, opt, clevel, nlevel)

ARGUMENTS:

    x (PLFLT_VECTOR, input) :    A vector containing the x coordinates at
        which the function is evaluated.

    y (PLFLT_VECTOR, input) :    A vector containing the y coordinates at
        which the function is evaluated.

    z (PLFLT_MATRIX, input) :    A matrix containing function values to
        plot.  Should have dimensions of
    nx by
    ny.

    nx (PLINT, input) :    Number of x values at which function is
        evaluated.

    ny (PLINT, input) :    Number of y values at which function is
        evaluated.

    opt (PLINT, input) :    Determines the way in which the surface is
        represented. To specify more than one option just add the options,
        e.g. DRAW_LINEXY + MAG_COLOR opt=DRAW_LINEX : Lines are drawn
        showing z as a function of x for each value of y[j] .
            opt=DRAW_LINEY : Lines are drawn showing z as a function of y
            for each value of x[i] .
            opt=DRAW_LINEXY : Network of lines is drawn connecting points
            at which function is defined.
            opt=MAG_COLOR : Each line in the mesh is colored according to
            the z value being plotted. The color is used from the current
            cmap1.
            opt=BASE_CONT : A contour plot is drawn at the base XY plane
            using parameters
    nlevel and
    clevel.
            opt=DRAW_SIDES : draws a curtain between the base XY plane and
            the borders of the plotted function.


    clevel (PLFLT_VECTOR, input) :    A vector containing the contour
        levels.

    nlevel (PLINT, input) :    Number of elements in the clevel vector.
")
#ifdef SWIG_OCTAVE
my_plmeshc;
#else
plmeshc;
#endif

%feature( "docstring", "Creates a new stream and makes it the default

DESCRIPTION:

    Creates a new stream and makes it the default.  Differs from using
    plsstrm, in that a free stream number is found, and returned.
    Unfortunately, I have to start at stream 1 and work upward, since
    stream 0 is preallocated.  One of the big flaws in the PLplot API is
    that no initial, library-opening call is required.  So stream 0 must
    be preallocated, and there is no simple way of determining whether it
    is already in use or not.

    Redacted form: plmkstrm(p_strm)

    This function is used in examples 1 and 20.



SYNOPSIS:

plmkstrm(p_strm)

ARGUMENTS:

    p_strm (PLINT_NC_SCALAR, output) :    Returned value of the stream
        number of the created stream.
")
plmkstrm;

%feature( "docstring", "Write text relative to viewport boundaries

DESCRIPTION:

    Writes text at a specified position relative to the viewport
    boundaries.  Text may be written inside or outside the viewport, but
    is clipped at the subpage boundaries.  The reference point of a string
    lies along a line passing through the string at half the height of a
    capital letter.  The position of the reference point along this line
    is determined by just, and the position of the reference point
    relative to the viewport is set by disp and pos.

    Redacted form: General: plmtex(side, disp, pos, just, text)


    This function is used in examples 3, 4, 6-8, 11, 12, 14, 18, 23, and
    26.



SYNOPSIS:

plmtex(side, disp, pos, just, text)

ARGUMENTS:

    side (PLCHAR_VECTOR, input) :    An ascii character string specifying
        the side of the viewport along which the text is to be written.
        The string must be one of: b: Bottom of viewport, text written
        parallel to edge.
            bv: Bottom of viewport, text written at right angles to edge.
            l: Left of viewport, text written parallel to edge.
            lv: Left of viewport, text written at right angles to edge.
            r: Right of viewport, text written parallel to edge.
            rv: Right of viewport, text written at right angles to edge.
            t: Top of viewport, text written parallel to edge.
            tv: Top of viewport, text written at right angles to edge.


    disp (PLFLT, input) :    Position of the reference point of string,
        measured outwards from the specified viewport edge in units of the
        current character height.  Use negative disp to write within the
        viewport.

    pos (PLFLT, input) :    Position of the reference point of string
        along the specified edge, expressed as a fraction of the length of
        the edge.

    just (PLFLT, input) :    Specifies the position of the string relative
        to its reference point.  If just=0. , the reference point is at
        the left and if just=1. , it is at the right of the string.  Other
        values of just give intermediate justifications.

    text (PLCHAR_VECTOR, input) :    A UTF-8 character string to be
        written out.
")
plmtex;

%feature( "docstring", "Write text relative to viewport boundaries in 3D plots

DESCRIPTION:

    Writes text at a specified position relative to the viewport
    boundaries.  Text may be written inside or outside the viewport, but
    is clipped at the subpage boundaries.  The reference point of a string
    lies along a line passing through the string at half the height of a
    capital letter.  The position of the reference point along this line
    is determined by just, and the position of the reference point
    relative to the viewport is set by disp and pos.

    Redacted form: plmtex3(side, disp, pos, just, text)

    This function is used in example 28.



SYNOPSIS:

plmtex3(side, disp, pos, just, text)

ARGUMENTS:

    side (PLCHAR_VECTOR, input) :    An ascii character string specifying
        the side of the viewport along which the text is to be written.
        The string should contain one or more of the following characters:
        [xyz][ps][v]. Only one label is drawn at a time, i.e. xyp will
        only label the X axis, not both the X and Y axes. x: Label the X
        axis.
            y: Label the Y axis.
            z: Label the Z axis.
            p: Label the primary axis. For Z this is the leftmost Z axis.
            For X it is the axis that starts at y-min. For Y it is the
            axis that starts at x-min.
            s: Label the secondary axis.
            v: Draw the text perpendicular to the axis.


    disp (PLFLT, input) :    Position of the reference point of string,
        measured outwards from the specified viewport edge in units of the
        current character height.  Use negative disp to write within the
        viewport.

    pos (PLFLT, input) :    Position of the reference point of string
        along the specified edge, expressed as a fraction of the length of
        the edge.

    just (PLFLT, input) :    Specifies the position of the string relative
        to its reference point.  If just=0. , the reference point is at
        the left and if just=1. , it is at the right of the string.  Other
        values of just give intermediate justifications.

    text (PLCHAR_VECTOR, input) :    A UTF-8 character string to be
        written out.
")
plmtex3;

%feature( "docstring", "Plot 3-d surface plot

DESCRIPTION:

    Plots a three-dimensional surface plot within the environment set up
    by plw3d.  The surface is defined by the matrix z[
    nx][
    ny] , the point z[i][j] being the value of the function at (
    x[i],
    y[j]). Note that the points in vectors x and y do not need to be
    equally spaced, but must be stored in ascending order.  The parameter
    opt controls the way in which the surface is displayed.  For further
    details see the PLplot documentation. The only difference between
    plmesh and plot3d is that plmesh draws the bottom side of the surface,
    while plot3d only draws the surface as viewed from the top.

    Redacted form: plot3d(x, y, z, opt, side)

    This function is used in examples 11 and 21.



SYNOPSIS:

plot3d(x, y, z, nx, ny, opt, side)

ARGUMENTS:

    x (PLFLT_VECTOR, input) :    A vector containing the x coordinates at
        which the function is evaluated.

    y (PLFLT_VECTOR, input) :    A vector containing the y coordinates at
        which the function is evaluated.

    z (PLFLT_MATRIX, input) :    A matrix containing function values to
        plot.  Should have dimensions of
    nx by
    ny.

    nx (PLINT, input) :    Number of x values at which function is
        evaluated.

    ny (PLINT, input) :    Number of y values at which function is
        evaluated.

    opt (PLINT, input) :    Determines the way in which the surface is
        represented: opt=DRAW_LINEX : Lines are drawn showing z as a
        function of x for each value of y[j] .
            opt=DRAW_LINEY : Lines are drawn showing z as a function of y
            for each value of x[i] .
            opt=DRAW_LINEXY : Network of lines is drawn connecting points
            at which function is defined.


    side (PLBOOL, input) :    Flag to indicate whether or not ``sides''
        should be draw on the figure.  If side is true sides are drawn,
        otherwise no sides are drawn.
")
#ifdef SWIG_OCTAVE
my_plot3d;
#else
plot3d;
#endif

%feature( "docstring", "Magnitude colored plot surface with contour

DESCRIPTION:

    Aside from dropping the
    side functionality this is a more powerful form of plot3d: the surface
    mesh can be colored accordingly to the current z value being plotted,
    a contour plot can be drawn at the base XY plane, and a curtain can be
    drawn between the plotted function border and the base XY plane. The
    arguments are identical to those of plmeshc. The only difference
    between plmeshc and plot3dc is that plmeshc draws the bottom side of
    the surface, while plot3dc only draws the surface as viewed from the
    top.

    Redacted form: General: plot3dc(x, y, z, opt, clevel)


    This function is used in example 21.



SYNOPSIS:

plot3dc(x, y, z, nx, ny, opt, clevel, nlevel)

ARGUMENTS:

    x (PLFLT_VECTOR, input) :    A vector containing the x coordinates at
        which the function is evaluated.

    y (PLFLT_VECTOR, input) :    A vector containing the y coordinates at
        which the function is evaluated.

    z (PLFLT_MATRIX, input) :    A matrix containing function values to
        plot.  Should have dimensions of
    nx by
    ny.

    nx (PLINT, input) :    Number of x values at which function is
        evaluated.

    ny (PLINT, input) :    Number of y values at which function is
        evaluated.

    opt (PLINT, input) :    Determines the way in which the surface is
        represented. To specify more than one option just add the options,
        e.g. DRAW_LINEXY + MAG_COLOR opt=DRAW_LINEX : Lines are drawn
        showing z as a function of x for each value of y[j] .
            opt=DRAW_LINEY : Lines are drawn showing z as a function of y
            for each value of x[i] .
            opt=DRAW_LINEXY : Network of lines is drawn connecting points
            at which function is defined.
            opt=MAG_COLOR : Each line in the mesh is colored according to
            the z value being plotted. The color is used from the current
            cmap1.
            opt=BASE_CONT : A contour plot is drawn at the base XY plane
            using parameters
    nlevel and
    clevel.
            opt=DRAW_SIDES : draws a curtain between the base XY plane and
            the borders of the plotted function.


    clevel (PLFLT_VECTOR, input) :    A vector containing the contour
        levels.

    nlevel (PLINT, input) :    Number of elements in the clevel vector.
")
#ifdef SWIG_OCTAVE
my_plot3dc;
#else
plot3dc;
#endif

%feature( "docstring", "Magnitude colored plot surface with contour for z[x][y] with y index limits

DESCRIPTION:

    When the implementation is completed this variant of plot3dc (see that
    function's documentation for more details) should be suitable for the
    case where the area of the x, y coordinate grid where z is defined can
    be non-rectangular. The implementation is incomplete so the last 4
    parameters of plot3dcl; indexxmin, indexxmax, indexymin, and
    indexymax; are currently ignored and the functionality is otherwise
    identical to that of plot3dc.

    Redacted form: General: plot3dcl(x, y, z, opt, clevel, indexxmin,
    indexymin, indexymax)


    This function is not used in any example.



SYNOPSIS:

plot3dcl(x, y, z, nx, ny, opt, clevel, nlevel, indexxmin, indexxmax, indexymin, indexymax)

ARGUMENTS:

    x (PLFLT_VECTOR, input) :    A vector containing the x coordinates at
        which the function is evaluated.

    y (PLFLT_VECTOR, input) :    A vector containing the y coordinates at
        which the function is evaluated.

    z (PLFLT_MATRIX, input) :    A matrix containing function values to
        plot.  Should have dimensions of
    nx by
    ny.

    nx (PLINT, input) :    Number of x values at which the function is
        evaluated.

    ny (PLINT, input) :    Number of y values at which the function is
        evaluated.

    opt (PLINT, input) :    Determines the way in which the surface is
        represented. To specify more than one option just add the options,
        e.g. DRAW_LINEXY + MAG_COLOR opt=DRAW_LINEX : Lines are drawn
        showing z as a function of x for each value of y[j] .
            opt=DRAW_LINEY : Lines are drawn showing z as a function of y
            for each value of x[i] .
            opt=DRAW_LINEXY : Network of lines is drawn connecting points
            at which function is defined.
            opt=MAG_COLOR : Each line in the mesh is colored according to
            the z value being plotted. The color is used from the current
            cmap1.
            opt=BASE_CONT : A contour plot is drawn at the base XY plane
            using parameters
    nlevel and
    clevel.
            opt=DRAW_SIDES : draws a curtain between the base XY plane and
            the borders of the plotted function.


    clevel (PLFLT_VECTOR, input) :    A vector containing the contour
        levels.

    nlevel (PLINT, input) :    Number of elements in the clevel vector.

    indexxmin (PLINT, input) :    The index value (which must be ≥ 0) that
        corresponds to the first x index where z is defined.

    indexxmax (PLINT, input) :    The index value (which must be ≤ nx)
        which corresponds (by convention) to one more than the last x
        index value where z is defined.

    indexymin (PLINT_VECTOR, input) :    A vector containing y index
        values which all must be ≥ 0.  These values are the first y index
        where z is defined for a particular x index in the range from
        indexxmin to indexxmax - 1. The dimension of indexymin is
        indexxmax.

    indexymax (PLINT_VECTOR, input) :    A vector containing y index
        values which all must be ≤ ny. These values correspond (by
        convention) to one more than the last y index where z is defined
        for a particular x index in the range from indexxmin to indexxmax
        - 1.  The dimension of indexymax is indexxmax.
")
#ifdef SWIG_OCTAVE
my_plot3dcl;
#else
plot3dcl;
#endif

%feature( "docstring", "Parse command-line arguments

DESCRIPTION:

    Parse command-line arguments.

    plparseopts removes all recognized flags (decreasing argc
    accordingly), so that invalid input may be readily detected.  It can
    also be used to process user command line flags.  The user can merge
    an option table of type PLOptionTable into the internal option table
    info structure using plMergeOpts.  Or, the user can specify that ONLY
    the external table(s) be parsed by calling plClearOpts before
    plMergeOpts.

    The default action taken by plparseopts is as follows:
    Returns with an error if an unrecognized option or badly formed
    option-value pair are encountered.
    Returns immediately (return code 0) when the first non-option command
    line argument is found.
    Returns with the return code of the option handler, if one was called.

    Deletes command line arguments from argv list as they are found, and
    decrements argc accordingly.
    Does not show \"invisible\" options in usage or help messages.
    Assumes the program name is contained in argv[0].

    These behaviors may be controlled through the
    mode argument.

    Redacted form: General: plparseopts(argv, mode)


    This function is used in all of the examples.



SYNOPSIS:

PLINT plparseopts(p_argc, argv, mode)

ARGUMENTS:

    p_argc (int *, input/output) :    Number of arguments.

    argv (PLCHAR_NC_MATRIX, input/output) :    A vector of character
        strings containing *p_argc command-line arguments.

    mode (PLINT, input) :    Parsing mode with the following
        possibilities: PL_PARSE_FULL (1) -- Full parsing of command line
        and all error messages enabled, including program exit when an
        error occurs.  Anything on the command line that isn't recognized
        as a valid option or option argument is flagged as an error.
            PL_PARSE_QUIET (2) -- Turns off all output except in the case
            of errors.
            PL_PARSE_NODELETE (4) -- Turns off deletion of processed
            arguments.
            PL_PARSE_SHOWALL (8) -- Show invisible options
            PL_PARSE_NOPROGRAM (32) -- Specified if argv[0] is NOT a
            pointer to the program name.
            PL_PARSE_NODASH (64) -- Set if leading dash is NOT required.
            PL_PARSE_SKIP (128) -- Set to quietly skip over any
            unrecognized arguments.
")
plparseopts;

%feature( "docstring", "Set area line fill pattern

DESCRIPTION:

    Sets the area line fill pattern to be used, e.g., for calls to plfill.
    The pattern consists of 1 or 2 sets of parallel lines with specified
    inclinations and spacings.  The arguments to this routine are the
    number of sets to use (1 or 2) followed by two vectors (with 1 or 2
    elements) specifying the inclinations in tenths of a degree and the
    spacing in micrometers.  (See also plpsty)

    Redacted form: General: plpat(inc, del)


    This function is used in example 15.



SYNOPSIS:

plpat(nlin, inc, del)

ARGUMENTS:

    nlin (PLINT, input) :    Number of sets of lines making up the
        pattern, either 1 or 2.

    inc (PLINT_VECTOR, input) :    A vector containing nlin values of the
        inclination in tenths of a degree.  (Should be between -900 and
        900).

    del (PLINT_VECTOR, input) :    A vector containing nlin values of the
        spacing in micrometers between the lines making up the pattern.
")
plpat;

%feature( "docstring", "Draw a line between two points, accounting for coordinate transforms

DESCRIPTION:

    Joins the point (
    x1,
    y1)  to (
    x2,
    y2) .  If a global coordinate transform is defined then the line is
    broken in to n segments to approximate the path.  If no transform is
    defined then this simply acts like a call to pljoin.

    Redacted form: plpath(n,x1,y1,x2,y2)

    This function is used in example 22.



SYNOPSIS:

plpath(n, x1, y1, x2, y2)

ARGUMENTS:

    n (PLINT, input) :    number of points to use to approximate the path.

    x1 (PLFLT, input) :    x coordinate of first point.

    y1 (PLFLT, input) :    y coordinate of first point.

    x2 (PLFLT, input) :    x coordinate of second point.

    y2 (PLFLT, input) :    y coordinate of second point.
")
plpath;

%feature( "docstring", "Plot a glyph at the specified points

DESCRIPTION:

    Plot a glyph at the specified points.  (This function is largely
    superseded by plstring which gives access to many[!] more glyphs.)
    code=-1  means try to just draw a point.  Right now it's just a move
    and a draw at the same place.  Not ideal, since a sufficiently
    intelligent output device may optimize it away, or there may be faster
    ways of doing it.  This is OK for now, though, and offers a 4X speedup
    over drawing a Hershey font \"point\" (which is actually diamond shaped
    and therefore takes 4 strokes to draw).  If 0 < code < 32, then a
    useful (but small subset) of Hershey symbols is plotted.  If 32 <=
    code <= 127 the corresponding printable ASCII character is plotted.

    Redacted form: plpoin(x, y, code)

    This function is used in examples 1, 6, 14, and 29.



SYNOPSIS:

plpoin(n, x, y, code)

ARGUMENTS:

    n (PLINT, input) :    Number of points in the x and y vectors.

    x (PLFLT_VECTOR, input) :    A vector containing the x coordinates of
        points.

    y (PLFLT_VECTOR, input) :    A vector containing the y coordinates of
        points.

    code (PLINT, input) :    Hershey symbol code (in \"ascii-indexed\" form
        with -1 <= code <= 127) corresponding to a glyph to be plotted at
        each of the n points.
")
plpoin;

%feature( "docstring", "Plot a glyph at the specified 3D points

DESCRIPTION:

    Plot a glyph at the specified 3D points.  (This function is largely
    superseded by plstring3 which gives access to many[!] more glyphs.)
    Set up the call to this function similar to what is done for plline3.
    code=-1  means try to just draw a point.  Right now it's just a move
    and a draw at the same place.  Not ideal, since a sufficiently
    intelligent output device may optimize it away, or there may be faster
    ways of doing it.  This is OK for now, though, and offers a 4X speedup
    over drawing a Hershey font \"point\" (which is actually diamond shaped
    and therefore takes 4 strokes to draw).  If 0 < code < 32, then a
    useful (but small subset) of Hershey symbols is plotted.  If 32 <=
    code <= 127 the corresponding printable ASCII character is plotted.

    Redacted form: plpoin3(x, y, z, code)

    This function is not used in any example.



SYNOPSIS:

plpoin3(n, x, y, z, code)

ARGUMENTS:

    n (PLINT, input) :    Number of points in the x and y vectors.

    x (PLFLT_VECTOR, input) :    A vector containing the x coordinates of
        points.

    y (PLFLT_VECTOR, input) :    A vector containing the y coordinates of
        points.

    z (PLFLT_VECTOR, input) :    A vector containing the z coordinates of
        points.

    code (PLINT, input) :    Hershey symbol code (in \"ascii-indexed\" form
        with -1 <= code <= 127) corresponding to a glyph to be plotted at
        each of the n points.
")
plpoin3;

%feature( "docstring", "Draw a polygon in 3 space

DESCRIPTION:

    Draws a polygon in 3 space defined by n points in x, y, and z. Setup
    like plline3, but differs from that function in that plpoly3 attempts
    to determine if the polygon is viewable depending on the order of the
    points within the vector and the value of ifcc.  If the back of
    polygon is facing the viewer, then it isn't drawn.  If this isn't what
    you want, then use plline3 instead.

    The points are assumed to be in a plane, and the directionality of the
    plane is determined from the first three points.  Additional points do
    not have to lie on the plane defined by the first three, but if they
    do not, then the determination of visibility obviously can't be 100%
    accurate... So if you're 3 space polygons are too far from planar,
    consider breaking them into smaller polygons.  3 points define a plane
    :-).

    Bugs:  If one of the first two segments is of zero length, or if they
    are co-linear, the calculation of visibility has a 50/50 chance of
    being correct.  Avoid such situations :-).  See x18c.c for an example
    of this problem. (Search for 20.1).

    Redacted form: plpoly3(x, y, z, code)

    This function is used in example 18.



SYNOPSIS:

plpoly3(n, x, y, z, draw, ifcc)

ARGUMENTS:

    n (PLINT, input) :    Number of points defining line.

    x (PLFLT_VECTOR, input) :    A vector containing
    n x coordinates of points.

    y (PLFLT_VECTOR, input) :    A vector containing
    n y coordinates of points.

    z (PLFLT_VECTOR, input) :    A vector containing
    n z coordinates of points.

    draw (PLBOOL_VECTOR, input) :    A vector containing
    n-1 Boolean values which control drawing the segments of the polygon.
        If draw[i] is true, then the polygon segment from index [i] to
        [i+1] is drawn, otherwise, not.

    ifcc (PLBOOL, input) :    If ifcc is true the directionality of the
        polygon is determined by assuming the points are laid out in a
        counter-clockwise order.  Otherwise, the directionality of the
        polygon is determined by assuming the points are laid out in a
        clockwise order.
")
plpoly3;

%feature( "docstring", "Set precision in numeric labels

DESCRIPTION:

    Sets the number of places after the decimal point in numeric labels.

    Redacted form: plprec(setp, prec)

    This function is used in example 29.



SYNOPSIS:

plprec(setp, prec)

ARGUMENTS:

    setp (PLINT, input) :    If setp is equal to 0 then PLplot
        automatically determines the number of places to use after the
        decimal point in numeric labels (like those used to label axes).
        If setp is 1 then prec sets the number of places.

    prec (PLINT, input) :    The number of characters to draw after the
        decimal point in numeric labels.
")
plprec;

%feature( "docstring", "Select area fill pattern

DESCRIPTION:

    If
    patt is zero or less use either a hardware solid fill if the drivers
    have that capability (virtually all do) or fall back to a software
    emulation of a solid fill using the eighth area line fill pattern.  If
    0 <
    patt <= 8, then select one of eight predefined area line fill patterns
    to use (see plpat if you desire other patterns).

    Redacted form: plpsty(patt)

    This function is used in examples 12, 13, 15, 16, and 25.



SYNOPSIS:

plpsty(patt)

ARGUMENTS:

    patt (PLINT, input) :    The desired pattern index. If
    patt is zero or less, then a solid fill is (normally, see qualifiers
        above) used.  For
    patt in the range from 1 to 8 and assuming the driver has not supplied
        line fill capability itself (most deliberately do not so that line
        fill patterns look identical for those drivers), the patterns
        consist of (1) horizontal lines, (2) vertical lines, (3) lines at
        45 degrees, (4) lines at -45 degrees, (5) lines at 30 degrees, (6)
        lines at -30 degrees, (7) both vertical and horizontal lines, and
        (8) lines at both 45 degrees and -45 degrees.
")
plpsty;

%feature( "docstring", "Write text inside the viewport

DESCRIPTION:

    Writes text at a specified position and inclination within the
    viewport.  Text is clipped at the viewport boundaries.  The reference
    point of a string lies along a line passing through the string at half
    the height of a capital letter.  The position of the reference point
    along this line is determined by just, the reference point is placed
    at world coordinates (
    x,
    y)  within the viewport.  The inclination of the string is specified
    in terms of differences of world coordinates making it easy to write
    text parallel to a line in a graph.

    Redacted form: plptex(x, y, dx, dy, just, text)

    This function is used in example 2-4,10,12-14,20,23,24,26.



SYNOPSIS:

plptex(x, y, dx, dy, just, text)

ARGUMENTS:

    x (PLFLT, input) :    x coordinate of reference point of string.

    y (PLFLT, input) :    y coordinate of reference point of string.

    dx (PLFLT, input) :    Together with dy, this specifies the
        inclination of the string.  The baseline of the string is parallel
        to a line joining (
    x,
    y)  to (
    x+
    dx,
    y+
    dy) .

    dy (PLFLT, input) :    Together with dx, this specifies the
        inclination of the string.

    just (PLFLT, input) :    Specifies the position of the string relative
        to its reference point.  If just=0. , the reference point is at
        the left and if just=1. , it is at the right of the string.  Other
        values of just give intermediate justifications.

    text (PLCHAR_VECTOR, input) :    A UTF-8 character string to be
        written out.
")
plptex;

%feature( "docstring", "Write text inside the viewport of a 3D plot

DESCRIPTION:

    Writes text at a specified position and inclination and with a
    specified shear within the viewport.  Text is clipped at the viewport
    boundaries.  The reference point of a string lies along a line passing
    through the string at half the height of a capital letter.  The
    position of the reference point along this line is determined by just,
    and the reference point is placed at world coordinates (
    wx,
    wy,
    wz)  within the viewport. The inclination and shear of the string is
    specified in terms of differences of world coordinates making it easy
    to write text parallel to a line in a graph.

    Redacted form: plptex3(x, y, z, dx, dy, dz, sx, sy, sz, just, text)

    This function is used in example 28.



SYNOPSIS:

plptex3(wx, wy, wz, dx, dy, dz, sx, sy, sz, just, text)

ARGUMENTS:

    wx (PLFLT, input) :    x world coordinate of reference point of
        string.

    wy (PLFLT, input) :    y world coordinate of reference point of
        string.

    wz (PLFLT, input) :    z world coordinate of reference point of
        string.

    dx (PLFLT, input) :    Together with dy and
    dz , this specifies the inclination of the string.  The baseline of
        the string is parallel to a line joining (
    x,
    y,
    z)  to (
    x+
    dx,
    y+
    dy,
    z+
    dz) .

    dy (PLFLT, input) :    Together with dx and
    dz, this specifies the inclination of the string.

    dz (PLFLT, input) :    Together with dx and
    dy, this specifies the inclination of the string.

    sx (PLFLT, input) :    Together with sy and
    sz , this specifies the shear of the string.  The string is sheared so
        that the characters are vertically parallel to a line joining (
    x,
    y,
    z)  to (
    x+
    sx,
    y+
    sy,
    z+
    sz) . If sx =
    sy =
    sz = 0.)  then the text is not sheared.

    sy (PLFLT, input) :    Together with sx and
    sz, this specifies shear of the string.

    sz (PLFLT, input) :    Together with sx and
    sy, this specifies shear of the string.

    just (PLFLT, input) :    Specifies the position of the string relative
        to its reference point.  If just=0. , the reference point is at
        the left and if just=1. , it is at the right of the string.  Other
        values of just give intermediate justifications.

    text (PLCHAR_VECTOR, input) :    A UTF-8 character string to be
        written out.
")
plptex3;

%feature( "docstring", "Random number generator returning a real random number in the range [0,1]

DESCRIPTION:

    Random number generator returning a real random number in the range
    [0,1]. The generator is based on the Mersenne Twister. Most languages
    / compilers provide their own random number generator, and so this is
    provided purely for convenience and to give a consistent random number
    generator across all languages supported by PLplot. This is
    particularly useful for comparing results from the test suite of
    examples.

    Redacted form: plrandd()

    This function is used in examples 17 and 21.



SYNOPSIS:

plrandd()
")
plrandd;

%feature( "docstring", "Replays contents of plot buffer to current device/file

DESCRIPTION:

    Replays contents of plot buffer to current device/file.

    Redacted form: plreplot()

    This function is used in example 1,20.



SYNOPSIS:

plreplot()
")
plreplot;

%feature( "docstring", "Convert RGB color to HLS

DESCRIPTION:

    Convert RGB color coordinates to HLS

    Redacted form: General: plrgbhls(r, g, b, p_h, p_l, p_s)


    This function is used in example 2.



SYNOPSIS:

plrgbhls(r, g, b, p_h, p_l, p_s)

ARGUMENTS:

    r (PLFLT, input) :    Red intensity (0.0-1.0) of the color.

    g (PLFLT, input) :    Green intensity (0.0-1.0) of the color.

    b (PLFLT, input) :    Blue intensity (0.0-1.0) of the color.

    p_h (PLFLT_NC_SCALAR, output) :    Returned value of the hue in
        degrees (0.0-360.0) on the color cylinder.

    p_l (PLFLT_NC_SCALAR, output) :    Returned value of the lightness
        expressed as a fraction (0.0-1.0) of the axis of the color
        cylinder.

    p_s (PLFLT_NC_SCALAR, output) :    Returned value of the saturation
        expressed as a fraction (0.0-1.0) of the radius of the color
        cylinder.
")
plrgbhls;

%feature( "docstring", "Set character size

DESCRIPTION:

    This sets up the size of all subsequent characters drawn.  The actual
    height of a character is the product of the default character size and
    a scaling factor.

    Redacted form: plschr(def, scale)

    This function is used in examples 2, 13, 23, and 24.



SYNOPSIS:

plschr(def, scale)

ARGUMENTS:

    def (PLFLT, input) :    The default height of a character in
        millimeters, should be set to zero if the default height is to
        remain unchanged. For rasterized drivers the dx and dy values
        specified in plspage are used to convert from mm to pixels (note
        the different unit systems used).  This dpi aware scaling is not
        implemented for all drivers yet.

    scale (PLFLT, input) :    Scale factor to be applied to default to get
        actual character height.
")
plschr;

%feature( "docstring", "Set cmap0 colors by 8-bit RGB values

DESCRIPTION:

    Set cmap0 colors using 8-bit RGB values (see the PLplot
    documentation).  This sets the entire color map -- only as many colors
    as specified will be allocated.

    Redacted form: plscmap0(r, g, b)

    This function is used in examples 2 and 24.



SYNOPSIS:

plscmap0(r, g, b, ncol0)

ARGUMENTS:

    r (PLINT_VECTOR, input) :    A vector containing unsigned 8-bit
        integers (0-255) representing the degree of red in the color.

    g (PLINT_VECTOR, input) :    A vector containing unsigned 8-bit
        integers (0-255) representing the degree of green in the color.

    b (PLINT_VECTOR, input) :    A vector containing unsigned 8-bit
        integers (0-255) representing the degree of blue in the color.

    ncol0 (PLINT, input) :    Number of items in the r, g, and b vectors.
")
plscmap0;

%feature( "docstring", "Set cmap0 colors by 8-bit RGB values and PLFLT alpha transparency value

DESCRIPTION:

    Set cmap0 colors using 8-bit RGB values (see the PLplot documentation)
    and PLFLT alpha transparency value.  This sets the entire color map --
    only as many colors as specified will be allocated.

    Redacted form: plscmap0a(r, g, b, alpha)

    This function is used in examples 30.



SYNOPSIS:

plscmap0a(r, g, b, alpha, ncol0)

ARGUMENTS:

    r (PLINT_VECTOR, input) :    A vector containing unsigned 8-bit
        integers (0-255) representing the degree of red in the color.

    g (PLINT_VECTOR, input) :    A vector containing unsigned 8-bit
        integers (0-255) representing the degree of green in the color.

    b (PLINT_VECTOR, input) :    A vector containing unsigned 8-bit
        integers (0-255) representing the degree of blue in the color.

    alpha (PLFLT_VECTOR, input) :    A vector containing values (0.0-1.0)
        representing the alpha transparency of the color.

    ncol0 (PLINT, input) :    Number of items in the r, g, b, and alpha
        vectors.
")
plscmap0a;

%feature( "docstring", "Set number of colors in cmap0

DESCRIPTION:

    Set number of colors in cmap0 (see the PLplot documentation). Allocate
    (or reallocate) cmap0, and fill with default values for those colors
    not previously allocated.  The first 16 default colors are given in
    the plcol0 documentation.  For larger indices the default color is
    red.

    The drivers are not guaranteed to support more than 16 colors.

    Redacted form: plscmap0n(ncol0)

    This function is used in examples 15, 16, and 24.



SYNOPSIS:

plscmap0n(ncol0)

ARGUMENTS:

    ncol0 (PLINT, input) :    Number of colors that will be allocated in
        the cmap0 palette. If this number is zero or less, then the value
        from the previous call to plscmap0n is used and if there is no
        previous call, then a default value is used.
")
plscmap0n;

%feature( "docstring", "Set the cmap1 argument range for continuous color plots

DESCRIPTION:

    Set the cmap1 argument range for continuous color plots that
    corresponds to the range of data values.  The maximum range
    corresponding to the entire cmap1 palette is 0.0-1.0, and the smaller
    the cmap1 argument range that is specified with this routine, the
    smaller the subset of the cmap1 color palette that is used to
    represent the continuous data being plotted.  If
    min_color is greater than
    max_color or
    max_color is greater than 1.0 or
    min_color is less than 0.0 then no change is made to the cmap1
    argument range.  (Use plgcmap1_range to get the cmap1 argument range.)

    Redacted form: plscmap1_range(min_color, max_color)

    This function is currently used in example 33.



SYNOPSIS:

plscmap1_range(min_color, max_color)

ARGUMENTS:

    min_color (PLFLT, input) :    The minimum cmap1 argument.  If less
        than 0.0, then 0.0 is used instead.

    max_color (PLFLT, input) :    The maximum cmap1 argument.  If greater
        than 1.0, then 1.0 is used instead.
")
plscmap1_range;

%feature( "docstring", "Set opaque RGB cmap1 colors values

DESCRIPTION:

    Set opaque cmap1 colors (see the PLplot documentation) using RGB
    vector values.  This function also sets the number of cmap1 colors.
    N.B. Continuous cmap1 colors are indexed with a floating-point index
    in the range from 0.0-1.0 which is linearly transformed (e.g., by
    plcol1) to an integer index of these RGB vectors in the range from 0
    to
    ncol1-1.  So in order for this continuous color model to work
    properly, it is the responsibility of the user of plscmap1 to insure
    that these RGB vectors are continuous functions of their integer
    indices.

    Redacted form: plscmap1(r, g, b)

    This function is used in example 31.



SYNOPSIS:

plscmap1(r, g, b, ncol1)

ARGUMENTS:

    r (PLINT_VECTOR, input) :    A vector that represents (using unsigned
        8-bit integers in the range from 0-255) the degree of red in the
        color as a continuous function of the integer index of the vector.

    g (PLINT_VECTOR, input) :    A vector that represents (using unsigned
        8-bit integers in the range from 0-255) the degree of green in the
        color as a continuous function of the integer index of the vector.

    b (PLINT_VECTOR, input) :    A vector that represents (using unsigned
        8-bit integers in the range from 0-255) the degree of blue in the
        color as a continuous function of the integer index of the vector.

    ncol1 (PLINT, input) :    Number of items in the r, g, and b vectors.
")
plscmap1;

%feature( "docstring", "Set semitransparent cmap1 RGBA colors.

DESCRIPTION:

    Set semitransparent cmap1 colors (see the PLplot documentation) using
    RGBA vector values.  This function also sets the number of cmap1
    colors.  N.B. Continuous cmap1 colors are indexed with a
    floating-point index in the range from 0.0-1.0 which is linearly
    transformed (e.g., by plcol1) to an integer index of these RGBA
    vectors in the range from 0 to
    ncol1-1.  So in order for this continuous color model to work
    properly, it is the responsibility of the user of plscmap1 to insure
    that these RGBA vectors are continuous functions of their integer
    indices.

    Redacted form: plscmap1a(r, g, b, alpha)

    This function is used in example 31.



SYNOPSIS:

plscmap1a(r, g, b, alpha, ncol1)

ARGUMENTS:

    r (PLINT_VECTOR, input) :    A vector that represents (using unsigned
        8-bit integers in the range from 0-255) the degree of red in the
        color as a continuous function of the integer index of the vector.

    g (PLINT_VECTOR, input) :    A vector that represents (using unsigned
        8-bit integers in the range from 0-255) the degree of green in the
        color as a continuous function of the integer index of the vector.

    b (PLINT_VECTOR, input) :    A vector that represents (using unsigned
        8-bit integers in the range from 0-255) the degree of blue in the
        color as a continuous function of the integer index of the vector.

    alpha (PLFLT_VECTOR, input) :    A vector that represents (using PLFLT
        values in the range from 0.0-1.0 where 0.0 corresponds to
        completely transparent and 1.0 corresponds to completely opaque)
        the alpha transparency of the color as a continuous function of
        the integer index of the vector.

    ncol1 (PLINT, input) :    Number of items in the r, g, b, and alpha
        vectors.
")
plscmap1a;

%feature( "docstring", "Set cmap1 colors using a piece-wise linear relationship

DESCRIPTION:

    Set cmap1 colors using a piece-wise linear relationship between the
    cmap1 intensity index (0.0-1.0) and position in HLS or RGB color space
    (see the PLplot documentation).  May be called at any time.

    The idea here is to specify a number of control points that define the
    mapping between input cmap1 intensity indices and HLS or RGB.  Between
    these points, linear interpolation is used which gives a smooth
    variation of color with intensity index.  Any number of control points
    may be specified, located at arbitrary positions, although typically 2
    - 4 are enough. Another way of stating this is that we are traversing
    a given number of lines through HLS or RGB space as we move through
    cmap1 intensity indices.  The control points at the minimum and
    maximum position (0 and 1) must always be specified.  By adding more
    control points you can get more variation.  One good technique for
    plotting functions that vary about some expected average is to use an
    additional 2 control points in the center (position ~= 0.5) that are
    the same lightness as the background (typically white for paper
    output, black for crt), and same hue as the boundary control points.
    This allows the highs and lows to be very easily distinguished.

    Each control point must specify the cmap1 intensity index and the
    associated three coordinates in HLS or RGB space.  The first point
    must correspond to position = 0, and the last to position = 1.

    If RGB colors are provided then the interpolation takes place in RGB
    space and is trivial. However if HLS colors are provided then, because
    of the circular nature of the color wheel for the hue coordinate, the
    interpolation could be performed in either direction around the color
    wheel. The default behaviour is for the hue to be linearly
    interpolated ignoring this circular property of hue. So for example,
    the hues 0 (red) and 240 (blue) will get interpolated via yellow,
    green and cyan. If instead you wish to interpolate the other way
    around the color wheel you have two options. You may provide hues
    outside the range [0, 360), so by using a hue of -120 for blue or 360
    for red the interpolation will proceed via magenta. Alternatively you
    can utilise the alt_hue_path variable to reverse the direction of
    interpolation if you need to provide hues within the [0-360) range.

    Examples of interpolation Huealt_hue_pathcolor scheme[120
    240]falsegreen-cyan-blue[240 120]falseblue-cyan-green[120
    -120]falsegreen-yellow-red-magenta-blue[240
    480]falseblue-magenta-red-yellow-green[120
    240]truegreen-yellow-red-magenta-blue[240
    120]trueblue-magenta-red-yellow-green

    Bounds on coordinatesRGBR[0, 1]magnitudeRGBG[0, 1]magnitudeRGBB[0,
    1]magnitudeHLShue[0, 360]degreesHLSlightness[0,
    1]magnitudeHLSsaturation[0, 1]magnitude

    Redacted form: plscmap1l(itype, intensity, coord1, coord2, coord3,
    alt_hue_path)

    This function is used in examples 8, 11, 12, 15, 20, and 21.



SYNOPSIS:

plscmap1l(itype, npts, intensity, coord1, coord2, coord3, alt_hue_path)

ARGUMENTS:

    itype (PLBOOL, input) :    true: RGB, false: HLS.

    npts (PLINT, input) :    number of control points

    intensity (PLFLT_VECTOR, input) :    A vector containing the cmap1
        intensity index (0.0-1.0) in ascending order for each control
        point.

    coord1 (PLFLT_VECTOR, input) :    A vector containing the first
        coordinate (H or R) for each control point.

    coord2 (PLFLT_VECTOR, input) :    A vector containing the second
        coordinate (L or G) for each control point.

    coord3 (PLFLT_VECTOR, input) :    A vector containing the third
        coordinate (S or B) for each control point.

    alt_hue_path (PLBOOL_VECTOR, input) :    A vector (with
    npts - 1 elements), each containing either true to use the reversed
        HLS interpolation or false to use the regular HLS interpolation.
        (alt_hue_path[i] refers to the interpolation interval between the
        i and i + 1 control points). This parameter is not used for RGB
        colors (
    itype = true).
")
plscmap1l;

%feature( "docstring", "Set cmap1 colors and alpha transparency using a piece-wise linear relationship

DESCRIPTION:

    This is a variant of plscmap1l that supports alpha channel
    transparency. It sets cmap1 colors using a piece-wise linear
    relationship between cmap1 intensity index (0.0-1.0) and position in
    HLS or RGB color space (see the PLplot documentation) with alpha
    transparency value (0.0-1.0). It may be called at any time.

    Redacted form: plscmap1la(itype, intensity, coord1, coord2, coord3,
    alpha, alt_hue_path)

    This function is used in example 30.



SYNOPSIS:

plscmap1la(itype, npts, intensity, coord1, coord2, coord3, alpha, alt_hue_path)

ARGUMENTS:

    itype (PLBOOL, input) :    true: RGB, false: HLS.

    npts (PLINT, input) :    number of control points.

    intensity (PLFLT_VECTOR, input) :    A vector containing the cmap1
        intensity index (0.0-1.0) in ascending order for each control
        point.

    coord1 (PLFLT_VECTOR, input) :    A vector containing the first
        coordinate (H or R) for each control point.

    coord2 (PLFLT_VECTOR, input) :    A vector containing the second
        coordinate (L or G) for each control point.

    coord3 (PLFLT_VECTOR, input) :    A vector containing the third
        coordinate (S or B) for each control point.

    alpha (PLFLT_VECTOR, input) :    A vector containing the alpha
        transparency value (0.0-1.0) for each control point.

    alt_hue_path (PLBOOL_VECTOR, input) :    A vector (with
    npts - 1 elements) containing the alternative interpolation method
        Boolean value for each control point interval.  (alt_hue_path[i]
        refers to the interpolation interval between the i and i + 1
        control points).
")
plscmap1la;

%feature( "docstring", "Set number of colors in cmap1

DESCRIPTION:

    Set number of colors in cmap1, (re-)allocate cmap1, and set default
    values if this is the first allocation (see the PLplot documentation).

    Redacted form: plscmap1n(ncol1)

    This function is used in examples 8, 11, 20, and 21.



SYNOPSIS:

plscmap1n(ncol1)

ARGUMENTS:

    ncol1 (PLINT, input) :    Number of colors that will be allocated in
        the cmap1 palette. If this number is zero or less, then the value
        from the previous call to plscmap1n is used and if there is no
        previous call, then a default value is used.
")
plscmap1n;

%feature( "docstring", "Set 8-bit RGB values for given cmap0 color index

DESCRIPTION:

    Set 8-bit RGB values for given cmap0 (see the PLplot documentation)
    index.  Overwrites the previous color value for the given index and,
    thus, does not result in any additional allocation of space for
    colors.

    Redacted form: plscol0(icol0, r, g, b)

    This function is used in any example 31.



SYNOPSIS:

plscol0(icol0, r, g, b)

ARGUMENTS:

    icol0 (PLINT, input) :    Color index.  Must be less than the maximum
        number of colors (which is set by default, by plscmap0n, or even
        by plscmap0).

    r (PLINT, input) :    Unsigned 8-bit integer (0-255) representing the
        degree of red in the color.

    g (PLINT, input) :    Unsigned 8-bit integer (0-255) representing the
        degree of green in the color.

    b (PLINT, input) :    Unsigned 8-bit integer (0-255) representing the
        degree of blue in the color.
")
plscol0;

%feature( "docstring", "Set 8-bit RGB values and PLFLT alpha transparency value for given cmap0 color index

DESCRIPTION:

    Set 8-bit RGB value and PLFLT alpha transparency value for given cmap0
    (see the PLplot documentation) index.  Overwrites the previous color
    value for the given index and, thus, does not result in any additional
    allocation of space for colors.

    This function is used in example 30.



SYNOPSIS:

plscol0a(icol0, r, g, b, alpha)

ARGUMENTS:

    icol0 (PLINT, input) :    Color index.  Must be less than the maximum
        number of colors (which is set by default, by plscmap0n, or even
        by plscmap0).

    r (PLINT, input) :    Unsigned 8-bit integer (0-255) representing the
        degree of red in the color.

    g (PLINT, input) :    Unsigned 8-bit integer (0-255) representing the
        degree of green in the color.

    b (PLINT, input) :    Unsigned 8-bit integer (0-255) representing the
        degree of blue in the color.

    alpha (PLFLT, input) :    Value of the alpha transparency in the range
        (0.0-1.0).
")
plscol0a;

%feature( "docstring", "Set the background color by 8-bit RGB value

DESCRIPTION:

    Set the background color (color 0 in cmap0) by 8-bit RGB value (see
    the PLplot documentation).

    Redacted form: plscolbg(r, g, b)

    This function is used in examples 15 and 31.



SYNOPSIS:

plscolbg(r, g, b)

ARGUMENTS:

    r (PLINT, input) :    Unsigned 8-bit integer (0-255) representing the
        degree of red in the color.

    g (PLINT, input) :    Unsigned 8-bit integer (0-255) representing the
        degree of green in the color.

    b (PLINT, input) :    Unsigned 8-bit integer (0-255) representing the
        degree of blue in the color.
")
plscolbg;

%feature( "docstring", "Set the background color by 8-bit RGB value and PLFLT alpha transparency value.

DESCRIPTION:

    Set the background color (color 0 in cmap0) by 8-bit RGB value and
    PLFLT alpha transparency value (see the PLplot documentation).

    This function is used in example 31.



SYNOPSIS:

plscolbga(r, g, b, alpha)

ARGUMENTS:

    r (PLINT, input) :    Unsigned 8-bit integer (0-255) representing the
        degree of red in the color.

    g (PLINT, input) :    Unsigned 8-bit integer (0-255) representing the
        degree of green in the color.

    b (PLINT, input) :    Unsigned 8-bit integer (0-255) representing the
        degree of blue in the color.

    alpha (PLFLT, input) :    Value of the alpha transparency in the range
        (0.0-1.0).
")
plscolbga;

%feature( "docstring", "Used to globally turn color output on/off

DESCRIPTION:

    Used to globally turn color output on/off for those drivers/devices
    that support it.

    Redacted form: plscolor(color)

    This function is used in example 31.



SYNOPSIS:

plscolor(color)

ARGUMENTS:

    color (PLINT, input) :    Color flag (Boolean).  If zero, color is
        turned off.  If non-zero, color is turned on.
")
plscolor;

%feature( "docstring", "Set device-compression level

DESCRIPTION:

    Set device-compression level.  Only used for drivers that provide
    compression.  This function, if used, should be invoked before a call
    to plinit.

    Redacted form: plscompression(compression)

    This function is used in example 31.



SYNOPSIS:

plscompression(compression)

ARGUMENTS:

    compression (PLINT, input) :    The desired compression level. This is
        a device-dependent value. Currently only the jpeg and png devices
        use these values. For jpeg value is the jpeg quality which should
        normally be in the range 0-95. Higher values denote higher quality
        and hence larger image sizes. For png values are in the range -1
        to 99. Values of 0-9 are taken as the compression level for zlib.
        A value of -1 denotes the default zlib compression level. Values
        in the range 10-99 are divided by 10 and then used as the zlib
        compression level. Higher compression levels correspond to greater
        compression and small file sizes at the expense of more
        computation.
")
plscompression;

%feature( "docstring", "Set the device (keyword) name

DESCRIPTION:

    Set the device (keyword) name.

    Redacted form: plsdev(devname)

    This function is used in examples 1, 14, and 20.



SYNOPSIS:

plsdev(devname)

ARGUMENTS:

    devname (PLCHAR_VECTOR, input) :    An ascii character string
        containing the device name keyword of the required output device.
        If
    devname is NULL or if the first character of the string is a ``?'',
        the normal (prompted) start up is used.
")
plsdev;

%feature( "docstring", "Set parameters that define current device-space window

DESCRIPTION:

    Set relative margin width, aspect ratio, and relative justification
    that define current device-space window.  If you want to just use the
    previous value for any of these, just pass in the magic value
    PL_NOTSET. It is unlikely that one should ever need to change the
    aspect ratio but it's in there for completeness. If plsdidev is not
    called the default values of mar, jx, and jy are all 0. aspect is set
    to a device-specific value.

    Redacted form: plsdidev(mar, aspect, jx, jy)

    This function is used in example 31.



SYNOPSIS:

plsdidev(mar, aspect, jx, jy)

ARGUMENTS:

    mar (PLFLT, input) :    Relative margin width.

    aspect (PLFLT, input) :    Aspect ratio.

    jx (PLFLT, input) :    Relative justification in x. Value must lie in
        the range -0.5 to 0.5.

    jy (PLFLT, input) :    Relative justification in y. Value must lie in
        the range -0.5 to 0.5.
")
plsdidev;

%feature( "docstring", "Set up transformation from metafile coordinates

DESCRIPTION:

    Set up transformation from metafile coordinates.  The size of the plot
    is scaled so as to preserve aspect ratio.  This isn't intended to be a
    general-purpose facility just yet (not sure why the user would need
    it, for one).

    Redacted form: plsdimap(dimxmin, dimxmax, dimymin, dimymax, dimxpmm,
    dimypmm)

    This function is not used in any examples.



SYNOPSIS:

plsdimap(dimxmin, dimxmax, dimymin, dimymax, dimxpmm, dimypmm)

ARGUMENTS:

    dimxmin (PLINT, input) :    NEEDS DOCUMENTATION

    dimxmax (PLINT, input) :    NEEDS DOCUMENTATION

    dimymin (PLINT, input) :    NEEDS DOCUMENTATION

    dimymax (PLINT, input) :    NEEDS DOCUMENTATION

    dimxpmm (PLFLT, input) :    NEEDS DOCUMENTATION

    dimypmm (PLFLT, input) :    NEEDS DOCUMENTATION
")
plsdimap;

%feature( "docstring", "Set plot orientation

DESCRIPTION:

    Set plot orientation parameter which is multiplied by 90 degrees to
    obtain the angle of rotation.  Note, arbitrary rotation parameters
    such as 0.2 (corresponding to 18 degrees) are possible, but the usual
    values for the rotation parameter are 0., 1., 2., and 3. corresponding
    to 0 degrees (landscape mode), 90 degrees (portrait mode), 180 degrees
    (seascape mode), and 270 degrees (upside-down mode).  If plsdiori is
    not called the default value of rot is 0.

    N.B. aspect ratio is unaffected by calls to plsdiori.  So you will
    probably want to change the aspect ratio to a value suitable for the
    plot orientation using a call to plsdidev or the command-line options
    -a or -freeaspect.  For more documentation of those options see the
    PLplot documentation.  Such command-line options can be set internally
    using plsetopt or set directly using the command line and parsed using
    a call to plparseopts.

    Redacted form: plsdiori(rot)

    This function is not used in any examples.



SYNOPSIS:

plsdiori(rot)

ARGUMENTS:

    rot (PLFLT, input) :    Plot orientation parameter.
")
plsdiori;

%feature( "docstring", "Set parameters that define current plot-space window

DESCRIPTION:

    Set relative minima and maxima that define the current plot-space
    window.  If plsdiplt is not called the default values of xmin, ymin,
    xmax, and ymax are 0., 0., 1., and 1.

    Redacted form: plsdiplt(xmin, ymin, xmax, ymax)

    This function is used in example 31.



SYNOPSIS:

plsdiplt(xmin, ymin, xmax, ymax)

ARGUMENTS:

    xmin (PLFLT, input) :    Relative minimum in x.

    ymin (PLFLT, input) :    Relative minimum in y.

    xmax (PLFLT, input) :    Relative maximum in x.

    ymax (PLFLT, input) :    Relative maximum in y.
")
plsdiplt;

%feature( "docstring", "Set parameters incrementally (zoom mode) that define current plot-space window

DESCRIPTION:

    Set relative minima and maxima incrementally (zoom mode) that define
    the current plot-space window.  This function has the same effect as
    plsdiplt if that function has not been previously called.  Otherwise,
    this function implements zoom mode using the transformation min_used =
    old_min + old_length*min  and max_used = old_min + old_length*max  for
    each axis.  For example, if min = 0.05 and max = 0.95 for each axis,
    repeated calls to plsdiplz will zoom in by 10 per cent for each call.

    Redacted form: plsdiplz(xmin, ymin, xmax, ymax)

    This function is used in example 31.



SYNOPSIS:

plsdiplz(xmin, ymin, xmax, ymax)

ARGUMENTS:

    xmin (PLFLT, input) :    Relative (incremental) minimum in x.

    ymin (PLFLT, input) :    Relative (incremental) minimum in y.

    xmax (PLFLT, input) :    Relative (incremental) maximum in x.

    ymax (PLFLT, input) :    Relative (incremental) maximum in y.
")
plsdiplz;

%feature( "docstring", "Set drawing mode (depends on device support!)

DESCRIPTION:

    Set drawing mode.  Note only one device driver (cairo) currently
    supports this at the moment.  See also plgdrawmode.

    Redacted form: plsdrawmode(mode)

    This function is used in example 34.



SYNOPSIS:

plsdrawmode(mode)

ARGUMENTS:

    mode (PLINT, input) :    Control variable which species the drawing
        mode (one of PL_DRAWMODE_DEFAULT, PL_DRAWMODE_REPLACE, or
        PL_DRAWMODE_XOR) to use.
")
plsdrawmode;

%feature( "docstring", "Set seed for internal random number generator.

DESCRIPTION:

    Set the seed for the internal random number generator. See plrandd for
    further details.

    Redacted form: plseed(seed)

    This function is used in example 21.



SYNOPSIS:

plseed(seed)

ARGUMENTS:

    seed (unsigned int, input) :    Seed for random number generator.
")
plseed;

%feature( "docstring", "Set the escape character for text strings

DESCRIPTION:

    Set the escape character for text strings.  From C (in contrast to
    Fortran, see plsescfortran) you pass esc as a character. Only selected
    characters are allowed to prevent the user from shooting himself in
    the foot (For example, a \ isn't allowed since it conflicts with C's
    use of backslash as a character escape).  Here are the allowed escape
    characters and their corresponding decimal ASCII values: !, ASCII 33
            #, ASCII 35
            $, ASCII 36
            %, ASCII 37
            &, ASCII 38
            *, ASCII 42
            @, ASCII 64
            ^, ASCII 94
            ~, ASCII 126


    Redacted form: General: plsesc(esc)


    This function is used in example 29.



SYNOPSIS:

plsesc(esc)

ARGUMENTS:

    esc (char, input) :    Escape character.
")
plsesc;

%feature( "docstring", "Set any command-line option

DESCRIPTION:

    Set any command-line option internally from a program before it
    invokes plinit. opt is the name of the command-line option and optarg
    is the corresponding command-line option argument.

    This function returns 0 on success.

    Redacted form: plsetopt(opt, optarg)

    This function is used in example 14.



SYNOPSIS:

PLINT plsetopt(opt, optarg)

ARGUMENTS:

    opt (PLCHAR_VECTOR, input) :    An ascii character string containing
        the command-line option.

    optarg (PLCHAR_VECTOR, input) :    An ascii character string
        containing the argument of the command-line option.
")
plsetopt;

%feature( "docstring", "Set family file parameters

DESCRIPTION:

    Sets variables dealing with output file familying.  Does nothing if
    familying not supported by the driver.  This routine, if used, must be
    called before initializing PLplot.  See the PLplot documentation for
    more information.

    Redacted form: plsfam(fam, num, bmax)

    This function is used in examples 14 and 31.



SYNOPSIS:

plsfam(fam, num, bmax)

ARGUMENTS:

    fam (PLINT, input) :    Family flag (Boolean).  If nonzero, familying
        is enabled.

    num (PLINT, input) :    Current family file number.

    bmax (PLINT, input) :    Maximum file size (in bytes) for a family
        file.
")
plsfam;

%feature( "docstring", "Set FCI (font characterization integer)

DESCRIPTION:

    Sets font characteristics to be used at the start of the next string
    using the FCI approach.  See the PLplot documentation for more
    information.  Note, plsfont (which calls plsfci internally) provides a
    more user-friendly API for setting the font characterisitics.

    Redacted form: General: plsfci(fci)


    This function is used in example 23.



SYNOPSIS:

plsfci(fci)

ARGUMENTS:

    fci (PLUNICODE, input) :    PLUNICODE (unsigned 32-bit integer) value
        of FCI.
")
plsfci;

%feature( "docstring", "Set output file name

DESCRIPTION:

    Sets the current output file name, if applicable.  If the file name
    has not been specified and is required by the driver, the user will be
    prompted for it.  If using the X-windows output driver, this sets the
    display name.  This routine, if used, must be called before
    initializing PLplot.

    Redacted form: plsfnam(fnam)

    This function is used in examples 1 and 20.



SYNOPSIS:

plsfnam(fnam)

ARGUMENTS:

    fnam (PLCHAR_VECTOR, input) :    An ascii character string containing
        the file name.
")
plsfnam;

%feature( "docstring", "Set family, style and weight of the current font

DESCRIPTION:

    Sets the current font.  See the PLplot documentation for more
    information on font selection.

    Redacted form: plsfont(family, style, weight)

    This function is used in example 23.



SYNOPSIS:

plsfont(family, style, weight)

ARGUMENTS:

    family (PLINT, input) :    Font family to select for the current font.
        The available values are given by the PL_FCI_* constants in
        plplot.h.  Current options are PL_FCI_SANS, PL_FCI_SERIF,
        PL_FCI_MONO, PL_FCI_SCRIPT and PL_FCI_SYMBOL. A negative value
        signifies that the font family should not be altered.

    style (PLINT, input) :    Font style to select for the current font.
        The available values are given by the PL_FCI_* constants in
        plplot.h.  Current options are PL_FCI_UPRIGHT, PL_FCI_ITALIC and
        PL_FCI_OBLIQUE. A negative value signifies that the font style
        should not be altered.

    weight (PLINT, input) :    Font weight to select for the current font.
        The available values are given by the PL_FCI_* constants in
        plplot.h.  Current options are PL_FCI_MEDIUM and PL_FCI_BOLD. A
        negative value signifies that the font weight should not be
        altered.
")
plsfont;

%feature( "docstring", "Shade regions on the basis of value

DESCRIPTION:

    Shade regions on the basis of value.  This is the high-level routine
    for making continuous color shaded plots with cmap1 while plshade
    should be used to plot individual shaded regions using either cmap0 or
    cmap1. examples/;<language>/x16* shows how to use plshades for each of
    our supported languages.

    Redacted form: General: plshades(a, defined, xmin, xmax, ymin, ymax,
    clevel, fill_width, cont_color, cont_width, fill, rectangular, pltr,
    pltr_data)


    This function is used in examples 16, 21, and 22.



SYNOPSIS:

plshades(a, nx, ny, defined, xmin, xmax, ymin, ymax, clevel, nlevel, fill_width, cont_color, cont_width, fill, rectangular, pltr, pltr_data)

ARGUMENTS:

    a (PLFLT_MATRIX, input) :    A matrix containing function values to
        plot.  Should have dimensions of
    nx by
    ny.

    nx (PLINT, input) :    First dimension of matrix \"a\".

    ny (PLINT, input) :    Second dimension of matrix \"a\".

    defined (PLDEFINED_callback, input) :    Callback function specifying
        the region that should be plotted in the shade plot.  This
        function accepts x and y coordinates as input arguments and must
        return 1 if the point is to be included in the shade plot and 0
        otherwise.  If you want to plot the entire shade plot (the usual
        case), this argument should be set to NULL.

    xmin, xmax, ymin, ymax (PLFLT, input) :    See the discussion of
    pltr below for how these arguments are used (only for the special case
        when the callback function
    pltr is not supplied).

    clevel (PLFLT_VECTOR, input) :    A vector containing the data levels
        corresponding to the edges of each shaded region that will be
        plotted by this function.  To work properly the levels should be
        monotonic.

    nlevel (PLINT, input) :    Number of shades plus 1 (i.e., the number
        of shade edge values in clevel).

    fill_width (PLFLT, input) :    Defines the line width used by the fill
        pattern.

    cont_color (PLINT, input) :    Defines cmap0 pen color used for
        contours defining edges of shaded regions.  The pen color is only
        temporary set for the contour drawing.  Set this value to zero or
        less if no shade edge contours are wanted.

    cont_width (PLFLT, input) :    Defines line width used for contours
        defining edges of shaded regions.  This value may not be honored
        by all drivers. The pen width is only temporary set for the
        contour drawing.  Set this value to zero or less if no shade edge
        contours are wanted.

    fill (PLFILL_callback, input) :    Callback routine used to fill the
        region.  Use plfill for this purpose.

    rectangular (PLBOOL, input) :    Set rectangular to true if rectangles
        map to rectangles after coordinate transformation with pltrl.
        Otherwise, set rectangular to false. If rectangular is set to
        true, plshade tries to save time by filling large rectangles.
        This optimization fails if the coordinate transformation distorts
        the shape of rectangles.  For example a plot in polar coordinates
        has to have rectangular set to false.

    pltr (PLTRANSFORM_callback, input) :    A callback function that
        defines the transformation between the zero-based indices of the
        matrix a and world coordinates. If
    pltr is not supplied (e.g., is set to NULL in the C case), then the x
        indices of a are mapped to the range
    xmin through
    xmax and the y indices of a are mapped to the range
    ymin through
    ymax.For the C case, transformation functions are provided in the
        PLplot library: pltr0 for the identity mapping, and pltr1 and
        pltr2 for arbitrary mappings respectively defined by vectors and
        matrices.  In addition, C callback routines for the transformation
        can be supplied by the user such as the mypltr function in
        examples/c/x09c.c which provides a general linear transformation
        between index coordinates and world coordinates.For languages
        other than C you should consult the PLplot documentation for the
        details concerning how PLTRANSFORM_callback arguments are
        interfaced. However, in general, a particular pattern of
        callback-associated arguments such as a tr vector with 6 elements;
        xg and yg vectors; or xg and yg matrices are respectively
        interfaced to a linear-transformation routine similar to the above
        mypltr function; pltr1; and pltr2. Furthermore, some of our more
        sophisticated bindings (see, e.g., the PLplot documentation)
        support native language callbacks for handling index to
        world-coordinate transformations.  Examples of these various
        approaches are given in examples/<language>x09*,
        examples/<language>x16*, examples/<language>x20*,
        examples/<language>x21*, and examples/<language>x22*, for all our
        supported languages.

    pltr_data (PLPointer, input) :    Extra parameter to help pass
        information to pltr0, pltr1, pltr2, or whatever routine that is
        externally supplied.
")
#ifdef SWIG_OCTAVE
my_plshades;
#else
plshades;
#endif

%feature( "docstring", "Shade individual region on the basis of value

DESCRIPTION:

    Shade individual region on the basis of value.  Use plshades if you
    want to shade a number of contiguous regions using continuous colors.
    In particular the edge contours are treated properly in plshades.  If
    you attempt to do contiguous regions with plshade the contours at the
    edge of the shade are partially obliterated by subsequent plots of
    contiguous shaded regions.

    Redacted form: General: plshade(a, defined, xmin, xmax, ymin, ymax,
    shade_min, shade_max, sh_cmap, sh_color, sh_width, min_color,
    min_width, max_color, max_width, fill, rectangular, pltr, pltr_data)


    This function is used in example 15.



SYNOPSIS:

plshade(a, nx, ny, defined, xmin, xmax, ymin, ymax, shade_min, shade_max, sh_cmap, sh_color, sh_width, min_color, min_width, max_color, max_width, fill, rectangular, pltr, pltr_data)

ARGUMENTS:

    a (PLFLT_MATRIX, input) :    A matrix containing function values to
        plot.  Should have dimensions of
    nx by
    ny.

    nx (PLINT, input) :    First dimension of the matrix \"a\".

    ny (PLINT, input) :    Second dimension of the matrix \"a\".

    defined (PLDEFINED_callback, input) :    Callback function specifying
        the region that should be plotted in the shade plot.  This
        function accepts x and y coordinates as input arguments and must
        return 1 if the point is to be included in the shade plot and 0
        otherwise.  If you want to plot the entire shade plot (the usual
        case), this argument should be set to NULL.

    xmin, xmax, ymin, ymax (PLFLT, input) :    See the discussion of
    pltr below for how these arguments are used (only for the special case
        when the callback function
    pltr is not supplied).

    shade_min (PLFLT, input) :    Defines the lower end of the interval to
        be shaded. If shade_max <= shade_min, plshade does nothing.

    shade_max (PLFLT, input) :    Defines the upper end of the interval to
        be shaded. If shade_max <= shade_min, plshade does nothing.

    sh_cmap (PLINT, input) :    Defines color map. If sh_cmap=0, then
        sh_color is interpreted as a cmap0 (integer) index.  If sh_cmap=1,
        then sh_color is interpreted as a cmap1 argument in the range
        (0.0-1.0).

    sh_color (PLFLT, input) :    Defines color map index with integer
        value if cmap0 or value in range (0.0-1.0) if cmap1.

    sh_width (PLFLT, input) :    Defines width used by the fill pattern.

    min_color (PLINT, input) :    Defines pen color, width used by the
        boundary of shaded region. The min values are used for the
        shade_min boundary, and the max values are used on the shade_max
        boundary.  Set color and width to zero for no plotted boundaries.

    min_width (PLFLT, input) :    Defines pen color, width used by the
        boundary of shaded region. The min values are used for the
        shade_min boundary, and the max values are used on the shade_max
        boundary.  Set color and width to zero for no plotted boundaries.

    max_color (PLINT, input) :    Defines pen color, width used by the
        boundary of shaded region. The min values are used for the
        shade_min boundary, and the max values are used on the shade_max
        boundary.  Set color and width to zero for no plotted boundaries.

    max_width (PLFLT, input) :    Defines pen color, width used by the
        boundary of shaded region. The min values are used for the
        shade_min boundary, and the max values are used on the shade_max
        boundary.  Set color and width to zero for no plotted boundaries.

    fill (PLFILL_callback, input) :    Routine used to fill the region.
        Use plfill.  Future version of PLplot may have other fill
        routines.

    rectangular (PLBOOL, input) :    Set rectangular to true if rectangles
        map to rectangles after coordinate transformation with pltrl.
        Otherwise, set rectangular to false. If rectangular is set to
        true, plshade tries to save time by filling large rectangles.
        This optimization fails if the coordinate transformation distorts
        the shape of rectangles. For example a plot in polar coordinates
        has to have rectangular set to false.

    pltr (PLTRANSFORM_callback, input) :    A callback function that
        defines the transformation between the zero-based indices of the
        matrix a and world coordinates. If
    pltr is not supplied (e.g., is set to NULL in the C case), then the x
        indices of a are mapped to the range
    xmin through
    xmax and the y indices of a are mapped to the range
    ymin through
    ymax.For the C case, transformation functions are provided in the
        PLplot library: pltr0 for the identity mapping, and pltr1 and
        pltr2 for arbitrary mappings respectively defined by vectors and
        matrices.  In addition, C callback routines for the transformation
        can be supplied by the user such as the mypltr function in
        examples/c/x09c.c which provides a general linear transformation
        between index coordinates and world coordinates.For languages
        other than C you should consult the PLplot documentation for the
        details concerning how PLTRANSFORM_callback arguments are
        interfaced. However, in general, a particular pattern of
        callback-associated arguments such as a tr vector with 6 elements;
        xg and yg vectors; or xg and yg matrices are respectively
        interfaced to a linear-transformation routine similar to the above
        mypltr function; pltr1; and pltr2. Furthermore, some of our more
        sophisticated bindings (see, e.g., the PLplot documentation)
        support native language callbacks for handling index to
        world-coordinate transformations.  Examples of these various
        approaches are given in examples/<language>x09*,
        examples/<language>x16*, examples/<language>x20*,
        examples/<language>x21*, and examples/<language>x22*, for all our
        supported languages.

    pltr_data (PLPointer, input) :    Extra parameter to help pass
        information to pltr0, pltr1, pltr2, or whatever routine that is
        externally supplied.
")
#ifdef SWIG_OCTAVE
my_plshade;
#else
plshade;
#endif

%feature( "docstring", "Assign a function to use for generating custom axis labels

DESCRIPTION:

    This function allows a user to provide their own function to provide
    axis label text.  The user function is given the numeric value for a
    point on an axis and returns a string label to correspond with that
    value.  Custom axis labels can be enabled by passing appropriate
    arguments to plenv, plbox, plbox3 and similar functions.

    This function is used in example 19.



SYNOPSIS:

plslabelfunc(label_func, label_data)

ARGUMENTS:

    label_func (PLLABEL_FUNC_callback, input) :    This is the custom
        label function.  In order to reset to the default labelling, set
        this to NULL. The labelling function parameters are, in order:
        axis:    This indicates which axis a label is being requested for.
        The value will be one of PL_X_AXIS, PL_Y_AXIS or PL_Z_AXIS.

    value:    This is the value along the axis which is being labelled.

    label_text:    The string representation of the label value.

    length:    The maximum length in characters allowed for label_text.


    label_data (PLPointer, input) :    This parameter may be used to pass
        data to the label_func function.
")
plslabelfunc;

%feature( "docstring", "Set length of major ticks

DESCRIPTION:

    This sets up the length of the major ticks.  The actual length is the
    product of the default length and a scaling factor as for character
    height.

    Redacted form: plsmaj(def, scale)

    This function is used in example 29.



SYNOPSIS:

plsmaj(def, scale)

ARGUMENTS:

    def (PLFLT, input) :    The default length of a major tick in
        millimeters, should be set to zero if the default length is to
        remain unchanged.

    scale (PLFLT, input) :    Scale factor to be applied to default to get
        actual tick length.
")
plsmaj;

%feature( "docstring", "Set the memory area to be plotted (RGB)

DESCRIPTION:

    Set the memory area to be plotted (with the mem or memcairo driver) as
    the dev member of the stream structure.  Also set the number of pixels
    in the memory passed in
    plotmem, which is a block of memory
    maxy by
    maxx by 3 bytes long, say: 480 x 640 x 3 (Y, X, RGB)

    This memory will have to be freed by the user!

    Redacted form: plsmem(maxx, maxy, plotmem)

    This function is not used in any examples.



SYNOPSIS:

plsmem(maxx, maxy, plotmem)

ARGUMENTS:

    maxx (PLINT, input) :    Size of memory area in the X coordinate.

    maxy (PLINT, input) :    Size of memory area in the Y coordinate.

    plotmem (PLPointer, input) :    Pointer to the beginning of a
        user-supplied writeable memory area.
")
plsmem;

%feature( "docstring", "Set the memory area to be plotted (RGBA)

DESCRIPTION:

    Set the memory area to be plotted (with the memcairo driver) as the
    dev member of the stream structure. Also set the number of pixels in
    the memory passed in
    plotmem, which is a block of memory
    maxy by
    maxx by 4 bytes long, say: 480 x 640 x 4 (Y, X, RGBA)

    This memory will have to be freed by the user!

    Redacted form: plsmema(maxx, maxy, plotmem)

    This function is not used in any examples.



SYNOPSIS:

plsmema(maxx, maxy, plotmem)

ARGUMENTS:

    maxx (PLINT, input) :    Size of memory area in the X coordinate.

    maxy (PLINT, input) :    Size of memory area in the Y coordinate.

    plotmem (PLPointer, input) :    Pointer to the beginning of a
        user-supplied writeable memory area.
")
plsmema;

%feature( "docstring", "Set length of minor ticks

DESCRIPTION:

    This sets up the length of the minor ticks and the length of the
    terminals on error bars.  The actual length is the product of the
    default length and a scaling factor as for character height.

    Redacted form: plsmin(def, scale)

    This function is used in example 29.



SYNOPSIS:

plsmin(def, scale)

ARGUMENTS:

    def (PLFLT, input) :    The default length of a minor tick in
        millimeters, should be set to zero if the default length is to
        remain unchanged.

    scale (PLFLT, input) :    Scale factor to be applied to default to get
        actual tick length.
")
plsmin;

%feature( "docstring", "Set orientation

DESCRIPTION:

    Set integer plot orientation parameter.  This function is identical to
    plsdiori except for the type of the argument, and should be used in
    the same way.  See the documentation of plsdiori for details.

    Redacted form: plsori(ori)

    This function is used in example 3.



SYNOPSIS:

plsori(ori)

ARGUMENTS:

    ori (PLINT, input) :    Orientation value (0 for landscape, 1 for
        portrait, etc.) The value is multiplied by 90 degrees to get the
        angle.
")
plsori;

%feature( "docstring", "Set page parameters

DESCRIPTION:

    Sets the page configuration (optional).  If an individual parameter is
    zero then that parameter value is not updated.  Not all parameters are
    recognized by all drivers and the interpretation is device-dependent.
    The X-window driver uses the length and offset parameters to determine
    the window size and location.  The length and offset values are
    expressed in units that are specific to the current driver.  For
    instance: screen drivers will usually interpret them as number of
    pixels, whereas printer drivers will usually use mm.

    This routine, if used, must be called before initializing PLplot.  It
    may be called at later times for interactive drivers to change only
    the dpi for subsequent redraws which you can force via a call to
    plreplot.  If this function is not called then the page size defaults
    to landscape A4 for drivers which use real world page sizes and 744
    pixels wide by 538 pixels high for raster drivers. The default value
    for dx and dy is 90 pixels per inch for raster drivers.



    Redacted form: plspage(xp, yp, xleng, yleng, xoff, yoff)

    This function is used in examples 14 and 31.



SYNOPSIS:

plspage(xp, yp, xleng, yleng, xoff, yoff)

ARGUMENTS:

    xp (PLFLT, input) :    Number of pixels per inch (DPI), x. Used only
        by raster drivers, ignored by drivers which use \"real world\" units
        (e.g. mm).

    yp (PLFLT, input) :    Number of pixels per inch (DPI), y.  Used only
        by raster drivers, ignored by drivers which use \"real world\" units
        (e.g. mm).

    xleng (PLINT, input) :    Page length, x.

    yleng (PLINT, input) :    Page length, y.

    xoff (PLINT, input) :    Page offset, x.

    yoff (PLINT, input) :    Page offset, y.
")
plspage;

%feature( "docstring", "Set the cmap0 palette using the specified cmap0*.pal format file

DESCRIPTION:

    Set the cmap0 palette using the specified cmap0*.pal format file.

    Redacted form: plspal0(filename)

    This function is in example 16.



SYNOPSIS:

plspal0(filename)

ARGUMENTS:

    filename (PLCHAR_VECTOR, input) :    An ascii character string
        containing the name of the cmap0*.pal file.  If this string is
        empty, use the default cmap0*.pal file.
")
plspal0;

%feature( "docstring", "Set the cmap1 palette using the specified cmap1*.pal format file

DESCRIPTION:

    Set the cmap1 palette using the specified cmap1*.pal format file.

    Redacted form: plspal1(filename, interpolate)

    This function is used in example 16.



SYNOPSIS:

plspal1(filename, interpolate)

ARGUMENTS:

    filename (PLCHAR_VECTOR, input) :    An ascii character string
        containing the name of the cmap1*.pal file.  If this string is
        empty, use the default cmap1*.pal file.

    interpolate (PLBOOL, input) :    If this parameter is true, the
        columns containing the intensity index, r, g, b, alpha and
        alt_hue_path in the cmap1*.pal file are used to set the cmap1
        palette with a call to plscmap1la. (The cmap1*.pal header contains
        a flag which controls whether the r, g, b data sent to plscmap1la
        are interpreted as HLS or RGB.) If this parameter is false, the
        intensity index and alt_hue_path columns are ignored and the r, g,
        b (interpreted as RGB), and alpha columns of the cmap1*.pal file
        are used instead to set the cmap1 palette directly with a call to
        plscmap1a.
")
plspal1;

%feature( "docstring", "Set the pause (on end-of-page) status

DESCRIPTION:

    Set the pause (on end-of-page) status.

    Redacted form: plspause(pause)

    This function is in examples 14,20.



SYNOPSIS:

plspause(pause)

ARGUMENTS:

    pause (PLBOOL, input) :    If pause is true there will be a pause on
        end-of-page for those drivers which support this.  Otherwise there
        is no pause.
")
plspause;

%feature( "docstring", "Set current output stream

DESCRIPTION:

    Sets the number of the current output stream.  The stream number
    defaults to 0 unless changed by this routine.  The first use of this
    routine must be followed by a call initializing PLplot (e.g. plstar).

    Redacted form: plsstrm(strm)

    This function is examples 1,14,20.



SYNOPSIS:

plsstrm(strm)

ARGUMENTS:

    strm (PLINT, input) :    The current stream number.
")
plsstrm;

%feature( "docstring", "Set the number of subpages in x and y

DESCRIPTION:

    Set the number of subpages in x and y.

    Redacted form: plssub(nx, ny)

    This function is examples 1,2,14,21,25,27.



SYNOPSIS:

plssub(nx, ny)

ARGUMENTS:

    nx (PLINT, input) :    Number of windows in x direction (i.e., number
        of window columns).

    ny (PLINT, input) :    Number of windows in y direction (i.e., number
        of window rows).
")
plssub;

%feature( "docstring", "Set symbol size

DESCRIPTION:

    This sets up the size of all subsequent symbols drawn by plpoin and
    plsym.  The actual height of a symbol is the product of the default
    symbol size and a scaling factor as for the character height.

    Redacted form: plssym(def, scale)

    This function is used in example 29.



SYNOPSIS:

plssym(def, scale)

ARGUMENTS:

    def (PLFLT, input) :    The default height of a symbol in millimeters,
        should be set to zero if the default height is to remain
        unchanged.

    scale (PLFLT, input) :    Scale factor to be applied to default to get
        actual symbol height.
")
plssym;

%feature( "docstring", "Initialization

DESCRIPTION:

    Initializing the plotting package.  The program prompts for the device
    keyword or number of the desired output device.  Hitting a RETURN in
    response to the prompt is the same as selecting the first device.  If
    only one device is enabled when PLplot is installed, plstar will issue
    no prompt.  The output device is divided into nx by ny subpages, each
    of which may be used independently.  The subroutine pladv is used to
    advance from one subpage to the next.

    Redacted form: plstar(nx, ny)

    This function is used in example 1.



SYNOPSIS:

plstar(nx, ny)

ARGUMENTS:

    nx (PLINT, input) :    Number of subpages to divide output page in the
        x direction.

    ny (PLINT, input) :    Number of subpages to divide output page in the
        y direction.
")
plstar;

%feature( "docstring", "Initialization

DESCRIPTION:

    Alternative to plstar for initializing the plotting package.  The
    device name keyword for the desired output device must be supplied as
    an argument.  These keywords are the same as those printed out by
    plstar.  If the requested device is not available, or if the input
    string is empty or begins with ``?'', the prompted start up of plstar
    is used.  This routine also divides the output device page into nx by
    ny subpages, each of which may be used independently.  The subroutine
    pladv is used to advance from one subpage to the next.

    Redacted form: General: plstart(devname, nx, ny)


    This function is not used in any examples.



SYNOPSIS:

plstart(devname, nx, ny)

ARGUMENTS:

    devname (PLCHAR_VECTOR, input) :    An ascii character string
        containing the device name keyword of the required output device.
        If
    devname is NULL or if the first character of the string is a ``?'',
        the normal (prompted) start up is used.

    nx (PLINT, input) :    Number of subpages to divide output page in the
        x direction.

    ny (PLINT, input) :    Number of subpages to divide output page in the
        y direction.
")
plstart;

%feature( "docstring", "Set a global coordinate transform function

DESCRIPTION:

    This function can be used to define a coordinate transformation which
    affects all elements drawn within the current plot window.  The
    coordinate_transform callback function is similar to that provided for
    the plmap and plmeridians functions.  The coordinate_transform_data
    parameter may be used to pass extra data to coordinate_transform.

    Redacted form: General: plstransform(coordinate_transform,
    coordinate_transform_data)


    This function is used in examples 19 and 22.



SYNOPSIS:

plstransform(coordinate_transform, coordinate_transform_data)

ARGUMENTS:

    coordinate_transform (PLTRANSFORM_callback, input) :    A callback
        function that defines the transformation from the input (x, y)
        world coordinates to new PLplot world coordinates.  If
    coordinate_transform is not supplied (e.g., is set to NULL in the C
        case), then no transform is applied.

    coordinate_transform_data (PLPointer, input) :    Optional extra data
        for
    coordinate_transform.
")
plstransform;

%feature( "docstring", "Plot a glyph at the specified points

DESCRIPTION:

    Plot a glyph at the specified points. (Supersedes plpoin and plsym
    because many[!] more glyphs are accessible with plstring.) The glyph
    is specified with a PLplot user string.  Note that the user string is
    not actually limited to one glyph so it is possible (but not normally
    useful) to plot more than one glyph at the specified points with this
    function.  As with plmtex and plptex, the user string can contain FCI
    escapes to determine the font, UTF-8 code to determine the glyph or
    else PLplot escapes for Hershey or unicode text to determine the
    glyph.

    Redacted form: plstring(x, y, string)

    This function is used in examples 4, 21 and 26.



SYNOPSIS:

plstring(n, x, y, string)

ARGUMENTS:

    n (PLINT, input) :    Number of points in the x and y vectors.

    x (PLFLT_VECTOR, input) :    A vector containing the x coordinates of
        the points.

    y (PLFLT_VECTOR, input) :    A vector containing the y coordinates of
        the points.

    string (PLCHAR_VECTOR, input) :    A UTF-8 character string containing
        the glyph(s) to be plotted at each of the n points.
")
plstring;

%feature( "docstring", "Plot a glyph at the specified 3D points

DESCRIPTION:

    Plot a glyph at the specified 3D points. (Supersedes plpoin3 because
    many[!] more glyphs are accessible with plstring3.) Set up the call to
    this function similar to what is done for plline3. The glyph is
    specified with a PLplot user string.  Note that the user string is not
    actually limited to one glyph so it is possible (but not normally
    useful) to plot more than one glyph at the specified points with this
    function.  As with plmtex and plptex, the user string can contain FCI
    escapes to determine the font, UTF-8 code to determine the glyph or
    else PLplot escapes for Hershey or unicode text to determine the
    glyph.

    Redacted form: plstring3(x, y, z, string)

    This function is used in example 18.



SYNOPSIS:

plstring3(n, x, y, z, string)

ARGUMENTS:

    n (PLINT, input) :    Number of points in the x, y, and z vectors.

    x (PLFLT_VECTOR, input) :    A vector containing the x coordinates of
        the points.

    y (PLFLT_VECTOR, input) :    A vector containing the y coordinates of
        the points.

    z (PLFLT_VECTOR, input) :    A vector containing the z coordinates of
        the points.

    string (PLCHAR_VECTOR, input) :    A UTF-8 character string containing
        the glyph(s) to be plotted at each of the n points. points.
")
plstring3;

%feature( "docstring", "Add a point to a strip chart

DESCRIPTION:

    Add a point to a given pen of a given strip chart. There is no need
    for all pens to have the same number of points or to be equally
    sampled in the x coordinate. Allocates memory and rescales as
    necessary.

    Redacted form: plstripa(id, pen, x, y)

    This function is used in example 17.



SYNOPSIS:

plstripa(id, pen, x, y)

ARGUMENTS:

    id (PLINT, input) :    Identification number of the strip chart (set
        up in plstripc).

    pen (PLINT, input) :    Pen number (ranges from 0 to 3).

    x (PLFLT, input) :    X coordinate of point to plot.

    y (PLFLT, input) :    Y coordinate of point to plot.
")
plstripa;

%feature( "docstring", "Create a 4-pen strip chart

DESCRIPTION:

    Create a 4-pen strip chart, to be used afterwards by plstripa

    Redacted form: General: plstripc(id, xspec, yspec, xmin, xmax, xjump,
    ymin, ymax, xlpos, ylpos, y_ascl, acc, colbox, collab, colline,
    styline, legline, labx, laby, labz)


    This function is used in example 17.



SYNOPSIS:

plstripc(id, xspec, yspec, xmin, xmax, xjump, ymin, ymax, xlpos, ylpos, y_ascl, acc, colbox, collab, colline, styline, legline[], labx, laby, labtop)

ARGUMENTS:

    id (PLINT_NC_SCALAR, output) :    Returned value of the identification
        number of the strip chart to use on plstripa and plstripd.

    xspec (PLCHAR_VECTOR, input) :    An ascii character string containing
        the x-axis specification as in plbox.

    yspec (PLCHAR_VECTOR, input) :    An ascii character string containing
        the y-axis specification as in plbox.

    xmin (PLFLT, input) :    Initial coordinates of plot box; they will
        change as data are added.

    xmax (PLFLT, input) :    Initial coordinates of plot box; they will
        change as data are added.

    xjump (PLFLT, input) :    When x attains xmax, the length of the plot
        is multiplied by the factor (1 +
    xjump) .

    ymin (PLFLT, input) :    Initial coordinates of plot box; they will
        change as data are added.

    ymax (PLFLT, input) :    Initial coordinates of plot box; they will
        change as data are added.

    xlpos (PLFLT, input) :    X legend box position (range from 0 to 1).

    ylpos (PLFLT, input) :    Y legend box position (range from 0 to 1).

    y_ascl (PLBOOL, input) :    Autoscale y between x jumps if y_ascl is
        true, otherwise not.

    acc (PLBOOL, input) :    Accumulate strip plot if acc is true,
        otherwise slide display.

    colbox (PLINT, input) :    Plot box color index (cmap0).

    collab (PLINT, input) :    Legend color index (cmap0).

    colline (PLINT_VECTOR, input) :    A vector containing the cmap0 color
        indices for the 4 pens.

    styline (PLINT_VECTOR, input) :    A vector containing the line style
        indices for the 4 pens.

    legline (PLCHAR_MATRIX, input) :    A vector of UTF-8 character
        strings containing legends for the 4 pens.

    labx (PLCHAR_VECTOR, input) :    A UTF-8 character string containing
        the label for the x axis.

    laby (PLCHAR_VECTOR, input) :    A UTF-8 character string containing
        the label for the y axis.

    labtop (PLCHAR_VECTOR, input) :    A UTF-8 character string containing
        the plot title.
")
#ifdef SWIG_OCTAVE
my_plstripc;
#else
plstripc;
#endif

%feature( "docstring", "Deletes and releases memory used by a strip chart

DESCRIPTION:

    Deletes and releases memory used by a strip chart.

    Redacted form: plstripd(id)

    This function is used in example 17.



SYNOPSIS:

plstripd(id)

ARGUMENTS:

    id (PLINT, input) :    Identification number of strip chart to delete.
")
plstripd;

%feature( "docstring", "Set line style

DESCRIPTION:

    This sets up the line style for all lines subsequently drawn.  A line
    consists of segments in which the pen is alternately down and up. The
    lengths of these segments are passed in the vectors mark and space
    respectively.  The number of mark-space pairs is specified by nms.  In
    order to return the line style to the default continuous line, plstyl
    should be called with nms =0 .(see also pllsty)

    Redacted form: plstyl(mark, space)

    This function is used in examples 1, 9, and 14.



SYNOPSIS:

plstyl(nms, mark, space)

ARGUMENTS:

    nms (PLINT, input) :    The number of mark and space elements in a
        line.  Thus a simple broken line can be obtained by setting nms=1
        .  A continuous line is specified by setting nms=0 .

    mark (PLINT_VECTOR, input) :    A vector containing the lengths of the
        segments during which the pen is down, measured in micrometers.

    space (PLINT_VECTOR, input) :    A vector containing the lengths of
        the segments during which the pen is up, measured in micrometers.
")
plstyl;

%feature( "docstring", "Plot shaded 3-d surface plot

DESCRIPTION:

    Plots a three-dimensional shaded surface plot within the environment
    set up by plw3d.  The surface is defined by the two-dimensional matrix
    z[
    nx][
    ny], the point z[i][j] being the value of the function at (
    x[i],
    y[j]). Note that the points in vectors x and y do not need to be
    equally spaced, but must be stored in ascending order. For further
    details see the PLplot documentation.

    Redacted form: plsurf3d(x, y, z, opt, clevel)

    This function is not used in any examples.



SYNOPSIS:

plsurf3d(x, y, z, nx, ny, opt, clevel, nlevel)

ARGUMENTS:

    x (PLFLT_VECTOR, input) :    A vector containing the x coordinates at
        which the function is evaluated.

    y (PLFLT_VECTOR, input) :    A vector containing the y coordinates at
        which the function is evaluated.

    z (PLFLT_MATRIX, input) :    A matrix containing function values to
        plot.  Should have dimensions of
    nx by
    ny.

    nx (PLINT, input) :    Number of x values at which function is
        evaluated.

    ny (PLINT, input) :    Number of y values at which function is
        evaluated.

    opt (PLINT, input) :    Determines the way in which the surface is
        represented. To specify more than one option just add the options,
        e.g. FACETED + SURF_CONT opt=FACETED : Network of lines is drawn
        connecting points at which function is defined.
            opt=BASE_CONT : A contour plot is drawn at the base XY plane
            using parameters
    nlevel and
    clevel.
            opt=SURF_CONT : A contour plot is drawn at the surface plane
            using parameters
    nlevel and
    clevel.
            opt=DRAW_SIDES : draws a curtain between the base XY plane and
            the borders of the plotted function.
            opt=MAG_COLOR : the surface is colored according to the value
            of Z; if MAG_COLOR is not used, then the surface is colored
            according to the intensity of the reflected light in the
            surface from a light source whose position is set using
            pllightsource.


    clevel (PLFLT_VECTOR, input) :    A vector containing the contour
        levels.

    nlevel (PLINT, input) :    Number of elements in the clevel vector.
")
#ifdef SWIG_OCTAVE
my_plsurf3d;
#else
plsurf3d;
#endif

%feature( "docstring", "Plot shaded 3-d surface plot for z[x][y] with y index limits

DESCRIPTION:

    This variant of plsurf3d (see that function's documentation for more
    details) should be suitable for the case where the area of the x, y
    coordinate grid where z is defined can be non-rectangular.  The limits
    of that grid are provided by the parameters indexxmin, indexxmax,
    indexymin, and indexymax.

    Redacted form: plsurf3dl(x, y, z, opt, clevel, indexxmin, indexymin,
    indexymax)

    This function is used in example 8.



SYNOPSIS:

plsurf3dl(x, y, z, nx, ny, opt, clevel, nlevel, indexxmin, indexxmax, indexymin, indexymax)

ARGUMENTS:

    x (PLFLT_VECTOR, input) :    A vector containing the x coordinates at
        which the function is evaluated.

    y (PLFLT_VECTOR, input) :    A vector containing the y coordinates at
        which the function is evaluated.

    z (PLFLT_MATRIX, input) :    A matrix containing function values to
        plot.  Should have dimensions of
    nx by
    ny.

    nx (PLINT, input) :    Number of x values at which function is
        evaluated.

    ny (PLINT, input) :    Number of y values at which function is
        evaluated.

    opt (PLINT, input) :    Determines the way in which the surface is
        represented. To specify more than one option just add the options,
        e.g. FACETED + SURF_CONT opt=FACETED : Network of lines is drawn
        connecting points at which function is defined.
            opt=BASE_CONT : A contour plot is drawn at the base XY plane
            using parameters
    nlevel and
    clevel.
            opt=SURF_CONT : A contour plot is drawn at the surface plane
            using parameters
    nlevel and
    clevel.
            opt=DRAW_SIDES : draws a curtain between the base XY plane and
            the borders of the plotted function.
            opt=MAG_COLOR : the surface is colored according to the value
            of Z; if MAG_COLOR is not used, then the surface is colored
            according to the intensity of the reflected light in the
            surface from a light source whose position is set using
            pllightsource.


    clevel (PLFLT_VECTOR, input) :    A vector containing the contour
        levels.

    nlevel (PLINT, input) :    Number of elements in the clevel vector.

    indexxmin (PLINT, input) :    The index value (which must be ≥ 0) that
        corresponds to the first x index where z is defined.

    indexxmax (PLINT, input) :    The index value (which must be ≤ nx)
        which corresponds (by convention) to one more than the last x
        index value where z is defined.

    indexymin (PLINT_VECTOR, input) :    A vector containing the y index
        values which all must be ≥ 0.  These values are the first y index
        where z is defined for a particular x index in the range from
        indexxmin to indexxmax - 1.  The dimension of indexymin is
        indexxmax.

    indexymax (PLINT_VECTOR, input) :    A vector containing the y index
        values which all must be ≤ ny.  These values correspond (by
        convention) to one more than the last y index where z is defined
        for a particular x index in the range from indexxmin to indexxmax
        - 1.  The dimension of indexymax is indexxmax.
")
#ifdef SWIG_OCTAVE
my_plsurf3dl;
#else
plsurf3dl;
#endif

%feature( "docstring", "Set arrow style for vector plots

DESCRIPTION:

    Set the style for the arrow used by plvect to plot vectors.

    Redacted form: plsvect(arrowx, arrowy, fill)

    This function is used in example 22.



SYNOPSIS:

plsvect(arrowx, arrowy, npts, fill)

ARGUMENTS:

    arrowx, arrowy (PLFLT_VECTOR, input) :    A pair of vectors containing
        the x and y points which make up the arrow. The arrow is plotted
        by joining these points to form a polygon. The scaling assumes
        that the x and y points in the arrow lie in the range -0.5 <= x,y
        <= 0.5. If both arrowx and arrowy are NULL then the arrow style
        will be reset to its default.

    npts (PLINT, input) :    Number of points in the vectors arrowx and
        arrowy.

    fill (PLBOOL, input) :    If fill is true then the arrow is closed, if
        fill is false then the arrow is open.
")
plsvect;

%feature( "docstring", "Specify viewport in absolute coordinates

DESCRIPTION:

    Alternate routine to plvpor for setting up the viewport.  This routine
    should be used only if the viewport is required to have a definite
    size in millimeters.  The routine plgspa is useful for finding out the
    size of the current subpage.

    Redacted form: plsvpa(xmin, xmax, ymin, ymax)

    This function is used in example 10.



SYNOPSIS:

plsvpa(xmin, xmax, ymin, ymax)

ARGUMENTS:

    xmin (PLFLT, input) :    The distance of the left-hand edge of the
        viewport from the left-hand edge of the subpage in millimeters.

    xmax (PLFLT, input) :    The distance of the right-hand edge of the
        viewport from the left-hand edge of the subpage in millimeters.

    ymin (PLFLT, input) :    The distance of the bottom edge of the
        viewport from the bottom edge of the subpage in millimeters.

    ymax (PLFLT, input) :    The distance of the top edge of the viewport
        from the bottom edge of the subpage in millimeters.
")
plsvpa;

%feature( "docstring", "Set x axis parameters

DESCRIPTION:

    Sets values of the digmax and digits flags for the x axis.  See the
    PLplot documentation for more information.

    Redacted form: plsxax(digmax, digits)

    This function is used in example 31.



SYNOPSIS:

plsxax(digmax, digits)

ARGUMENTS:

    digmax (PLINT, input) :    Variable to set the maximum number of
        digits for the x axis.  If nonzero, the printed label will be
        switched to a floating-point representation when the number of
        digits exceeds digmax.

    digits (PLINT, input) :    Field digits value.  Currently, changing
        its value here has no effect since it is set only by plbox or
        plbox3.  However, the user may obtain its value after a call to
        either of these functions by calling plgxax.
")
plsxax;

%feature( "docstring", "Set y axis parameters

DESCRIPTION:

    Identical to plsxax, except that arguments are flags for y axis. See
    the description of plsxax for more detail.

    Redacted form: plsyax(digmax, digits)

    This function is used in examples 1, 14, and 31.



SYNOPSIS:

plsyax(digmax, digits)

ARGUMENTS:

    digmax (PLINT, input) :    Variable to set the maximum number of
        digits for the y axis.  If nonzero, the printed label will be
        switched to a floating-point representation when the number of
        digits exceeds digmax.

    digits (PLINT, input) :    Field digits value.  Currently, changing
        its value here has no effect since it is set only by plbox or
        plbox3.  However, the user may obtain its value after a call to
        either of these functions by calling plgyax.
")
plsyax;

%feature( "docstring", "Plot a glyph at the specified points

DESCRIPTION:

    Plot a glyph at the specified points.  (This function is largely
    superseded by plstring which gives access to many[!] more glyphs.)

    Redacted form: plsym(x, y, code)

    This function is used in example 7.



SYNOPSIS:

plsym(n, x, y, code)

ARGUMENTS:

    n (PLINT, input) :    Number of points in the x and y vectors.

    x (PLFLT_VECTOR, input) :    A vector containing the x coordinates of
        the points.

    y (PLFLT_VECTOR, input) :    A vector containing the y coordinates of
        the points.

    code (PLINT, input) :    Hershey symbol code corresponding to a glyph
        to be plotted at each of the n points.
")
plsym;

%feature( "docstring", "Set z axis parameters

DESCRIPTION:

    Identical to plsxax, except that arguments are flags for z axis. See
    the description of plsxax for more detail.

    Redacted form: plszax(digmax, digits)

    This function is used in example 31.



SYNOPSIS:

plszax(digmax, digits)

ARGUMENTS:

    digmax (PLINT, input) :    Variable to set the maximum number of
        digits for the z axis.  If nonzero, the printed label will be
        switched to a floating-point representation when the number of
        digits exceeds digmax.

    digits (PLINT, input) :    Field digits value.  Currently, changing
        its value here has no effect since it is set only by plbox or
        plbox3.  However, the user may obtain its value after a call to
        either of these functions by calling plgzax.
")
plszax;

%feature( "docstring", "Switch to text screen

DESCRIPTION:

    Sets an interactive device to text mode, used in conjunction with
    plgra to allow graphics and text to be interspersed.  On a device
    which supports separate text and graphics windows, this command causes
    control to be switched to the text window.  This can be useful for
    printing diagnostic messages or getting user input, which would
    otherwise interfere with the plots.  The program must switch back to
    the graphics window before issuing plot commands, as the text (or
    console) device will probably become quite confused otherwise.  If
    already in text mode, this command is ignored.  It is also ignored on
    devices which only support a single window or use a different method
    for shifting focus (see also plgra).

    Redacted form: pltext()

    This function is used in example 1.



SYNOPSIS:

pltext()
")
pltext;

%feature( "docstring", "Set format for date / time labels

DESCRIPTION:

    Sets the format for date / time labels. To enable date / time format
    labels see the options to plbox, plbox3, and plenv.

    Redacted form: pltimefmt(fmt)

    This function is used in example 29.



SYNOPSIS:

pltimefmt(fmt)

ARGUMENTS:

    fmt (PLCHAR_VECTOR, input) :    An ascii character string which is
        interpreted similarly to the format specifier of typical system
        strftime routines except that PLplot ignores locale and also
        supplies some useful extensions in the context of plotting.  All
        text in the string is printed as-is other than conversion
        specifications which take the form of a '%' character followed by
        further conversion specification character.  The conversion
        specifications which are similar to those provided by system
        strftime routines are the following: %a: The abbreviated (English)
        weekday name.
            %A: The full (English) weekday name.
            %b: The abbreviated (English) month name.
            %B: The full (English) month name.
            %c: Equivalent to %a %b %d %T %Y (non-ISO).
            %C: The century number (year/100) as a 2-digit integer.
            %d: The day of the month as a decimal number (range 01 to 31).
            %D: Equivalent to %m/%d/%y (non-ISO).
            %e: Like %d, but a leading zero is replaced by a space.
            %F: Equivalent to %Y-%m-%d (the ISO 8601 date format).
            %h: Equivalent to %b.
            %H: The hour as a decimal number using a 24-hour clock (range
            00 to 23).
            %I: The hour as a decimal number using a 12-hour clock (range
            01 to 12).
            %j: The day of the year as a decimal number (range 001 to
            366).
            %k: The hour (24-hour clock) as a decimal number (range 0 to
            23); single digits are preceded by a blank.  (See also %H.)
            %l: The hour (12-hour clock) as a decimal number (range 1 to
            12); single digits are preceded by a blank.  (See also %I.)
            %m: The month as a decimal number (range 01 to 12).
            %M: The minute as a decimal number (range 00 to 59).
            %n: A newline character.
            %p: Either \"AM\" or \"PM\" according to the given time value.
            Noon is treated as \"PM\" and midnight as \"AM\".
            %r: Equivalent to %I:%M:%S %p.
            %R: The time in 24-hour notation (%H:%M). For a version
            including the seconds, see %T below.
            %s: The number of seconds since the Epoch, 1970-01-01 00:00:00
            +0000 (UTC).
            %S: The second as a decimal number (range 00 to 60).  (The
            range is up to 60 to allow for occasional leap seconds.)
            %t: A tab character.
            %T: The time in 24-hour notation (%H:%M:%S).
            %u: The day of the week as a decimal, range 1 to 7, Monday
            being 1.  See also %w.
            %U: The week number of the current year as a decimal number,
            range 00 to 53, starting with the first Sunday as the first
            day of week 01.  See also %V and %W.
            %v: Equivalent to %e-%b-%Y.
            %V: The ISO 8601 week number of the current year as a decimal
            number, range 01 to 53, where week 1 is the first week that
            has at least 4 days in the new year.  See also %U and %W.
            %w: The day of the week as a decimal, range 0 to 6, Sunday
            being 0.  See also %u.
            %W: The week number of the current year as a decimal number,
            range 00 to 53, starting with the first Monday as the first
            day of week 01.
            %x: Equivalent to %a %b %d %Y.
            %X: Equivalent to %T.
            %y: The year as a decimal number without a century (range 00
            to 99).
            %Y: The year as a decimal number including a century.
            %z: The UTC time-zone string = \"+0000\".
            %Z: The UTC time-zone abbreviation = \"UTC\".
            %+: The UTC date and time in default format of the Unix date
            command which is equivalent to %a %b %d %T %Z %Y.
            %%: A literal \"%\" character.
      The conversion specifications which are extensions to those normally
         provided by system strftime routines are the following: %(0-9):
         The fractional part of the seconds field (including leading
         decimal point) to the specified accuracy. Thus %S%3 would give
         seconds to millisecond accuracy (00.000).
            %.: The fractional part of the seconds field (including
            leading decimal point) to the maximum available accuracy. Thus
            %S%. would give seconds with fractional part up to 9 decimal
            places if available.
")
pltimefmt;

%feature( "docstring", "Specify viewport using aspect ratio only

DESCRIPTION:

    Selects the largest viewport with the given aspect ratio within the
    subpage that leaves a standard margin (left-hand margin of eight
    character heights, and a margin around the other three sides of five
    character heights).

    Redacted form: plvasp(aspect)

    This function is used in example 13.



SYNOPSIS:

plvasp(aspect)

ARGUMENTS:

    aspect (PLFLT, input) :    Ratio of length of y axis to length of x
        axis of resulting viewport.
")
plvasp;

%feature( "docstring", "Vector plot

DESCRIPTION:

    Draws a plot of vector data contained in the matrices (
    u[
    nx][
    ny],
    v[
    nx][
    ny]) . The scaling factor for the vectors is given by scale. A
    transformation routine pointed to by pltr with a pointer pltr_data for
    additional data required by the transformation routine to map indices
    within the matrices to the world coordinates. The style of the vector
    arrow may be set using plsvect.

    Redacted form: plvect(u, v, scale, pltr, pltr_data) where (see above
    discussion) the pltr, pltr_data callback arguments are sometimes
    replaced by a tr vector with 6 elements, or xg and yg array arguments
    with either one or two dimensions.

    This function is used in example 22.



SYNOPSIS:

plvect(u, v, nx, ny, scale, pltr, pltr_data)

ARGUMENTS:

    u, v (PLFLT_MATRIX, input) :    A pair of matrices containing the x
        and y components of the vector data to be plotted.

    nx, ny (PLINT, input) :    Dimensions of the matrices u and v.

    scale (PLFLT, input) :    Parameter to control the scaling factor of
        the vectors for plotting. If scale = 0  then the scaling factor is
        automatically calculated for the data. If scale < 0 then the
        scaling factor is automatically calculated for the data and then
        multiplied by -
    scale. If scale > 0 then the scaling factor is set to scale.

    pltr (PLTRANSFORM_callback, input) :    A callback function that
        defines the transformation between the zero-based indices of the
        matrices u and v and world coordinates.For the C case,
        transformation functions are provided in the PLplot library: pltr0
        for the identity mapping, and pltr1 and pltr2 for arbitrary
        mappings respectively defined by vectors and matrices.  In
        addition, C callback routines for the transformation can be
        supplied by the user such as the mypltr function in
        examples/c/x09c.c which provides a general linear transformation
        between index coordinates and world coordinates.For languages
        other than C you should consult the PLplot documentation for the
        details concerning how PLTRANSFORM_callback arguments are
        interfaced. However, in general, a particular pattern of
        callback-associated arguments such as a tr vector with 6 elements;
        xg and yg vectors; or xg and yg matrices are respectively
        interfaced to a linear-transformation routine similar to the above
        mypltr function; pltr1; and pltr2. Furthermore, some of our more
        sophisticated bindings (see, e.g., the PLplot documentation)
        support native language callbacks for handling index to
        world-coordinate transformations.  Examples of these various
        approaches are given in examples/<language>x09*,
        examples/<language>x16*, examples/<language>x20*,
        examples/<language>x21*, and examples/<language>x22*, for all our
        supported languages.

    pltr_data (PLPointer, input) :    Extra parameter to help pass
        information to pltr0, pltr1, pltr2, or whatever callback routine
        that is externally supplied.
")
#ifdef SWIG_OCTAVE
my_plvect;
#else
plvect;
#endif

%feature( "docstring", "Specify viewport using coordinates and aspect ratio

DESCRIPTION:

    Device-independent routine for setting up the viewport.  The viewport
    is chosen to be the largest with the given aspect ratio that fits
    within the specified region (in terms of normalized subpage
    coordinates).  This routine is functionally equivalent to plvpor when
    a ``natural'' aspect ratio (0.0) is chosen.  Unlike plvasp, this
    routine reserves no extra space at the edges for labels.

    Redacted form: plvpas(xmin, xmax, ymin, ymax, aspect)

    This function is used in example 9.



SYNOPSIS:

plvpas(xmin, xmax, ymin, ymax, aspect)

ARGUMENTS:

    xmin (PLFLT, input) :    The normalized subpage coordinate of the
        left-hand edge of the viewport.

    xmax (PLFLT, input) :    The normalized subpage coordinate of the
        right-hand edge of the viewport.

    ymin (PLFLT, input) :    The normalized subpage coordinate of the
        bottom edge of the viewport.

    ymax (PLFLT, input) :    The normalized subpage coordinate of the top
        edge of the viewport.

    aspect (PLFLT, input) :    Ratio of length of y axis to length of x
        axis.
")
plvpas;

%feature( "docstring", "Specify viewport using normalized subpage coordinates

DESCRIPTION:

    Device-independent routine for setting up the viewport.  This defines
    the viewport in terms of normalized subpage coordinates which run from
    0.0 to 1.0 (left to right and bottom to top) along each edge of the
    current subpage.  Use the alternate routine plsvpa in order to create
    a viewport of a definite size.

    Redacted form: plvpor(xmin, xmax, ymin, ymax)

    This function is used in examples 2, 6-8, 10, 11, 15, 16, 18, 21, 23,
    24, 26, 27, and 31.



SYNOPSIS:

plvpor(xmin, xmax, ymin, ymax)

ARGUMENTS:

    xmin (PLFLT, input) :    The normalized subpage coordinate of the
        left-hand edge of the viewport.

    xmax (PLFLT, input) :    The normalized subpage coordinate of the
        right-hand edge of the viewport.

    ymin (PLFLT, input) :    The normalized subpage coordinate of the
        bottom edge of the viewport.

    ymax (PLFLT, input) :    The normalized subpage coordinate of the top
        edge of the viewport.
")
plvpor;

%feature( "docstring", "Select standard viewport

DESCRIPTION:

    Selects the largest viewport within the subpage that leaves a standard
    margin (left-hand margin of eight character heights, and a margin
    around the other three sides of five character heights).

    Redacted form: plvsta()

    This function is used in examples 1, 12, 14, 17, 25, and 29.



SYNOPSIS:

plvsta()
")
plvsta;

%feature( "docstring", "Configure the transformations required for projecting a 3D surface on a 2D window

DESCRIPTION:

    Configure the transformations required for projecting a 3D surface on
    an existing 2D window.  Those transformations (see the PLplot
    documentation) are done to a rectangular cuboid enclosing the 3D
    surface which has its limits expressed in 3D world coordinates and
    also normalized 3D coordinates (used for interpreting the altitude and
    azimuth of the viewing angle).  The transformations consist of the
    linear transform from 3D world coordinates to normalized 3D
    coordinates, and the 3D rotation of normalized coordinates required to
    align the pole of the new 3D coordinate system with the viewing
    direction specified by altitude and azimuth so that x and y of the
    surface elements in that transformed coordinate system are the
    projection of the 3D surface with given viewing direction on the 2D
    window.

    The enclosing rectangular cuboid for the surface plot is defined by
    xmin, xmax, ymin, ymax, zmin and zmax in 3D world coordinates.  It is
    mapped into the same rectangular cuboid with normalized 3D coordinate
    sizes of basex by basey by height so that xmin maps to -
    basex/2, xmax maps to basex/2, ymin maps to -
    basey/2, ymax maps to basey/2, zmin maps to 0 and zmax maps to height.
     The resulting rectangular cuboid in normalized coordinates is then
    viewed by an observer at altitude alt and azimuth az.  This routine
    must be called before plbox3 or any of the 3D surface plotting
    routines; plmesh, plmeshc, plot3d, plot3dc, plot3dcl, plsurf3d,
    plsurf3dl or plfill3.

    Redacted form: plw3d(basex, basey, height, xmin, xmax, ymin, ymax,
    zmin, zmax, alt, az)

    This function is examples 8, 11, 18, and 21.



SYNOPSIS:

plw3d(basex, basey, height, xmin, xmax, ymin, ymax, zmin, zmax, alt, az)

ARGUMENTS:

    basex (PLFLT, input) :    The normalized x coordinate size of the
        rectangular cuboid.

    basey (PLFLT, input) :    The normalized y coordinate size of the
        rectangular cuboid.

    height (PLFLT, input) :    The normalized z coordinate size of the
        rectangular cuboid.

    xmin (PLFLT, input) :    The minimum x world coordinate of the
        rectangular cuboid.

    xmax (PLFLT, input) :    The maximum x world coordinate of the
        rectangular cuboid.

    ymin (PLFLT, input) :    The minimum y world coordinate of the
        rectangular cuboid.

    ymax (PLFLT, input) :    The maximum y world coordinate of the
        rectangular cuboid.

    zmin (PLFLT, input) :    The minimum z world coordinate of the
        rectangular cuboid.

    zmax (PLFLT, input) :    The maximum z world coordinate of the
        rectangular cuboid.

    alt (PLFLT, input) :    The viewing altitude in degrees above the xy
        plane of the rectangular cuboid in normalized coordinates.

    az (PLFLT, input) :    The viewing azimuth in degrees of the
        rectangular cuboid in normalized coordinates.  When az=0, the
        observer is looking face onto the zx plane of the rectangular
        cuboid in normalized coordinates, and as az is increased, the
        observer moves clockwise around that cuboid when viewed from above
        the xy plane.
")
plw3d;

%feature( "docstring", "Set pen width

DESCRIPTION:

    Sets the pen width.

    Redacted form: plwidth(width)

    This function is used in examples 1 and 2.



SYNOPSIS:

plwidth(width)

ARGUMENTS:

    width (PLFLT, input) :    The desired pen width.  If width is negative
        or the same as the previous value no action is taken. width = 0.
        should be interpreted as as the minimum valid pen width for the
        device.  The interpretation of positive width values is also
        device dependent.
")
plwidth;

%feature( "docstring", "Specify window

DESCRIPTION:

    Specify the window, i.e., the world coordinates of the edges of the
    viewport.

    Redacted form: plwind(xmin, xmax, ymin, ymax)

    This function is used in examples 1, 2, 4, 6-12, 14-16, 18, 21, 23-27,
    29, and 31.



SYNOPSIS:

plwind(xmin, xmax, ymin, ymax)

ARGUMENTS:

    xmin (PLFLT, input) :    The world x coordinate of the left-hand edge
        of the viewport.

    xmax (PLFLT, input) :    The world x coordinate of the right-hand edge
        of the viewport.

    ymin (PLFLT, input) :    The world y coordinate of the bottom edge of
        the viewport.

    ymax (PLFLT, input) :    The world y coordinate of the top edge of the
        viewport.
")
plwind;

%feature( "docstring", "Enter or leave xor mode

DESCRIPTION:

    Enter (when mode is true) or leave (when mode is false) xor mode for
    those drivers (e.g., the xwin driver) that support it.  Enables
    erasing plots by drawing twice the same line, symbol, etc.  If driver
    is not capable of xor operation it returns a status of false.

    Redacted form: plxormod(mode, status)

    This function is used in examples 1 and 20.



SYNOPSIS:

plxormod(mode, status)

ARGUMENTS:

    mode (PLBOOL, input) :    mode is true means enter xor mode and mode
        is false means leave xor mode.

    status (PLBOOL_NC_SCALAR, output) :    Returned value of the status.
        modestatus of true (false) means driver is capable (incapable) of
        xor mode.
")
plxormod;

