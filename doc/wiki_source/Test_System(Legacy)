<!---
N.B.  The definitive Markdown source of this file is located in the
doc/wiki_source subdirectory of the PLplot source tree.  So only use
the ctrl-v and delete capabilities of the GUI file editor at
SourceForge to make changes to the SourceForge version of this file,
where ctrl-v is used to complete a cut and paste from the definitive
version of this file in the PLplot source tree that is being edited
with your favorite file editor, and delete used to remove extraneous
unmodified text whose changed form has been copied with the cut and
paste.
-->

### The legacy test system

This test system is one of three implemented for PLplot with the other two being the [CMake-based test system](Test_System(CMake_Based) "wikilink") and the [CTest-based test system](Test_System(CTest_Based) "wikilink").  Other wiki links relevant to PLplot testing are [a general discussion of PLplot testing](Testing_PLplot "wikilink") and [a summary of our comprehensive testing reports](Testing_Reports "wikilink").

The following set of commands is a typical way to use this test system.

~~~
# Example of using the legacy test system.
# 1. Configure a PLplot core build with CMake as normal in an initially
# empty build tree.
CORE_BUILD_DIR=$HOME/plplot_core_build_dir
rm -rf $CORE_BUILD_DIR
mkdir $CORE_BUILD_DIR
cd $CORE_BUILD_DIR
cmake -DCMAKE_INSTALL_PREFIX=<install prefix> <other cmake options> <top-level directory of the PLplot source tree> >& cmake.out
# 2. Install PLplot where this installation includes a legacy build tree for the installed examples.
make VERBOSE=1 -j<jobs> install >& install.out
# 3. Copy the build tree for the legacy build system of the installed examples somewhere else
#    to avoid contaminating the install tree with files generated by the tests below.
LEGACY_BUILD_DIR=$HOME/plplot_legacy_build_dir
rm -rf $LEGACY_BUILD_DIR
cp -a <install_prefix>/share/plplot<plplot_version>/examples $LEGACY_BUILD_DIR
cd $LEGACY_BUILD_DIR/
# 4. (optional) Build the legacy "test_interactive" target.
make -j<jobs> test_interactive >& test_interactive.out
# 5. Build the legacy "test_noninteractive" target.
make -j<jobs> test_noninteractive >& test_noninteractive.out
~~~

The first 3 steps of the above example are for the CMake "Unix Makefiles" generator case, but the tester should be able to infer from this example how to do these steps for any other CMake generator as well.

In the above commands, $HOME is an environment variable pointing to your home directory; &lt;install_prefix&gt; should point to an initially non-existent disk directory that will become the top-level directory of the install tree; &lt;other cmake options&gt; can be any additional cmake options you want to specify to control the PLplot configuration; &lt;top-level directory of the PLplot source tree&gt; is self-explanatory; &lt;jobs&gt; is the maximum number of parallel jobs that will be executed by the make command (for most efficient results this integer should match the number of hardware threads for your box (e.g., it should be 16 for a Ryzen 7 1700 system with 8 real cores and 16 threads); and &lt;plplot_version&gt; is the PLplot version number, e.g., "5.15.0".

Note that building the above legacy test_interactive target is labelled optional for testers because of the relatively large amount of user interaction that is required to get through these interactive tests even if that problem is substantially mitigated by configuration of these tests which by default deploys the -np option (this "no-pause" option means the tester ordinarily does not have to hit the enter key to page through multi-page examples or exit from those examples).

You should search the \*.out files generated by the above commands for obvious configure, build, or install errors for the core build and for obvious build or run-time errors for the build of the above legacy targets.  You should also look for rendering issues associated with test_interactive target (in the displays that target generates) and rendering issues associated with test_noninterative_target (using an appropriate viewer such as the [ImageMagick](http://www.imagemagick.org/) "display" application to view the files that file generates in the $LEGACY_BUILD_DIR directory).

N.B. The above build of the legacy test_interactive and test_noninteractive targets executes many of our interactive and noninteractive examples. The interactive results are similar to those of the test_interactive target implemented with our [CMake-based test system](Test_System(CMake_Based) "wikilink"), and the noninteractive results are similar to those of the test_noninteractive target of our [CMake-based test system](Test_System(CMake_Based) "wikilink") and the (noninteractive) results of our [CTest-based test system](Test_System(CTest_Based) "wikilink").  However, the implementation of the legacy targets is complex and difficult compared to the ease of implementing test targets for our [CMake-based test system](Test_System(CMake_Based) "wikilink") and tests for our [CTest-based test system](Test_System(CTest_Based) "wikilink") because our [legacy test system](Test_System(Legacy) "wikilink") necessarily depends on a number of specifically configured Makefiles.  As a result we spend little effort porting additional interactive or noninteractive tests from our  [CMake-based](Test_System(CMake_Based) "wikilink") and [CTest-based](Test_System(CTest_Based) "wikilink") test systems to our [legacy test system](Test_System(Legacy) "wikilink") although we do try to keep what we have implemented for this test system well maintained via testing it often with the comprehensive_test.sh script.

The content of this page is available under the [GNU Free Documentation License 1.2](http://www.gnu.org/copyleft/fdl.html).
