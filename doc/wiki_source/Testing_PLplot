<!---
N.B.  The definitive Markdown source of this file is located in the
doc/wiki_source subdirectory of the PLplot source tree.  So only use
the ctrl-v and delete capabilities of the GUI file editor at
SourceForge to make changes to the SourceForge version of this file,
where ctrl-v is used to complete a cut and paste from the definitive
version of this file in the PLplot source tree that is being edited
with your favorite file editor, and delete used to remove extraneous
unmodified text whose changed form has been copied with the cut and
paste.
-->

We encourage those who build PLplot to test both their build-tree and installed-examples-tree versions and report any problems to either the [plplot-general](https://lists.sourceforge.net/lists/listinfo/plplot-general "wikilink") or [plplot-devel](https://lists.sourceforge.net/lists/listinfo/plplot-devel "wikilink") mailing lists.

### Testing Prerequisites

We have implemented

1.  a legacy test framework for the build tree that is based on ctest,
2.  a new test framework for both the build tree and installed examples tree with CMake-based build system, and
3. a traditional test framwork for the installed examples tree with traditional (make + pkg-config) build system.

The prerequisites of the legacy test framework are ctest (available as part of CMake) and bash (available on Windows platforms such as [Cygwin](https://www.cygwin.com/) or [MinGW-w64/MSYS2](https://github.com/msys2/msys2/wiki) as well as on Unix platforms).  The prerequisites of the new test framework are CMake and bash.  The prerequisites of the traditional test framework are pkg-config and bash.

### <a name="Comprehensive testing"></a>Comprehensive testing

If you want to just help out with comprehensive testing before a release on the platforms mentioned above where bash is available without becoming too concerned about those details, all you really need to do is run

`scripts/comprehensive_test.sh`

By default that bash script runs a complete set of 7 major tests for our 3 principal build configurations (shared library/dynamic devices, shared library/static devices, and static library/static devices).  Those 7 major tests are the following:

1. Run ctest in the build tree.
2. Run the test_interactive target in the build tree.
3. Run the test_interactive target in the installed examples tree with CMake-based build system.
4. Run the test_interactive target in the installed examples tree with traditional (make + pkg-config) build system.
5. Run the test_noninteractive target in the build tree.
6. Run the test_noninteractive target in the installed examples tree with CMake-based build system.
7. Run the test_noninteractive target in the installed examples tree with traditional (make + pkg-config) build system.

Consult the sections below if you need to know more details about these 7 major tests.  Use the --help option of the above script to find out how to turn off some of these  7x3= 21 major tests if some of them do not work on your platform or if you want to run just a subset of the default tests.

Results of all the tests are stored in various *.out files.  Those can be accessed as follows to test, for example, whether any errors occurred.

`find ../comprehensive_test_disposeable/ -name "*.out" |grep -v a.out |xargs grep -i error`

Instead, to look at each *.out file in detail you could use

`find ../comprehensive_test_disposeable/ -name "*.out" |grep -v a.out |xargs less`

and use the

`:n`

or

`:p`

commands within the above less invocation to navigate between the large numbers of *.out files that are produced by scripts/comprehensive_test.sh.

### Build-tree tests

Build-tree tests can only be performed if cmake is invoked with the -DBUILD_TEST=ON option. Such tests are done from the top-level directory of the build tree (the directory where you invoke cmake command that configures the build of PLplot). The methods for invoking these tests are given below both for the legacy and new testing methods. These tests include executing all our 31 standard examples for all language interfaces and non-interactive device drivers that we currently support. This is a comprehensive test of the PLplot build. For example, our standard examples exercise virtually all of the PLplot API. Furthermore, this series of tests generates more than 2GB of plot files in various formats. The tests also include a comparison of PostScript (-dev psc) results and stdout from each language interface to PLplot with the corresponding results for C. In general, these results are identical which is a stringent test of our language bindings. (Note it is the user's responsibility to insure the locales are consistent for all languages since inconsistent locales can produce inconsistent stdout results which have nothing to do with PLplot bindings or examples issues.)

You should search test results for obvious errors such as segfaults. In addition, you can test for rendering errors by viewing the file results (in the ctest_examples_output_dir subdirectory in the build tree for the ctest case, and the examples/test_examples_output_dir subdirectory in the build tree for the test_noninteractive target case) using an appropriate viewer.

Results for -dev psc are a special case. To illustrate this, here are typical -dev psc results for example 1.

x01a.psc, x01c.psc, x01cxx.psc, x01d.psc, x01f95.psc, x01j.psc, x01lua.psc, x01o.psc, x01ocaml.psc, x01p.psc, x01pdl.psc, and x01t.psc.

These correspond to Ada, C, C++, D, Fortran 95, Java, Lua, Octave, OCaml, Python, Perl/PDL, and Tcl -dev psc (colour PostScript) results for our standard example 1. The test referred to above compares everything in this list, but x01c.psc against that file so rendering errors only need to be looked for in x01c.psc (with your favorite Postscript viewing application), and any of these files which the report shows are different from x01c.psc. And similarly for the -dev psc results for the rest of our 31 standard examples.

Here are typical plot file results from our standard example 1 for devices other than -dev psc.

x01c.pdfcairo, x01c.ps, x01c.psttf, x01c.psttfc, x01c01.bmpqt, x01c01.epsqt, x01c01.jpgqt, x01c01.pdfqt, x01c01.pngcairo, x01c01.pngqt, x01c01.ppmqt, x01c01.svg, x01c01.svgcairo, x01c01.svgqt, x01c01.tiffqt, and x01c01.xfig.

Since different devices are involved in all cases, these should be looked at individually for rendering errors (and similarly for the remaining 31 standard examples). Note such visual inspection is a huge job so we certainly don't expect it of our testers very often, but once every year or so and especially for newer examples that haven't been checked before is worth doing. On Unix platforms a general all-purpose viewer for all these file formats is the [ImageMagick](http://www.imagemagick.org/) display application.

#### Invocation of legacy tests in the build tree

After running "make all" from the top-level of the build tree, then run

`ctest --verbose -j4 >& ctest.out`

This creates test plot file results in the ctest_examples_output_dir subdirectory of the build tree, and ctest.out should contain a table of comparisons of Postscript results from each of our standard examples and each of our language bindings against the corresponding C versions.  ctest is capable of parallel execution controlled by the -j option to decide how many jobs to run in parallel.  A good rule of thumb is to specify a number which is 2 more than the number of cpu's on your computer.  So -j3 would be suitable for a computer with one processor, -j4 would be suitable for a computer with 2 processors, etc.

#### Invocation of tests in the build tree using the new testing framework

The new testing framework is implemented simply as normal targets for the build system that
are invoked, e.g., for "Unix Makefiles" generators by

`make -j4 test_diff_psc >& test_diff_psc.out`

and similarly for other generators.  Note for generators like "Unix Makefiles" which have parallel computation capability, the -j parameter controls how many jobs are run simulataneously, and this can save a large amount of time on computers with more than one cpu.  For further remarks about setting the -j parameter see discussion above of this parameter for ctest parallel results.

Three comprehensive test targets are test_diff_psc, test_noninteractive and test_interactive.

test_diff_psc generates all -dev psc results (which are stored in examples/test_examples_output_dir in the build tree) and compares them with the same report that is obtained from ctest. Note this target excludes anything but -dev psc results.

test_noninteractive runs test_diff_psc as well as every other PLplot example that produces a file. Note that test_noninteractive is somewhat more comprehensive than legacy ctest and considerably more comprehensive than the test_diff_psc target.  All file results from the test_noninteractive target are stored in examples/test_examples_output_dir in the build tree.

test_interactive runs all interactive devices for the standard C examples as well as all special interactive examples. Very little user-intervention is required to run these tests because, where possible, the PLplot -np (no-pause) command-line option is used for these tests.

The traditional ctest-based testing framework has one important advantage over the new testing framework which is that ctest is a [Dart](http://public.kitware.com/dart/HTML/Index.shtml) client that can be used to automatically report nightly test results to a Dart server.  (For further details see [the ctest man page](http://www.cmake.org/cmake/help/v3.0/manual/ctest.1.html)).  Currently the PLplot development team does not use this automatic test reporting functionality of ctest, but we plan to in the future.

The new testing framework also has advantages over the traditional ctest-based testing framework.

- It is implemented for both the PLplot build tree and installed examples tree CMake-based build systems.  The implementation is done with common files for the two different build systems so that any changes in the new testing framework are immediately reflected for both build systems.  It is in our future plans to implement ctest for the installed examples build system as well, but currently it is just limited to the build system for the build tree.

- Full dependencies are implemented (unlike ctest which requires the "all" target to be run before ctest is run).

- There are many individual test targets implemented which allow users to test PLplot with extremely fine-grained control.  To obtain a list of such targets run the "help" target and select target names that have "test" in the target name.  For example, on Unix systems you can run 

`make help |grep test`

to obtain the following results:

    ... test
    ... test-drv-info
    ... test_cairo_dyndriver
    ... test_dyndrivers
    ... test_mem_dyndriver
    ... test_ntk_dyndriver
    ... test_null_dyndriver
    ... test_pdf_dyndriver
    ... test_ps_dyndriver
    ... test_psttf_dyndriver
    ... test_qt_dyndriver
    ... test_svg_dyndriver
    ... test_tk_dyndriver
    ... test_tkwin_dyndriver
    ... test_wxwidgets_dyndriver
    ... test_xfig_dyndriver
    ... test_xwin_dyndriver
    ... test_ada_psc
    ... test_all_cairo
    ... test_all_qt
    ... test_c_bmpqt
    ... test_c_epscairo
    ... test_c_epsqt
    ... test_c_jpgqt
    ... test_c_ntk
    ... test_c_pdf
    ... test_c_pdfcairo
    ... test_c_pdfqt
    ... test_c_pngcairo
    ... test_c_pngqt
    ... test_c_ppmqt
    ... test_c_ps
    ... test_c_psc
    ... test_c_pscairo
    ... test_c_psttf
    ... test_c_psttfc
    ... test_c_qtwidget
    ... test_c_svg
    ... test_c_svgcairo
    ... test_c_svgqt
    ... test_c_tiffqt
    ... test_c_tk
    ... test_c_wxwidgets
    ... test_c_xcairo
    ... test_c_xfig
    ... test_c_xwin
    ... test_cxx_psc
    ... test_d_psc
    ... test_diff_psc
    ... test_extXdrawable
    ... test_extcairo
    ... test_f95_psc
    ... test_interactive
    ... test_java_psc
    ... test_lua_psc
    ... test_noninteractive
    ... test_ocaml_psc
    ... test_octave_ntk
    ... test_octave_psc
    ... test_octave_qtwidget
    ... test_octave_tk
    ... test_octave_wxwidgets
    ... test_octave_xcairo
    ... test_octave_xwin
    ... test_plserver_runAllDemos
    ... test_plserver_standard_examples
    ... test_pltcl_standard_examples
    ... test_pyqt4_example
    ... test_python_psc
    ... test_qt_example
    ... test_tcl
    ... test_tcl_psc
    ... test_tclsh_standard_examples
    ... test_tk
    ... test_tk_01
    ... test_tk_02
    ... test_tk_03
    ... test_tk_04
    ... test_tk_plgrid
    ... test_wish_runAllDemos
    ... test_wish_standard_examples
    ... test_wxPLplotDemo
    ... ext-cairo-test
    ... test_plend
    ... clean_ctest_plot_files

The "test" target is supplied automatically by CMake and merely runs ctest.  The rest of the target names are largely self-explanatory.  For example, the "test_c_svg" target runs all our standard examples implemented with "C" using -dev svg to thoroughly test that device.  Some general test targets such as the alrady-mentioned test_c_diff, test_noninteractive, and test_interactive targets as well as others such as test_all_cairo, test_all_qt, test_tcl, and test_tk invoke other tests as dependencies.

### Tests of the PLplot installation

After PLplot has been configured (with "cmake"), built (with the "all" target), and installed (with the "install" target), you can test the installation using a legacy test system (implemented with Make, pkg-config, and bash) or our new test framework (implemented with CMake and bash).

#### Legacy tests of the PLplot installation

You can test the PLplot installation on Unix systems by doing the following commands:

`cp -a $prefix/share/plplot$plplot_version/examples /tmp`
`cd /tmp/examples`
`make test_noninteractive >& make_test.out`
`make test_interactive`

where "\$prefix" is the installation prefix chosen at the configuration stage, and \$plplot_version is the PLplot version (currently 5.10.0). The effect of the above "cp" and "cd" commands is to copy the examples subtree of the install tree to /tmp and build and test the examples in the copied subtree to keep a clean install tree. However, an alternative is to replace those two commands with

`cd $prefix/share/plplot$plplot_version/examples`

and build and test the install-tree examples right in the examples subtree of the install tree with the above "make" commands.

Regardless of whether you build and test the examples in a copy of the examples subtree of the install tree or directly in that subtree, check all the \*.out files for any errors.

N.B. the above legacy "make test_noninteractive" command does essentially the same tests for the installed PLplot version as ctest does for the build-tree version of PLplot, and the "test-noninteractive target for the CMake-based build systems for the build tree and installed examples tree.  Note, the ctest method requires only the ctest command (bundled with CMake) and bash, and the CMake-based build systems should work for any CMake generator on any platform with access to bash.  In comparison, the "make" command which is available on all Unix platforms but is only available on certain Windows platforms such as Cygwin and MinGW-w64/MSYS2 and pkg-config and bash are specifically required for the legacy installed-examples implementation.

N.B. the above legacy "make test_interactive" command executes our interactive examples. The results are similar to those of the test_interactive target implemented with our new test framework, but the implementation is very different (depending on pkg-config and a special bash script rather than standard CMake cross-platform commands).

#### Cross-platform tests of the PLplot installation using the new test framework

Here is an example under Unix of how to test the PLplot installation using the new testing framework. (Those using Windows platforms should be able to infer the equivalent of these commands.)

`mkdir /tmp/build_dir`
`cd /tmp/build_dir`
`cmake $prefix/share/plplot$plplot_version/examples `
`make -j4 test_diff_psc >& make_test_diff_psc.out`
`make -j4 test_noninteractive >& make_test_noninteractive.out`
`make -j4 test_interactive >& make_test_interactive.out`

Note these targets are essentially identical to the targets described above for the new test framework for the build tree because the same bash scripts and essentially the same CMake logic is used to set up these targets. Similarly, all other fine-grained targets (which you can discover using the

`make help |grep test`

command) for the new test framework are available in this context as well. N.B. the test_noninteractive and test_interactive targets available here are more comprehensive than the same-named targets in the legacy installation test case and are implemented in a quite different (cross-platform) way with much better dependencies.

### <a name="Testing Reports"></a>Testing Reports (in reverse chronological order)

|||
---|---|---|---
Tester|Alan W. Irwin
Notes|(a), (b), (c), (d), (e1), (A)
Date|2017-08-25
PLplot commit|c2b7e3d
CMake version|3.9.1
Generator|"Unix Makefiles"
Platform|Debian Jessie = stable with system libraries
Pango/Cairo version|1.36.8/1.14.0
Qt version|4.8.6
WxWidgets version|3.0.2
Shared libraries?|Dynamic drivers?
Yes|Yes
Yes|No
No|No
CMake-based build tree?|test_noninteractive?|test_interactive?|ctest?
Yes|Yes|Yes|Yes
CMake-based installed examples?|test_noninteractive?|test_interactive
Yes|Yes|Yes
Traditional Installed examples?|test_noninteractive?|test_interactive
Yes|Yes|Yes

|||
---|---|---|---
Tester|Arjen Markus
Notes|(a), (e1),  (A), (B1), (E''''), (F1), (G3), (H3), (N1)  
Date|2017-08-17
PLplot commit|ac3473f
CMake version|3.6.2
Generator|"MSYS Makefiles"
Platform|MinGW-w64/MSYS2 (64-bit)
Pango/Cairo version|1.40.3/1.15.2
Qt version|4.8.7
WxWidgets version|3.0.2
Shared libraries?|Dynamic drivers?
Yes|Yes
Yes|No
No|No
CMake-based build tree?|test_noninteractive?|test_interactive?|ctest?
Yes|Yes|No|Yes
CMake-based installed examples?|test_noninteractive?|test_interactive
Yes|Yes|No
Traditional Installed examples?|test_noninteractive?|test_interactive
Yes|Yes|No

|||
---|---|---|---
Tester|Alan W. Irwin
Notes|(a), (b), (c), (d), (e1), (A)
Date|2017-08-15
PLplot commit|ac753c6
CMake version|3.6.2
Generator|"Unix Makefiles"
Platform|Debian Jessie = stable with system libraries
Pango/Cairo version|1.36.8/1.14.0
Qt version|4.8.6
WxWidgets version|3.0.2
Shared libraries?|Dynamic drivers?
Yes|Yes
Yes|No
No|No
CMake-based build tree?|test_noninteractive?|test_interactive?|ctest?
Yes|Yes|Yes|Yes
CMake-based installed examples?|test_noninteractive?|test_interactive
Yes|Yes|Yes
Traditional Installed examples?|test_noninteractive?|test_interactive
Yes|Yes|Yes

|||
---|---|---|---
Tester|Arjen Markus
Notes|(a), (e), (l), (A)
Date|2016-12-21
PLplot commit|995e75e
CMake version|3.4.3
Generator|"NMake Makefiles"
Platform|64-bit Windows with MSVC + ifort
Pango/Cairo version|not applicable
Qt version|not applicable
WxWidgets version|not applicable
Shared libraries?|Dynamic drivers?
Yes|Yes
CMake-based build tree?|test_noninteractive?|test_interactive?|ctest?
No|No|No|No
CMake-based installed examples?|test_noninteractive?|test_interactive
No|No|No
Traditional Installed examples?|test_noninteractive?|test_interactive
No|No|No

|||
---|---|---|---
Tester|Arjen Markus
Notes|(a), (e), (A), (B1), (E1), (G1), (H1)
Date|2016-12-13
PLplot commit|08935de
CMake version|3.6.2
Generator|"Unix Makefiles"
Platform|Cygwin (64-bit)
Pango/Cairo version|1.38.1/1.14.4
Qt version|4.8.7
WxWidgets version|3.0.2.0
Shared libraries?|Dynamic drivers?
Yes|Yes
Yes|No
No|No
CMake-based build tree?|test_noninteractive?|test_interactive?|ctest?
Yes|Yes|No|Yes
CMake-based installed examples?|test_noninteractive?|test_interactive
Yes|Yes|No
Traditional Installed examples?|test_noninteractive?|test_interactive
Yes|Yes|No

|||
---|---|---|---
Tester|Arjen Markus
Notes|(a), (e), (i1), (A), (B1), (C1), (D1), (E2), (F1), (G2), (H2), (I1), (J1)  
Date|2016-12-13
PLplot commit|08935de
CMake version|3.4.3
Generator|"Unix Makefiles"
Platform|MinGW-w64/MSYS2 (64-bit)
Pango/Cairo version|not applicable
Qt version|not applicable
WxWidgets version|not applicable
Shared libraries?|Dynamic drivers?
Yes|Yes
Yes|No
No|No
CMake-based build tree?|test_noninteractive?|test_interactive?|ctest?
Yes|Yes|No|Yes
CMake-based installed examples?|test_noninteractive?|test_interactive
Yes|Yes|No
Traditional Installed examples?|test_noninteractive?|test_interactive
No|No|No

|||
---|---|---|---
Tester|Alan W. Irwin
Notes|(a), (b), (c), (d), (e), (A)
Date|2016-12-13
PLplot commit|6170626
CMake version|3.0.2
Generator|"Unix Makefiles"
Platform|Debian Jessie = stable with system libraries
Pango/Cairo version|1.36.8/1.14.0
Qt version|4.8.6
WxWidgets version|3.0.2
Shared libraries?|Dynamic drivers?
Yes|Yes
Yes|No
No|No
CMake-based build tree?|test_noninteractive?|test_interactive?|ctest?
Yes|Yes|Yes|Yes
CMake-based installed examples?|test_noninteractive?|test_interactive
Yes|Yes|Yes
Traditional Installed examples?|test_noninteractive?|test_interactive
Yes|Yes|Yes

|||
---|---|---|---
Tester|Alan W. Irwin
Notes|(a), (b), (c), (d), (e), (A)
Date|2016-12-11
PLplot commit|aab0449
CMake version|3.7.0
Generator|"Unix Makefiles"
Platform|Debian Jessie = stable with system libraries
Pango/Cairo version|1.36.8/1.14.0
Qt version|4.8.6
WxWidgets version|3.0.2
Shared libraries?|Dynamic drivers?
Yes|Yes
Yes|No
No|No
CMake-based build tree?|test_noninteractive?|test_interactive?|ctest?
Yes|Yes|Yes|Yes
CMake-based installed examples?|test_noninteractive?|test_interactive
Yes|Yes|Yes
Traditional Installed examples?|test_noninteractive?|test_interactive
Yes|Yes|Yes

|||
---|---|---|---
Tester|Alan W. Irwin
Notes|(a), (b), (c), (d), (e), (A)
Date|2016-07-17
PLplot commit|11c496b
CMake version|3.6.0
Generator|"Unix Makefiles"
Platform|Debian Jessie = stable with system libraries
Pango/Cairo version|1.36.8/1.14.0
Qt version|4.8.6
WxWidgets version|3.0.2
Shared libraries?|Dynamic drivers?
Yes|Yes
Yes|No
No|No
CMake-based build tree?|test_noninteractive?|test_interactive?|ctest?
Yes|Yes|Yes|Yes
CMake-based installed examples?|test_noninteractive?|test_interactive
Yes|Yes|Yes
Traditional Installed examples?|test_noninteractive?|test_interactive
Yes|Yes|Yes

|||
---|---|---|---
Tester|Arjen Markus
Notes|(a), (e), (A), (B'), (E''), (G'), (H')
Date|2016-05-25
PLplot commit|c9f392a
CMake version|3.3.2
Generator|"Unix Makefiles"
Platform|Cygwin (64-bit)
Pango/Cairo version|1.38.1/1.14.4
Qt version|4.8.7
WxWidgets version|3.0.2.0
Shared libraries?|Dynamic drivers?
Yes|Yes
Yes|No
No|No
CMake-based build tree?|test_noninteractive?|test_interactive?|ctest?
Yes|Yes|No|Yes
CMake-based installed examples?|test_noninteractive?|test_interactive
Yes|Yes|No
Traditional Installed examples?|test_noninteractive?|test_interactive
Yes|Yes|No

|||
---|---|---|---
Tester|Greg Jung
Notes|(a), (b), (e), (i'), (A), (B'), (D'), (E'''''), (F''''), (G''), (H'), (J')
Date|2015-11-13
PLplot commit|142e9d2
CMake version|3.3.2
Generator|"Unix Makefiles"
Platform|OpenSuse-13.2, download edition
Pango/Cairo version|1.36.8/1.14.0
Qt version|not applicable
WxWidgets version|3.0.2
Shared libraries?|Dynamic drivers?
Yes|Yes
Yes|No
No|No
CMake-based build tree?|test_noninteractive?|test_interactive?|ctest?
Yes|Yes|No|Yes
CMake-based installed examples?|test_noninteractive?|test_interactive
Yes|Yes|No
Traditional Installed examples?|test_noninteractive?|test_interactive
Yes|Yes|No

|||
---|---|---|---
Tester|Alan W. Irwin
Notes|(a), (b), (c), (d), (e), (A)
Date|2015-11-08
PLplot commit|5fde587
CMake version|3.3.2
Generator|"Unix Makefiles"
Platform|Debian jessie = stable with system libraries
Pango/Cairo version|1.36.8/1.14.0
Qt version|4.8.6
WxWidgets version|3.0.2
Shared libraries?|Dynamic drivers?
Yes|Yes
Yes|No
No|No
CMake-based build tree?|test_noninteractive?|test_interactive?|ctest?
Yes|Yes|Yes|Yes
CMake-based installed examples?|test_noninteractive?|test_interactive
Yes|Yes|Yes
Traditional Installed examples?|test_noninteractive?|test_interactive
Yes|Yes|Yes

|||
---|---|---|---
Tester|Alan W. Irwin
Notes|(a), (b), (c), (d), (e), (k), (A)
Date|2015-08-07
PLplot commit|6747256
CMake version|3.0.2
Generator|"Unix Makefiles"
Platform|Debian wheezy = oldstable with system libraries
Pango/Cairo version|1.30.0/1.12.2
Qt version|4.8.2
WxWidgets version|2.8.12.1
Shared libraries?|Dynamic drivers?
Yes|Yes
Yes|No
No|No
CMake-based build tree?|test_noninteractive?|test_interactive?|ctest?
Yes|No|Yes|No
CMake-based installed examples?|test_noninteractive?|test_interactive
Yes|No|Yes
Traditional Installed examples?|test_noninteractive?|test_interactive
Yes|No|Yes

|||
---|---|---|---
Tester|Greg Jung
Notes|(a), (e), (i), (j), (A), (B'), (E''''), (F'''), (G'), (H'''), (N)
Date|2015-07-30
PLplot commit|be85695
CMake version|3.2.3
Generator|"MSYS Makefiles"
Platform|mingw-w64-x86_64/MSYS2
Pango/Cairo version|1.37.1/1.14.2
Qt version|4.8.7
WxWidgets version|3.0.2-5
Shared libraries?|Dynamic drivers?
Yes|Yes
Yes|No
No|No
CMake-based build tree?|test_noninteractive?|test_interactive?|ctest?
Yes|Yes|No|Yes
CMake-based installed examples?|test_noninteractive?|test_interactive
Yes|Yes|No
Traditional Installed examples?|test_noninteractive?|test_interactive
Yes|Yes|No

|||
---|---|---|---
Tester|Greg Jung
Notes|(a), (e), (i), (A), (B'), (E''''), (F'''), (G'), (H''), (N)
Date|2015-07-30
PLplot commit|be85695
CMake version|3.2.3
Generator|"Unix Makefiles"
Platform|mingw-w64-x86_64/MSYS2
Pango/Cairo version|1.37.1/1.14.2
Qt version|4.8.7
WxWidgets version|Not applicable
Shared libraries?|Dynamic drivers?
Yes|Yes
Yes|No
No|No
CMake-based build tree?|test_noninteractive?|test_interactive?|ctest?
Yes|Yes|No|Yes
CMake-based installed examples?|test_noninteractive?|test_interactive
Yes|Yes|No
Traditional Installed examples?|test_noninteractive?|test_interactive
Yes|Yes|No

|||
---|---|---|---
Tester|Greg Jung
Notes|(a), (b), (e), (A), (B'), (D'), (E'''), (G'), (H'), (M)
Date|2015-07-11
PLplot commit|dd9f79e
CMake version|3.1.2
Generator|"Unix Makefiles"
Platform|Cygwin (64-bit)
Pango/Cairo version|1.36.8/1.12.18
Qt version|4.8.7
WxWidgets version|3.0.2
Shared libraries?|Dynamic drivers?
Yes|Yes
Yes|No
No|No
CMake-based build tree?|test_noninteractive?|test_interactive?|ctest?
Yes|Yes|No|Yes
CMake-based installed examples?|test_noninteractive?|test_interactive
Yes|Yes|No
Traditional Installed examples?|test_noninteractive?|test_interactive
Yes|Yes|No

|||
---|---|---|---
Tester|Arjen Markus
Notes|(a), (h), (A), (B'), (C'), (D), (D'), (E), (F'), (G), (H), (I), (J)
Date|2015-07-10
PLplot commit|32be1b9
CMake version|3.2.2
Generator|"MSYS Makefiles"
Platform|MinGW/MSYS
Pango/Cairo version|Not Applicable
Qt version|Not Applicable
WxWidgets version|Not Applicable
Shared libraries?|Dynamic drivers?
Yes|Yes
Yes|No
No|No
CMake-based build tree?|test_noninteractive?|test_interactive?|ctest?
Yes|Yes|No|Yes
CMake-based installed examples?|test_noninteractive?|test_interactive
Yes|Yes|No
Traditional Installed examples?|test_noninteractive?|test_interactive
No||

|||
---|---|---|---
Tester|Hazen Babcock
Notes|(a), (b), (e), (g), (A), (L)
Date|2015-04-13
PLplot commit|09dee003
CMake version|2.8.12.2
Generator|"Unix Makefiles"
Platform|Lubuntu 14.04.2 LTS with system libraries
Pango/Cairo version|1.36.3/1.13.1
Qt version|Not Applicable
WxWidgets version|Not Applicable
Shared libraries?|Dynamic drivers?
Yes|Yes
Yes|No
No|No
CMake-based build tree?|test_noninteractive?|test_interactive?|ctest?
Yes|Yes|No|Yes
CMake-based installed examples?|test_noninteractive?|test_interactive
Yes|Yes|No
Traditional Installed examples?|test_noninteractive?|test_interactive
Yes|Yes|No

|||
---|---|---|---
Tester|Alan W. Irwin
Notes|(a), (b), (c), (d), (e), (f), (A), (K)
Date|2015-04-11
PLplot commit|99fe5f0
CMake version|3.0.2
Generator|"MSYS Makefiles"
Platform|MinGW-4.7.2/MSYS/Wine-1.6.1 with epa_built libraries 
Pango/Cairo version|Not Applicable
Qt version|Not Applicable
WxWidgets version|Not Applicable
Shared libraries?|Dynamic drivers?
Yes|Yes
Yes|No
No|No
CMake-based build tree?|test_noninteractive?|test_interactive?|ctest?
Yes|Yes|Yes|Yes
CMake-based installed examples?|test_noninteractive?|test_interactive
Yes|Yes|Yes
Traditional Installed examples?|test_noninteractive?|test_interactive
Yes|Yes|Yes

|||
---|---|---|---
Tester|Alan W. Irwin
Notes|(a), (b), (c), (d), (e), (A)
Date|2015-03-29
PLplot commit|5f6e28f
CMake version|3.0.2
Generator|"Unix Makefiles"
Platform|Debian stable with epa_built libraries
Pango/Cairo version|1.35/1.12.14
Qt version|5.3.2
WxWidgets version|3.0.2
Shared libraries?|Dynamic drivers?
Yes|Yes
Yes|No
No|No
CMake-based build tree?|test_noninteractive?|test_interactive?|ctest?
Yes|Yes|Yes|Yes
CMake-based installed examples?|test_noninteractive?|test_interactive
Yes|Yes|Yes
Traditional Installed examples?|test_noninteractive?|test_interactive
Yes|Yes|Yes

Testing notes where lower case notes concern configuration and build options while upper case notes concern limitations on testing due to platform constraints ("not available"), arbitrary constraints imposed by the tester to simplify testing ("not installed" or "ignored"), or working around PLplot issues for the platform ("disabled").
* (a) Testing done on 64-bit (x86-64, also known as x64, x86_64, and AMD64, ) hardware.
* (b) Used parallel make option (-j4) for all builds, installs, and test targets.
* (c) Suitable dependent libraries have been installed on the system so there are no device drivers from the default list for this platform that are missing from this test.
* (d) Suitable compilers and bindings-related development packages have been installed on the system so there are no default bindings that are missing from this test.
* (e) Java, Python, Octave, Lua, and OCaml bindings/examples require shared PLplot libraries in order to work so were not available for testing for the static PLplot libraries case.
* (e1) Java, Python, Octave, and Lua bindings/examples require shared PLplot libraries in order to work so were not available for testing for the static PLplot libraries case.
* (f) For this MinGW/MSYS/Wine platform test the build_plplot_lite epa_build target was used which simplifies testing by excluding the qt, cairo, and wxwidgets devices from tests.  This was a "lite" test in other respects as well; i.e., the D, Java, OCaml, and Octave languages were not available on this platform.
* (g) This Lubuntu platform did not have Ada, Fortran, D, Java, or OCaml compilers installed and did not have development versions of Octave, Tcl/Tk, WxWidgets, Lua, shapelib, qhull, libLASi, or libharu installed. Therefore corresponding components of PLplot were disabled and not tested.
* (h) This MinGW/MSYS platform with no epa_built libraries has very few PLplot soft prerequisites available so tests on this platform necessarily only apply to a small number of the PLplot components (i.e., just the mem, ntk, null, ps, svg, wingcc, and xfig device drivers and just the c++, f95, and tcl bindings).
* (i) CMake was built with the bootstrap method to make it depend on Qt4 rather than Qt5 to help avoid Qt4/Qt5 MSYS2 package conflicts.
* (i') CMake-3.3.2 was built with the bootstrap method to use the more consistent Python version finding that is available for that CMake version.
* (i1) Non-system CMake-3.4.3 used for the configuration. 
* (j) g++ (but not gcc) -DUNICODE option required to make wxwidgets device driver buildable.
* (k) wxwidgets-only interactive tests using -DOLD_WXWIDGETS=ON to comprehensively test the old wxwidgets device driver.
* (l) This "bare" Windows platform has only limited access to free software libraries that are the prerequisites for many different components of PLplot and no access to Unix tools.  Both factors greatly constrain the PLplot testing that can be done on this platform.  The MSVC C/C++ compiler was "Microsoft (R) C/C++ Optimizing Compiler Version 18.00.40629 for x64"; the ifort Fortran compiler was "Intel(R) Parallel Studio XE 2015 Update 1 Composer Edition (package 148)"; the Tcl software package that was used was version 8.6.1 downloaded from [ActiveState](http://www.activestate.com/tcl); the build was done with nmake; and the run-time testing (implemented with a Windows batch file) consisted of running all the PLplot C, Fortran, and Tcl standard examples for the psc device and checking that corresponding PostScript results were consistent for those computer languages.
* (A) No obvious configure, build, or install errors. No run-time errors in tests other than those noted in additional "upper-case" notes (if any).
* (B) Interactive tests disabled to avoid run-time errors.
* (B') Interactive tests ignored.
* (B1) Interactive tests ignored.
* (C) Traditional build of installed tests disabled to avoid build errors.
* (C') pkg-config not available therefore traditional build of installed examples not tested.
* (C'') pkg-config was installed, but traditional build had to be disabled because of runtime errors.
* (C1) pkg-config not installed so traditional build of installed examples not tested.
* (D) libqhull not available.
* (D') shapelib not available.
* (D1) libqhull not installed and shapelib not installed so interpolation and map capabilities of PLplot were substantially reduced for this test.
* (E) Swig not available therefore Java, Python, Octave, and Lua bindings not tested.
* (E') Swig was installed but Java, Octave, and Lua not installed so those bindings not tested.
* (E'') Java not available and Octave ignored.
* (E''') Java not available, Octave ignored, and Numpy not installed so java, octave, and python bindings not tested.
* (E'''') Java and Octave not available so java and octave bindings not tested.
* (E''''') Octave (build errors) and Lua (run-time errors) were disabled so octave and lua bindings not tested.
* (E1) Java not available, Octave4 available, but ignored because experimental.
* (E2) Java not available, Python libraries not installed, octave not available, and lua not installed.  Therefore, java, python, octave, and lua bindings not tested.
* (F) Tk/Itcl/Itk not installed therefore not tested.
* (F') X11 not available.  Therefore -dev tk and -dev tkwin not tested and Itcl/Itk not installed therefore not tested.
* (F'') X11 server was running, but was not picked up - DISPLAY variable?  Therefore, dev tk and -dev tkwin not tested and Itcl/Itk not installed therefore not tested.
* (F''') X11, Itcl, and Itk not available.  Therefore -dev xcairo, -dev tk, and -dev tkwin not tested and Itcl/Itk not tested.
* (F'''') Itcl and Itk not available so those parts of the Tcl/Tk bindings were not tested.
* (F1) X11 not available.  Therefore, no Tk-related examples could be built, and the only Tk-related device that could be built was -dev ntk.  That device build was a success, but that device was not run-tested because of issue (B1).
* (G) Ada, D, and OCaml compilers not available so ada, d, and ocaml bindings not tested.
* (G') Ada disabled, D not available, and camlidl not available so ada, d, and ocaml bindings not tested.
* (G'') D compiler(gdc) not available and OCaml (build errors) was disabled so d, and ocaml bindings not tested.
* (G1) Ada automatically disabled because gnat library not found; D, and OCaml compilers not available.  Therefore ada, d, and ocaml bindings not tested.
* (G2) Ada disabled for unknown reasons, D compiler (gdc) not available, and octave disabled for unknown reasons.  Therefore, ada, d, and ocaml bindings not tested.
* (G3) gnatmake cannot compile simple Ada test programme. gdc compiler is not available, and camlidl application not available.  Therefore, ada, d, and ocaml bindings are automatically disabled.  
* (H) libharu, libLASi, wxwidgets not available so pdf, psttf, and wxwidgets device drivers not tested.
* (H') libharu not available so pdf device driver not tested.
* (H'') libharu and libLASi not available and wxwidgets ignored so pdf, psttf, and wxwidgets device drivers not tested.
* (H''') libharu and libLASi not available so pdf and psttf device drivers not tested.
* (H1) libharu not available so pdf device driver not tested.
* (H2) libharu not installed, liblasi not available, and wxwidgets not installed.  Therefore, the pdf, psttf, and wxwidgets device drivers were not tested.
* (H3) libLASi not available.  Therefore, psttf(c) device drivers were automatically disabled.
* (I) libpango/libcairo not available therefore cairo devices not tested.
* (I1) pkg-config not installed which means libpango/libcairo not found.  Therefore, cairo devices not tested.
* (J) libQt not available therefore qt devices not tested.
* (J') The Qt component of PLplot is disabled because of run-time errors (segfaults) for qt devices so those devices  (and pyqt4) not tested.
* (J1) libqt5 not installed so qt devices not tested.
* (K) Encountered intermittent (once only, repeat test did not have it) make.exe error: "INTERNAL: Exiting with 1 jobserver tokens available; should be 4!"  I attribute this error to the problematic make.exe parallel-build option on MSYS. (See \u003Chttps://sourceforge.net/p/mingw/bugs/1950/> for other unsolved classical MSYS parallel build flakiness.)  To work around this bug for the MinGW/MSYS platform should use the epa_build cmake option, -DNUMBER_PARALLEL_JOBS:STRING=1.  However, this workaround should not be necessary for the Cygwin or MinGW-w64/MSYS2 platforms.
* (L) For this Lubuntu system with Qt4.8.6 system libraries, severe memory management issues (including segfaults) occurred for all attempts to use qt devices.  Therefore, to complete this comprehensive test had to disable everything Qt related by using the script option 
`--cmake_added_options "DEFAULT_NO_QT_DEVICES=ON -DENABLE_qt=OFF"`
* (M) gtk+-x11-2.0 development package not installed, therefore extXdrawable_demo test not run.
* (N) sip ignored so pyqt4 not tested.
* (N1) sip directory not found because pyqtconfig module not available.  Therefore, pyqt4 was automatically disabled.

### <a name="Fortran Testing Reports"></a>Testing Reports for new Fortran Binding (in reverse chronological order)
This table was created to summarize testing reports of the new Fortran binding, but now that testing just occurs as part of the above general testing results.  Therefore this table is now frozen to preserve the historical test records for non-standard compilers (such as nagfor) that we tried. 

||
---|---|---
Tester|Arjen Markus
Notes|(a), (d), (A)
Date|2016-12-21
PLplot commit|995e75e
CMake version|3.4.3
Generator|"NMake Makefiles"
Platform|64-bit Windows with MSVC + ifort
Shared libraries?|Dynamic drivers?
Yes|Yes
CMake-based build tree?|test_noninteractive?|ctest?
Yes|No|No
CMake-based installed examples?|test_noninteractive?
No|No
Traditional Installed examples?|test_noninteractive?
No|No

||
---|---|---
Tester|Arjen Markus
Notes|(a), (A)
Date|2016-12-13
PLplot commit|08935de
CMake version|3.6.2
Generator|"Unix Makefiles"
Platform|64-bit Cygwin with gfortran-5.4.0
Shared libraries?|Dynamic drivers?
Yes|Yes
Yes|No
No|No
CMake-based build tree?|test_noninteractive?|ctest?
Yes|Yes|Yes
CMake-based installed examples?|test_noninteractive?
Yes|Yes
Traditional Installed examples?|test_noninteractive?
Yes|Yes

||
---|---|---
Tester|Arjen Markus
Notes|(a), (c1), (A), (B1)
Date|2016-12-13
PLplot commit|08935de
CMake version|3.4.3
Generator|"Unix Makefiles"
Platform|64-bit MinGW-w64/MSYS2 with gfortran 6.2.0
Shared libraries?|Dynamic drivers?
Yes|Yes
Yes|No
No|No
CMake-based build tree?|test_noninteractive?|ctest?
Yes|Yes|Yes
CMake-based installed examples?|test_noninteractive?
Yes|Yes
Traditional Installed examples?|test_noninteractive?
No|No

||
---|---|---
Tester|Alan W. Irwin
Notes|(a), (b), (A)
Date|2016-12-13
PLplot commit|6170626
CMake version|3.0.2
Generator|"Unix Makefiles"
Platform|Debian Jessie with gfortran 4.9.2-10
Shared libraries?|Dynamic drivers?
Yes|Yes
Yes|No
No|No
CMake-based build tree?|test_noninteractive?|ctest?
Yes|Yes|Yes
CMake-based installed examples?|test_noninteractive?
Yes|Yes
Traditional Installed examples?|test_noninteractive?
Yes|Yes

||
---|---|---
Tester|Alan W. Irwin
Notes|(a), (b), (A)
Date|2016-12-11
PLplot commit|aab0449
CMake version|3.7.0
Generator|"Unix Makefiles"
Platform|Debian Jessie with gfortran 4.9.2-10
Shared libraries?|Dynamic drivers?
Yes|Yes
Yes|No
No|No
CMake-based build tree?|test_noninteractive?|ctest?
Yes|Yes|Yes
CMake-based installed examples?|test_noninteractive?
Yes|Yes
Traditional Installed examples?|test_noninteractive?
Yes|Yes

||
---|---|---
Tester|Arjen Markus
Notes|(a), (A1)
Date|2016-07-27
PLplot commit|71c86fc
CMake version|3.5.2
Generator|"Unix Makefiles"
Platform|Ubuntu 16.04 LTS (Xenial) with NAGFOR (version 6.1) compiler
Shared libraries?|Dynamic drivers?
Yes|Yes
Yes|No
No|No
CMake-based build tree?|test_noninteractive?|ctest?
Yes|Yes|Yes
CMake-based installed examples?|test_noninteractive?
Yes|Yes
Traditional Installed examples?|test_noninteractive?
Yes|Yes

||
---|---|---
Tester|Alan W. Irwin
Notes|(a), (b), (A)
Date|2016-04-27
PLplot commit|3442bac
CMake version|3.4.3
Generator|"Unix Makefiles"
Platform|Debian Jessie with gfortran 4.9.2-10
Shared libraries?|Dynamic drivers?
Yes|Yes
Yes|No
No|No
CMake-based build tree?|test_noninteractive?|ctest?
Yes|Yes|Yes
CMake-based installed examples?|test_noninteractive?
Yes|Yes
Traditional Installed examples?|test_noninteractive?
Yes|Yes

||
---|---|---
Tester|Arjen Markus
Notes|(a), (A)
Date|2016-03-16
PLplot commit|1183a10
CMake version|3.3.2
Generator|"Unix Makefiles"
Platform|64-bit Cygwin
Shared libraries?|Dynamic drivers?
Yes|Yes
Yes|No
No|No
CMake-based build tree?|test_noninteractive?|ctest?
Yes|Yes|Yes
CMake-based installed examples?|test_noninteractive?
Yes|Yes
Traditional Installed examples?|test_noninteractive?
Yes|Yes

Testing notes where lower case notes concern configuration and build options while upper case notes concern limitations on testing due to platform constraints ("not available"), arbitrary constraints imposed by the tester to simplify testing ("not installed" or "ignored"), or working around PLplot issues for the platform ("disabled").
* (a) Testing done on 64-bit (x86-64, also known as x64, x86_64, and AMD64, ) hardware.
* (b) Used parallel make option (-j4) for all builds, installs, and test targets.
* (c1) Non-system CMake-3.4.3 used for the configuration.
* (d) This "bare" Windows platform has only limited access to free software libraries that are the prerequisites for many different components of PLplot and no access to Unix tools.  Both factors greatly constrain the PLplot testing that can be done on this platform.  The MSVC C/C++ compiler was "Microsoft (R) C/C++ Optimizing Compiler Version 18.00.40629 for x64"; the ifort Fortran compiler was "Intel(R) Parallel Studio XE 2015 Update 1 Composer Edition (package 148)"; the Tcl software package that was used was version 8.6.1 downloaded from [ActiveState](http://www.activestate.com/tcl); the build was done with nmake; and the run-time testing (implemented with a Windows batch file) consisted of running all the PLplot C, Fortran, and Tcl standard examples for the psc device and checking that corresponding PostScript results were consistent for those computer languages.
* (A) No obvious configure, build, or install errors. No run-time errors in tests other than those noted in additional "upper-case" notes (if any).
* (A1) No obvious configure, build, or install errors. No run-time errors in tests other than those noted in additional "upper-case" notes (if any). No warning messages at all emitted by the NAGFOR compiler.
* (B1) pkg-config not installed so traditional build of installed examples not tested.

The content of this page is available under the [GNU Free Documentation License 1.2](http://www.gnu.org/copyleft/fdl.html).

