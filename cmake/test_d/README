SUMMARY:

The purpose of this self-contained project is to provide a simple test
case for CMake D language support.

DESCRIPTION:

This project consists of a C library which defines a function
that returns the classic "hello, world" C string, a D library which
calls the C routine and changes the returned C string to a D string,
and a D executable that calls that wrapper and prints out that D
string with '\n' appended.  This complete project includes a
CMake-based build system and updated D language support from the
[cmake-d project](https://github.com/dcarp/cmake-d).  The plan is to
make those updates available to that project after the CMake fix
discussed below makes it into a CMake release.

LICENSING:

Aside from the files noted below, all files in the
test_d package may be distributed under the following (LGPL version
2 or later) terms:

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc. 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

The full text of this license is given in the file COPYING.LIB.

The only exceptions to the above licensing terms are all the files in
cmake/Modules which are licensed under the MIT license as described in
cmake/Modules/LICENSE.

TESTING PROCEDURE:

The test_d project may be used to test the CMake D language support as follows:

(1) Access a recent git master branch version CMake if you are testing ldc2 or dmd.

Both dmd and ldc language-support files set language-support CMake
variables that are only recognized by CMake commit (git described as v3.15.2-908-g3ec986ce8e)
that has just (as of 2019-08-29) landed on the CMake master branch and which
will become part of CMake-3.16.0 once that new version of CMake is
released.  So as a first step in this test procedure, you should build
AND install CMake from the tip of its git master branch or from
CMake-3.16.0 source code once that version of CMake is released.

N.B. that build (using the bootstrap method) and install worked well for me, and I access
that installed version by setting the PATH variable below.

(2) Access a recent git master branch version of dmd if you are testing dmd.

The -pthread link option is currently used for Linux and MSYS2 builds
of the plplot project but not Cygwin builds of that project.  Also, I
currently don't know -pthread link details for plplot on Mac OS X, but
I do have some preliminary evidence that at least the -pthread option
is honored (e.g., by gcc for MacPorts) on Mac OS X.  So currently,
test_d *requires* for all platforms other than Cygwin that -pthread is
used when building the C library to create for the simple test_d
project the same test conditions that occur for the much more complex
plplot project build for all of Linux, MSYS2, Cygwin, and (likely) Mac
OS X.

That -pthread link option works without issues for gdc, but does
require the -Xcc=-pthread command-line option to work for both ldc2
and dmd to pass the -pthread option to the underlying gcc that is used
for linking dmd results on Posix platforms.  The -Xcc= option has been
implemented for more than a year now for ldc2 so most platforms (e.g.,
Debian Buster) will have an ldc2 version that supports that option.
However, released versions of dmd currently do not have that option
implemented so you have to build a pre-release version of dmd from its
git master branch from 2019-10-14 or later or else wait for the
release of dmd 2.089.0
[scheduled for release on 2019-11-01](https://dlang.org/changelog/release-schedule.html)
which should include this current master branch support for the -Xcc= option.

The reason for the 2019-10-14 date is Cybershadow's pull request to implement the
needed (for -pthread tests) -Xcc= option was merged to the dmd master
branch on that date.

Therefore, as of 2019-10-14, I built the latest master branch version
of dmd following the directions at
<https://wiki.dlang.org/Building_under_Posix>.  However, inspection
of the relevant Makefiles indicated those instructions must be supplemented
as follows:

N.B. each of these steps are essential AND must be concluded for all
indicated repositories before moving on to the next step.

* Remove the install tree (which if it exists will have a top-level
  directory corresponding to the "install" subdirectory of your
  current results).  The reason for this removal is that stale results
  from previous installs of dmd, phobos, and druntime might interfere
  with the proper operation of the install tree.

* git clone dmd, phobos, druntime, and tools or else if those local
  git repositories already exist, pull the latest master branch
  version for each of those local repositories.

* Build the "clean" target for dmd, phobos, druntime, and tools to remove stale
  generated files from previous builds and tests that tend to litter the working
  directories of those repositories and which are KNOWN to interfere (e.g.,
  ldd on the installed phobos library did not work correctly without this
  clean step for druntime) with the proper
  operation of the install tree.

* Build the "all" target for dmd and phobos (which will build all the parts
  from druntime and tools that are needed by phobos).

* Build the "install" target for dmd, phobos, AND druntime.  (Apparently, nothing
  has to be installed for tools for test_d (and plplot) project needs.)

* (Optional) build the "test" target for dmd.

* (Optional) build the "unittest" target for phobos.

N.B.  In my case those optional tests passed perfectly with no warning
or error messages, and it is that installed and tested version of dmd,
phobos, and druntime that I access below by setting appropriate
environment variables.

(3) Check documentation of comprehensive test of D language support on
your platform as follows:

scripts/comprehensive_test.sh --help

This script is similar in concept but quite different (note its
different location) than the corresponding script in
../../scripts/comprehensive_test.sh which comprehensively tests all of
PLplot so do not confuse the two.

(4) Actually do a comprehensive test of D language support as follows:

<set environment> scripts/comprehensive_test.sh

where <set environment> sets up the cmake binary built from cmake
source code git commit v3.15.2-908-g3ec986ce8e and one of the gdc,
ldc, or dmd compilers.

For example, on my Debian Buster system <set environment> was one of the three following possibilities:

# I. dmd (and the same version of phobos) built by myself since Debian
# Buster does not supply a system version.

# N.B. Currently I am testing the master branch version of dmd that
# includes the needed -Xcc option for dmd.  See previous dmd comments
# about building this version.  To gain access to that work I used the
# PATH setting below.  Furthermore, the current test_d build system
# does not set up RPATH properly so that the particular phobos library
# required when linking D libraries and executables is not found by
# the run-time loader.  So I had to set LD_LIBRARY_PATH appropriately
# below to overcome this deficiency in the test_d build system for
# the case where dmd has to be built.

# <aside>
# This test_d build-system deficiency will very likely never be fixed
# since access to non-system versions of any D compiler is a rather
# special requirement that will likely (at least a relatively short
# time after dmd-2.089.0 is released) only be required on the
# relatively small subset of platforms where no modern system version
# of dmd is available.  Debian Buster=Stable is such an example.  But
# even in that case there is some hope (since the historic dmd
# licensing issues have apparently now been addressed) this dmd Debian
# packaging deficiency will be addressed in future versions of Debian
# and similarly for other Linux and non-Linux free software
# distributions that currently do not supply a modern system version
# of dmd.
# </aside>

# We use the -v option for dmd so that we can see the actual derived
# command-line that dmd uses to communicate with the linker.

env PATH=/home/software/cmake/install-3ec986ce8e/bin:/home/software/dmd/install/linux/bin64:"$PATH" LD_LIBRARY_PATH=/home/software/dmd/install/linux/lib64  DC="dmd -v"

# II. system ldc
env PATH=/home/software/cmake/install-3ec986ce8e/bin:"$PATH" DC=ldc2

# III. system gdc
env PATH=/home/software/cmake/install-3ec986ce8e/bin:"$PATH" DC=gdc

For our two principal build configurations (shared libraries and
static libraries) this script (if executed without options) builds the
test_noninteractive target (which builds the "hello" executable and
all its prerequisites, runs that executable, and compares the output
of that executable with the expected output) in the build tree and in
the installed examples tree.

# Check for errors.  Last pipeline stanza filters out dmd -v results for function internals
#  that mention case-insensitive "error" anywhere on the D language source code for the function.
grep -i error ../../../comprehensive_test_d_disposeable/*/*/output_tree/*.out |grep -v out:function

# Check for warnings
grep -i warning ../../../comprehensive_test_d_disposeable/*/*/output_tree/*.out

# Check (Linux only) for any undefined symbol issues discovered by the script.
grep -iE 'found|symbol|undefined' ../../../comprehensive_test_d_disposeable/*/*/output_tree/*ldd.out

# Check whether -pthread flag is actually checked by the Threads find module.  (This is just out
# of interest since test_d forces use of the -pthread flag in all cases other than Cygwin.)
grep 'Check if compiler accepts \-pthread' ../../../comprehensive_test_d_disposeable/*/*/output_tree/*.out |less

# Check linking of hello executable to help evaluate whether the
# -pthread logic is working as expected.

grep '\-pthread' ../../../comprehensive_test_d_disposeable/*/*/output_tree/*.out | grep -v 'Check if compiler accepts \-pthread' | grep '\-o[^ ]*hello'

Send me (Alan W. Irwin <airwin@users.sourceforge.net> the report
tarball (of information that is collected by that script at
../../../comprehensive_test_d_disposeable/comprehensive_test.tar.gz)
for further analysis of any issues you discover.

(5, optional) Debug result:

If step (4) shows any errors than you can optionally debug the result as
follows:

<set environment> scripts/comprehensive_test.sh --do_trace yes

This produces voluminous results and buried (deeply) in those is
typically enough information to find out what is going wrong with the
CMake D language support.  These voluminous results are automatically
included in the tarball report so please send that report to me (as
well as the one created without the --do_trace yes option in step (4).

(6, optional) Test with valgrind:

Create an empty build tree, run cmake from there, create the hello
executable and test that with valgrind.

mkdir build_dir
cd build_dir
<set environment> cmake -DBUILD_TEST=ON <path to top-level of test_d source tree> >& cmake.out
make hello >& hello.out
valgrind src_executable/hello >& valgrind.out

Look through the generated *.out files for any error conditions.

In sum, this project provides a good test of CMake language support
for D.

In a bit more detail, the CMake-based build system of this project
demonstrates how to use CMake D language support to build D
executables that must be linked to D libraries that wrap functions
implemented in C libraries.  A special effort is made to link the
test_d C library with the -pthread compiler option to increase the
power of this test (on all platforms other than Cygwin).  The
comprehensive test script supplied with this project tests this
project for all principal library configurations and both the build
tree and install tree.  Which of the three principal D compilers (dmd,
ldc2, or gdc) that are used for this test can be controlled in a
simple way using environment variables, with an example given above
for each of these compilers.

N.B. If any user is having trouble with any of dmd, ldc2, or gdc for
any software project or any platform that uses *identical* CMake D
language support as test_d (e.g., the plplot project), then their
first debugging/replication steps should be to run at least step (4)
and step (5) above to help figure out with this simple test_d project
what the CMake D language support issue might be for their more
complex project.
